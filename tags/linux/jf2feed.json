{"author":{"name":"Yash Agarwal","type":"card","url":"https://yashagarwal.in/"},"children":[{"content":{"html":"\u003cp\u003eBefore I start, here is some technical information about my website -\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHosted on Gitlab and usage its CD for automatic deployment, which is triggered on a git commit.\u003c/li\u003e\n\u003cli\u003eThe domain name registrar is GoDaddy.\u003c/li\u003e\n\u003cli\u003eLet\u0026rsquo;s Encrypt as the TLS certificate provider for my domain name.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLet\u0026rsquo;s Encrypt provides certificates for 90 days only, so I was forced to set up the \u003ccode\u003ecertbot\u003c/code\u003e every three months, then generate the certificate and \u003cem\u003emanually\u003c/em\u003e deploy the certificates to GitLab. It was frustrating because in three months, my shell probably will not remember the command I used last time, and I was too lazy to document the process somewhere.\u003c/p\u003e\n\u003cp\u003eThen I came across a \u003ca href=\"https://github.com/pallavagarwal07/NamesiloCert\"\u003eproject\u003c/a\u003e, which was trying to do a similar thing with other domain name registrar. I thought that this is an excellent setup to adapt and modify it to suit my needs. So I decided to write my module for automatic deployment of Let\u0026rsquo;s Encrypt certificates to GitLab.\u003c/p\u003e\n\u003ch2 id=\"how-does-lets-encrypt-work\"\u003eHow does Let\u0026rsquo;s Encrypt work?\u003c/h2\u003e\n\u003cp\u003eBefore Let\u0026rsquo;s Encrypt can generate the certificate for the domain, it requires the user to prove domain ownership. Let\u0026rsquo;s Encrypt provides two \u003ca href=\"https://letsencrypt.org/docs/challenge-types/\"\u003emethods\u003c/a\u003e to do this task -\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUpdating the DNS records of the domain registrar (DNS-01 challenge)\u003c/li\u003e\n\u003cli\u003eAdding an HTTP resource under a well-known URI on the website (HTTP-01 challenge)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eUsing the second method requires me to add a file on my website, and I did not want to do that. Moreover, if in the future, I decide to host some other service, which does not have a website, then this method will fail.\u003c/p\u003e\n\u003cp\u003eThe first method requires that the domain configuration on the domain registrar is modified. GoDaddy provides a robust API, and it is not difficult to utilize that API to automate specific tasks. The probability of changing the registrar is quite low, at least for the next few years. It will be easier to generate the certificates for any subdomains, as all the subdomains will also be hosted under the same domain registrar.\u003c/p\u003e\n\u003ch2 id=\"how-does-the-tool-work\"\u003eHow does the tool work?\u003c/h2\u003e\n\u003cp\u003eSo here are the steps:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eCall \u003ccode\u003ecertbot\u003c/code\u003e with all the domain names\u003c/li\u003e\n\u003cli\u003eInvoke GoDaddy API to update the DNS records as indicated by Certbot\u003c/li\u003e\n\u003cli\u003eWait for 10 minutes for DNS changes to propagate\u003c/li\u003e\n\u003cli\u003eLet \u003ccode\u003ecertbot\u003c/code\u003e verify the DNS changes\u003c/li\u003e\n\u003cli\u003eUse the GitLab API to deploy the generated certificates to GitLab pages\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"step-1-invoking-certbot\"\u003eStep 1: Invoking certbot\u003c/h3\u003e\n\u003cp\u003eIn step 1, we call \u003ccode\u003ecertbot\u003c/code\u003e will the preferred method DNS. We also need to supply an email id (used by Let\u0026rsquo;s Encrypt to notify domain expiration). The \u003ccode\u003eEMAIL_ID\u003c/code\u003e environment variable can be used to store the email id of the user.\u003c/p\u003e\n\u003cp\u003eCertbot runs in an interactive mode by default. It is not desired in a scripted environment. Certbot also provides mechanisms to deploy the certificates to a local server automatically, but as we are hosting our website on Gitlab, we do not want the automatic deployment facility. So we need to invoke the \u003ccode\u003ecertbot\u003c/code\u003e command with \u003ccode\u003e--manual\u003c/code\u003e and \u003ccode\u003ecertonly\u003c/code\u003e modes.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ecertbot   --manual \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          --preferred-challenges dns \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          --agree-tos \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          --email \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003eEMAIL_ID\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          --no-eff-email \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          --expand \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          --renew-by-default \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          --manual-public-ip-logging-ok \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          --noninteractive \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          --redirect \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          --config-dir \u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003eDIR\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e/generated/config \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          --work-dir \u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003eDIR\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e/generated/work \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          --logs-dir \u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003eDIR\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e/generated/logs \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          --manual-auth-hook \u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003eDIR\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e/auth_hook.sh \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -d yashagarwal.in \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          certonly\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe explanation for most of the flags used in the above command can be found by running the following command -\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ecertbot --help\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003ccode\u003e--manual-auth-hook\u003c/code\u003e flag is worth looking. This hook provides a mechanism to specify the executable, which can be used to facilitate domain ownership validation. In this case, the hook points to a script \u003ccode\u003eauth_hook.sh\u003c/code\u003e, which then calls a Go client, which interacts with GoDaddy API.\u003c/p\u003e\n\u003ch3 id=\"step-2-adding-dns-entry-to-godaddy-dns-manager\"\u003eStep 2: Adding DNS entry to GoDaddy DNS manager\u003c/h3\u003e\n\u003cp\u003eCertbot supplies two environment variables \u003ccode\u003eCERTBOT_DOMAIN\u003c/code\u003e, which contains the domain name to be verified and \u003ccode\u003eCERTBOT_VALIDATION\u003c/code\u003e, which includes a random string corresponding to \u003ccode\u003e_acme-challenge TXT\u003c/code\u003e entry. What this means is that, if I have\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003eCERTBOT_DOMAIN=yashagarwal.in\nCERTBOT_VALIDATION=6VNg5kDVI_BF1S9N5s74LTBHQnwDpQqKlblKRjIzBwM\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThen the DNS manager should contain a TXT entry \u003ccode\u003e_acme-challenge.yashagarwal.in\u003c/code\u003e with the value of \u003ccode\u003e6VNg5kDVI_BF1S9N5s74LTBHQnwDpQqKlblKRjIzBwM\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eauth_hook.sh\u003c/code\u003e file calls the Go client with the abovementioned environment variables. The relevant code can be found \u003ca href=\"https://github.com/yashhere/GoDaddy-GitLab-Certs/blob/master/auth_hook.sh\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eOnce all the DNS entries are added, the \u003ccode\u003eauth_hook.sh\u003c/code\u003e script will sleep for 10 minutes. It is to allow DNS changes to propagate throughout the Internet. It is a random duration as I could not find any GoDaddy support page mentioning the exact period used by them.\u003c/p\u003e\n\u003ch3 id=\"step-3-generation-of-certificates\"\u003eStep 3: Generation of certificates\u003c/h3\u003e\n\u003cp\u003eOnce the \u003ccode\u003eauth_hook.sh\u003c/code\u003e script returns successfully, \u003ccode\u003ecertbot\u003c/code\u003e will verify the DNS records. If the verification is successful, \u003ccode\u003ecertbot\u003c/code\u003e will generate the certificates in \u003ccode\u003e./generated/config/live/{CERTBOT_DOMAIN}\u003c/code\u003e directory.\u003c/p\u003e\n\u003ch3 id=\"step-4-deploying-the-certificates-to-gitlab\"\u003eStep 4: Deploying the certificates to GitLab\u003c/h3\u003e\n\u003cp\u003eI use the following command to deploy the certificates to Gitlab pages where my website is hosted -\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ecurl  -vvv \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e      --request PUT \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e      --header \u003cspan class=\"s2\"\u003e\u0026#34;Private-Token:\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003eGITLAB_TOKEN\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e      --form \u003cspan class=\"s2\"\u003e\u0026#34;certificate=@\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003ekey_dir\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e/fullchain.pem\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e      --form \u003cspan class=\"s2\"\u003e\u0026#34;key=@\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003ekey_dir\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e/privkey.pem\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\ \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;https://gitlab.com/api/v4/projects/yashhere%2Fyashhere.gitlab.io/pages/domains/yashagarwal.in\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003ewhere\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"nv\"\u003ekey_dir\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;./generated/config/live/yashagarwal.in\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eMoreover, \u003ccode\u003eGITLAB_TOKEN\u003c/code\u003e is an environment variable that contains the API token generated from the Gitlab settings page.\u003c/p\u003e\n\u003ch2 id=\"automatic-deployment-using-travis-ci\"\u003eAutomatic Deployment using Travis CI\u003c/h2\u003e\n\u003cp\u003eIt is not automation if I have to run this script manually every three months. So I created a Travis CI job to automate this process. The job will run every month and deploy my certificates automatically. It has been four months, and I have not faced any issues with this setup.\u003c/p\u003e\n\u003cp\u003eThe code for this post can be viewed at \u003ca href=\"https://github.com/yashhere/GoDaddy-GitLab-Certs\"\u003eGithub\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThanks for reading. Cheers 😄\u003c/p\u003e\n","text":"Before I start, here is some technical information about my website -\n Hosted on Gitlab and usage its CD for automatic deployment, which is triggered on a git commit. The domain name registrar is GoDaddy. Let\u0026rsquo;s Encrypt as the TLS certificate provider for my domain name.  Let\u0026rsquo;s Encrypt provides certificates for 90 days only, so I was forced to set up the certbot every three months, then generate the certificate and manually deploy the certificates to GitLab. It was frustrating because in three months, my shell probably will not remember the command I used last time, and I was too lazy to document the process somewhere.\nThen I came across a project, which was trying to do a similar thing with other domain name registrar. I thought that this is an excellent setup to adapt and modify it to suit my needs. So I decided to write my module for automatic deployment of Let\u0026rsquo;s Encrypt certificates to GitLab.\nHow does Let\u0026rsquo;s Encrypt work? Before Let\u0026rsquo;s Encrypt can generate the certificate for the domain, it requires the user to prove domain ownership. Let\u0026rsquo;s Encrypt provides two methods to do this task -\n Updating the DNS records of the domain registrar (DNS-01 challenge) Adding an HTTP resource under a well-known URI on the website (HTTP-01 challenge)  Using the second method requires me to add a file on my website, and I did not want to do that. Moreover, if in the future, I decide to host some other service, which does not have a website, then this method will fail.\nThe first method requires that the domain configuration on the domain registrar is modified. GoDaddy provides a robust API, and it is not difficult to utilize that API to automate specific tasks. The probability of changing the registrar is quite low, at least for the next few years. It will be easier to generate the certificates for any subdomains, as all the subdomains will also be hosted under the same domain registrar.\nHow does the tool work? So here are the steps:\n Call certbot with all the domain names Invoke GoDaddy API to update the DNS records as indicated by Certbot Wait for 10 minutes for DNS changes to propagate Let certbot verify the DNS changes Use the GitLab API to deploy the generated certificates to GitLab pages  Step 1: Invoking certbot In step 1, we call certbot will the preferred method DNS. We also need to supply an email id (used by Let\u0026rsquo;s Encrypt to notify domain expiration). The EMAIL_ID environment variable can be used to store the email id of the user.\nCertbot runs in an interactive mode by default. It is not desired in a scripted environment. Certbot also provides mechanisms to deploy the certificates to a local server automatically, but as we are hosting our website on Gitlab, we do not want the automatic deployment facility. So we need to invoke the certbot command with --manual and certonly modes.\ncertbot --manual \\  --preferred-challenges dns \\  --agree-tos \\  --email \u0026#34;${EMAIL_ID}\u0026#34; \\  --no-eff-email \\  --expand \\  --renew-by-default \\  --manual-public-ip-logging-ok \\  --noninteractive \\  --redirect \\  --config-dir ${DIR}/generated/config \\  --work-dir ${DIR}/generated/work \\  --logs-dir ${DIR}/generated/logs \\  --manual-auth-hook ${DIR}/auth_hook.sh \\  -d yashagarwal.in \\  certonly The explanation for most of the flags used in the above command can be found by running the following command -\ncertbot --help The --manual-auth-hook flag is worth looking. This hook provides a mechanism to specify the executable, which can be used to facilitate domain ownership validation. In this case, the hook points to a script auth_hook.sh, which then calls a Go client, which interacts with GoDaddy API.\nStep 2: Adding DNS entry to GoDaddy DNS manager Certbot supplies two environment variables CERTBOT_DOMAIN, which contains the domain name to be verified and CERTBOT_VALIDATION, which includes a random string corresponding to _acme-challenge TXT entry. What this means is that, if I have\nCERTBOT_DOMAIN=yashagarwal.in CERTBOT_VALIDATION=6VNg5kDVI_BF1S9N5s74LTBHQnwDpQqKlblKRjIzBwM Then the DNS manager should contain a TXT entry _acme-challenge.yashagarwal.in with the value of 6VNg5kDVI_BF1S9N5s74LTBHQnwDpQqKlblKRjIzBwM.\nThe auth_hook.sh file calls the Go client with the abovementioned environment variables. The relevant code can be found here.\nOnce all the DNS entries are added, the auth_hook.sh script will sleep for 10 minutes. It is to allow DNS changes to propagate throughout the Internet. It is a random duration as I could not find any GoDaddy support page mentioning the exact period used by them.\nStep 3: Generation of certificates Once the auth_hook.sh script returns successfully, certbot will verify the DNS records. If the verification is successful, certbot will generate the certificates in ./generated/config/live/{CERTBOT_DOMAIN} directory.\nStep 4: Deploying the certificates to GitLab I use the following command to deploy the certificates to Gitlab pages where my website is hosted -\ncurl -vvv \\  --request PUT \\  --header \u0026#34;Private-Token:${GITLAB_TOKEN}\u0026#34; \\  --form \u0026#34;certificate=@${key_dir}/fullchain.pem\u0026#34; \\  --form \u0026#34;key=@${key_dir}/privkey.pem\u0026#34; \\ \u0026#34;https://gitlab.com/api/v4/projects/yashhere%2Fyashhere.gitlab.io/pages/domains/yashagarwal.in\u0026#34; where\nkey_dir=\u0026#34;./generated/config/live/yashagarwal.in\u0026#34; Moreover, GITLAB_TOKEN is an environment variable that contains the API token generated from the Gitlab settings page.\nAutomatic Deployment using Travis CI It is not automation if I have to run this script manually every three months. So I created a Travis CI job to automate this process. The job will run every month and deploy my certificates automatically. It has been four months, and I have not faced any issues with this setup.\nThe code for this post can be viewed at Github.\nThanks for reading. Cheers 😄\n"},"name":"Automatic HTTPS Certs Using GoDaddy and Gitlab APIs","published":"2019-07-23T16:40:28+05:30","summary":"Before I start, here is some technical information about my website -\n Hosted on Gitlab and usage its CD for automatic deployment, which is triggered on a git commit. The domain name registrar is GoDaddy. Let\u0026rsquo;s Encrypt as the TLS certificate provider for my domain name.  Let\u0026rsquo;s Encrypt provides certificates for 90 days only, so I was forced to set up the certbot every three months, then generate the certificate and manually deploy the certificates to GitLab.","type":"entry","url":"https://yashagarwal.in/posts/2019/07/automatic-https-certs-using-godaddy-and-gitlab-apis/"},{"content":{"html":"\u003cp\u003eRecently, I am experimenting with Web Application Firewalls a lot. ModSecurity is one of them. It is the most famous and useful open-source Web Application Firewall (WAF) in existence. It is supported by various web servers such as Apache, Nginx, and IIS.\u003c/p\u003e\n\u003cp\u003eThe job of ModSecurity is to sit in front of the application web server and check the incoming requests and outgoing responses to filter out malicious content. It does so by the use of powerful and complex regular expressions. ModSecurity uses a rule language for its rules. The rule language has variables and operators defined to aid in the process of parsing HTTP requests.\u003c/p\u003e\n\u003cp\u003eModSecurity, in itself, cannot block or allow requests. It is just a rule engine. It requires rules to operate appropriately. That\u0026rsquo;s where its sister project, Core Rule Set (CRS), comes into the picture. CRS is a rule set developed to be used with ModSecurity. It has been in active development for several years now and is very mature. Together, ModSecurity and CRS form a formidable defense against the widespread web application attacks.\u003c/p\u003e\n\u003cp\u003eNow that you know, what a WAF is, let\u0026rsquo;s proceed to install ModSecurity on Ubuntu. I will be compiling ModSecurity\u0026rsquo;s latest version on Ubuntu 18.04. We will also configure ModSecurity to use Core Rule Set.\u003c/p\u003e\n\u003ch2 id=\"installing-dependencies\"\u003eInstalling Dependencies\u003c/h2\u003e\n\u003cp\u003eModSecurity requires some dependencies to work correctly. Let\u0026rsquo;s install them -\u003c/p\u003e\n\u003cp\u003eFirst, upgrade the Ubuntu system.\u003c/p\u003e\n\u003cdiv class=\"highlight-wrapper\"\u003e\n    \u003cdiv class=\"highlight-before\"\u003ebash\u003c/div\u003e\n    \n        \u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo apt-get -y update\nsudo apt-get -y upgrade\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n    \n\u003c/div\u003e\n\u003cp\u003eNow install the dependencies.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo apt-get -y install git libtool dh-autoreconf pkgconf gawk libcurl4-gnutls-dev libexpat1-dev libpcre3-dev libssl-dev libxml2-dev libyajl-dev zlibc zlib1g-dev libxml2 libpcre++-dev libxml2-dev libgeoip-dev liblmdb-dev lua5.2-dev iputils-ping locales apache2 apache2-dev ca-certificates wget\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cem\u003eOptional\u003c/em\u003e: clean up the Ubuntu caches.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo apt-get clean \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e sudo rm -rf /var/lib/apt/lists/*\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eInstall \u003ccode\u003eSSDeep\u003c/code\u003e as well (as done \u003ca href=\"https://github.com/CRS-support/modsecurity-docker/blob/v3/apache-apache/Dockerfile\"\u003ehere\u003c/a\u003e)\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e ~\ngit clone https://github.com/ssdeep-project/ssdeep\n\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e ssdeep\n./bootstrap\n./configure\nmake\nsudo make install\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"compiling-modsecurity\"\u003eCompiling ModSecurity\u003c/h2\u003e\n\u003cp\u003eLet\u0026rsquo;s clone ModSecurity from Github.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e ~\ngit clone -b v3/master --single-branch https://github.com/SpiderLabs/ModSecurity\n\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e ModSecurity\ngit submodule init\ngit submodule update\n./build.sh\n./configure\nmake                \u003cspan class=\"c1\"\u003e# takes ~8 minutes on AWS t2.micro\u003c/span\u003e\nsudo make install\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"compiling-modsecurity-apache-connector\"\u003eCompiling ModSecurity-apache connector\u003c/h2\u003e\n\u003cp\u003eTo configure it with Apache, we will require ModSecurity-apache connector. Let\u0026rsquo;s install that as well.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e ~\ngit clone https://github.com/SpiderLabs/ModSecurity-apache\n\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e ModSecurity-apache\n./autogen.sh\n./configure --with-libmodsecurity\u003cspan class=\"o\"\u003e=\u003c/span\u003e/usr/local/modsecurity\nmake\nsudo make install\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"setting-up-crs-rules\"\u003eSetting up CRS rules\u003c/h2\u003e\n\u003cp\u003eNow, let\u0026rsquo;s download CRS rule set as well.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e ~\ngit clone -b v3.2/dev https://github.com/SpiderLabs/owasp-modsecurity-crs\nsudo mv owasp-modsecurity-crs/ /usr/local/\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eRename CRS configuration file -\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo mv /usr/local/owasp-modsecurity-crs/crs-setup.conf.example /usr/local/owasp-modsecurity-crs/crs-setup.conf\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"setting-up-modsecurity\"\u003eSetting up ModSecurity\u003c/h2\u003e\n\u003cp\u003eNow, we need to create a file in the Apache modules directory, so that Apache can know, how to activate ModSecurity.\u003c/p\u003e\n\u003cp\u003eCreate \u003ccode\u003e/etc/apache2/mods-enabled/security3.conf\u003c/code\u003e file and paste the following contents -\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eLoadModule security3_module /usr/lib/apache2/modules/mod_security3.so\nmodsecurity on\nmodsecurity_rules_file \u003cspan class=\"s1\"\u003e\u0026#39;/etc/apache2/modsec/main.conf\u0026#39;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAs you can see, the last line in the above code block reference a file \u003ccode\u003emain.conf\u003c/code\u003e in a folder \u003ccode\u003emodsec\u003c/code\u003e. This folder will not be present by default. We need to create that.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo mkdir -p /etc/apache2/modsec\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSetup ModSecurity configuration file -\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"c1\"\u003e# enables Unicode support in ModSecurity\u003c/span\u003e\nsudo wget -P /etc/apache2/modsec/ https://raw.githubusercontent.com/SpiderLabs/ModSecurity/v3/master/unicode.mapping\n\nsudo wget -P /etc/apache2/modsec/ https://raw.githubusercontent.com/SpiderLabs/ModSecurity/v3/master/modsecurity.conf-recommended\nsudo mv /etc/apache2/modsec/modsecurity.conf-recommended /etc/apache2/modsec/modsecurity.conf\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eChange the SecRuleEngine directive in the configuration to change from the default \u0026ldquo;detection only\u0026rdquo; mode to actively dropping malicious traffic.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo sed -i \u003cspan class=\"s1\"\u003e\u0026#39;s/SecRuleEngine DetectionOnly/SecRuleEngine On/\u0026#39;\u003c/span\u003e /etc/apache2/modsec/modsecurity.conf\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eChange the location of \u003ccode\u003emodsec_audit.log\u003c/code\u003e file to Apache log directory.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo sed -i \u003cspan class=\"s1\"\u003e\u0026#39;s/SecAuditLog \\/var\\/log\\/modsec_audit.log/SecAuditLog \\/var\\/log\\/apache2\\/modsec_audit.log/\u0026#39;\u003c/span\u003e /etc/apache2/modsec/modsecurity.conf\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eTo configure ModSecurity to use CRS rule set, put the following text in \u003ccode\u003e/etc/apache2/modsec/main.conf\u003c/code\u003e file.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eInclude \u003cspan class=\"s2\"\u003e\u0026#34;/etc/apache2/modsec/modsecurity.conf\u0026#34;\u003c/span\u003e\nInclude \u003cspan class=\"s2\"\u003e\u0026#34;/usr/local/owasp-modsecurity-crs/crs-setup.conf\u0026#34;\u003c/span\u003e\nInclude \u003cspan class=\"s2\"\u003e\u0026#34;/usr/local/owasp-modsecurity-crs/rules/*.conf\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAlso enable some Apache modules for better functioning of ModSecurity.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo a2enmod unique_id headers rewrite actions dav dav_fs\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow restart the Apache server\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo systemctl restart apache2\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"fixing-some-common-issues\"\u003eFixing some common issues\u003c/h2\u003e\n\u003cp\u003eSometimes, I had encountered errors when ModSecurity was not able to append logs to its log file. I figured out that ModSecurity did not have enough permissions to write that file. We can fix this issue quickly.\u003c/p\u003e\n\u003cp\u003eFirst, test if you really have this issue or not.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ecurl \u003cspan class=\"s1\"\u003e\u0026#39;http://localhost/?q=\u0026#34;\u0026gt;\u0026lt;script\u0026gt;alert(1)\u0026lt;/script\u0026gt;\u0026#39;\u003c/span\u003e\n\u0026lt;!DOCTYPE HTML PUBLIC \u003cspan class=\"s2\"\u003e\u0026#34;-//IETF//DTD HTML 2.0//EN\u0026#34;\u003c/span\u003e\u0026gt;\n\u0026lt;html\u0026gt;\u0026lt;head\u0026gt;\n\u0026lt;title\u0026gt;403 Forbidden\u0026lt;/title\u0026gt;\n\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\n\u0026lt;h1\u0026gt;Forbidden\u0026lt;/h1\u0026gt;\n\u0026lt;p\u0026gt;You dont have permission to access / on this server.\u0026lt;br /\u0026gt;\u0026lt;/p\u0026gt;\n\u0026lt;hr\u0026gt;\n\u0026lt;address\u0026gt;Apache/2.4.29 \u003cspan class=\"o\"\u003e(\u003c/span\u003eUbuntu\u003cspan class=\"o\"\u003e)\u003c/span\u003e Server at localhost Port 80\u0026lt;/address\u0026gt;\n\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow go to Apache log directory and check the contents of \u003ccode\u003emodsec_audit.log\u003c/code\u003e file.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e /var/log/apache2\ntail modsec_audit.log\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou should see the following content -\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e---0LzdyETA---A--\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e01/Jul/2019:14:42:41 +0000\u003cspan class=\"o\"\u003e]\u003c/span\u003e 156199216179.666171 127.0.0.1 \u003cspan class=\"m\"\u003e41824\u003c/span\u003e ip-xxx-xx-xx-xx.ap-south-1.compute.internal \u003cspan class=\"m\"\u003e80\u003c/span\u003e\n---0LzdyETA---B--\nGET /?q\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026gt;\u0026lt;script\u0026gt;alert(1)\u0026lt;/script\u0026gt; HTTP/1.1\n\u003c/span\u003e\u003cspan class=\"s2\"\u003eHost: localhost\n\u003c/span\u003e\u003cspan class=\"s2\"\u003eUser-Agent: curl/7.58.0\n\u003c/span\u003e\u003cspan class=\"s2\"\u003eAccept: */*\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e---TqjMwy7h---D--\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e---TqjMwy7h---F--\n\u003c/span\u003e\u003cspan class=\"s2\"\u003eHTTP/1.1 403\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e---TqjMwy7h---H--\n\u003c/span\u003e\u003cspan class=\"s2\"\u003eModSecurity: Warning. detected XSS using libinjection. [file \u0026#34;\u003c/span\u003e/usr/local/owasp-modsecurity-crs/rules/REQUEST-941-APPLICATION-ATTACK-XSS.conf\u003cspan class=\"s2\"\u003e\u0026#34;] [line \u0026#34;\u003c/span\u003e37\u003cspan class=\"s2\"\u003e\u0026#34;] [id \u0026#34;\u003c/span\u003e941100\u003cspan class=\"s2\"\u003e\u0026#34;] [rev \u0026#34;\u0026#34;] [msg \u0026#34;\u003c/span\u003eXSS Attack Detected via libinjection\u003cspan class=\"s2\"\u003e\u0026#34;] [data \u0026#34;\u003c/span\u003eMatched Data: XSS data found within ARGS:q: \u003cspan class=\"s2\"\u003e\u0026#34;\u0026gt;\u0026lt;script\u0026gt;alert(1)\u0026lt;/script\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003eseverity \u003cspan class=\"s2\"\u003e\u0026#34;2\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003ever \u003cspan class=\"s2\"\u003e\u0026#34;OWASP_CRS/3.1.0\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003ematurity \u003cspan class=\"s2\"\u003e\u0026#34;0\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003eaccuracy \u003cspan class=\"s2\"\u003e\u0026#34;0\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003etag \u003cspan class=\"s2\"\u003e\u0026#34;application-multi\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003etag \u003cspan class=\"s2\"\u003e\u0026#34;language-multi\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003etag \u003cspan class=\"s2\"\u003e\u0026#34;platform-multi\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003etag \u003cspan class=\"s2\"\u003e\u0026#34;attack-xss\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003etag \u003cspan class=\"s2\"\u003e\u0026#34;OWASP_CRS/WEB_ATTACK/XSS\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003etag \u003cspan class=\"s2\"\u003e\u0026#34;WASCTC/WASC-8\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003etag \u003cspan class=\"s2\"\u003e\u0026#34;WASCTC/WASC-22\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003etag \u003cspan class=\"s2\"\u003e\u0026#34;OWASP_TOP_10/A3\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003etag \u003cspan class=\"s2\"\u003e\u0026#34;OWASP_AppSensor/IE1\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003etag \u003cspan class=\"s2\"\u003e\u0026#34;CAPEC-242\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003ehostname \u003cspan class=\"s2\"\u003e\u0026#34;localhost\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003euri \u003cspan class=\"s2\"\u003e\u0026#34;/\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003eunique_id \u003cspan class=\"s2\"\u003e\u0026#34;156198848361.198287\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003eref \u003cspan class=\"s2\"\u003e\u0026#34;v8,27t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNulls\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n....\n....\n\n---TqjMwy7h---I--\n\n---TqjMwy7h---J--\n\n---TqjMwy7h---Z--\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf you do not see the following content, and the file is empty or it does not exist, then ModSecurity was not able to open this file for writing. Use the following fix -\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"c1\"\u003e# find out the user, Apache is running as\u003c/span\u003e\n\u003cspan class=\"nv\"\u003eapache_user\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003eps -ef \u003cspan class=\"p\"\u003e|\u003c/span\u003e egrep \u003cspan class=\"s1\"\u003e\u0026#39;(httpd|apache2|apache)\u0026#39;\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e grep -v \u003cspan class=\"sb\"\u003e`\u003c/span\u003ewhoami\u003cspan class=\"sb\"\u003e`\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e grep -v root \u003cspan class=\"p\"\u003e|\u003c/span\u003e head -n1 \u003cspan class=\"p\"\u003e|\u003c/span\u003e awk \u003cspan class=\"s1\"\u003e\u0026#39;{print $1}\u0026#39;\u003c/span\u003e\u003cspan class=\"k\"\u003e)\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow, change the owner of Apache log directory to \u003ccode\u003eapache_user\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo chown -R \u003cspan class=\"nv\"\u003e$apache_user\u003c/span\u003e:\u003cspan class=\"nv\"\u003e$apache_user\u003c/span\u003e /var/log/apache2/*\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow, ModSecurity should be able to append logs to the file \u003ccode\u003emodsec_audit.log\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"bonus-enabling-json-logs\"\u003e\u003cem\u003eBonus\u003c/em\u003e: Enabling JSON logs\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Honestly speaking, I was not able to make it work every time. I do not know what is the issue, but it works with some of the installations, and with some of the installations, it just doesn\u0026rsquo;t log anything to the \u003ccode\u003eaudit\u003c/code\u003e directory. If anyone has managed to make it work consistently, please let me know.\u003c/p\u003e\n\u003cp\u003eAnyway, if you are like me, who do not like the default ModSecurity log format, ModSecurity provides an option to generate logs in JSON format as well. To enable JSON support, the YAJL library should be installed. We already installed this package when we were installing dependencies, so our ModSecurity setup is compiled with JSON support. Let us now configure ModSecurity to generate JSON logs.\u003c/p\u003e\n\u003cp\u003eOpen the \u003ccode\u003e/etc/apache2/modsec/modsecurity.conf\u003c/code\u003e file and find the following lines -\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eSecAuditLogType           Serial\nSecAuditLog               /var/log/modsec_audit.log\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOnce you have found the following lines, replace these lines with the following lines\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eSecAuditLogFormat         JSON\nSecAuditLogType           Parallel\nSecAuditLog               /var/log/apache2/modsec_audit.log\nSecAuditLogStorageDir     /var/log/apache2/audit/\n\nSecAuditLogFileMode       \u003cspan class=\"m\"\u003e0644\u003c/span\u003e\nSecAuditLogDirMode        \u003cspan class=\"m\"\u003e0755\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eRestart Apache server\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo systemctl restart apache2\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow, go to \u003ccode\u003e/var/log/apache2/\u003c/code\u003e directory and create \u003ccode\u003eaudit\u003c/code\u003e folder.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e /var/log/apache2\nsudo mkdir audit\n\n\u003cspan class=\"c1\"\u003e# make `apache_user` owner of this directory as well...\u003c/span\u003e\nsudo chown -R \u003cspan class=\"nv\"\u003e$apache_user\u003c/span\u003e:\u003cspan class=\"nv\"\u003e$apache_user\u003c/span\u003e /var/log/apache2/audit\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow, ModSecurity should be able to generate JSON logs in this directory. ModSecurity generates logs in the following format -\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003eubuntu@server:/var/log/apache2$ tree audit\naudit\n└── 20190701\n    ├── 20190701-1132\n    │   ├── 20190701-113225-156196094515.868593\n    │   └── 20190701-113226-156196094691.154769\n    ├── 20190701-1211\n    │   ├── 20190701-121122-156196328239.048942\n    │   └── 20190701-121122-156196328243.018882\n\n    ....\n    ....\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow, your site should be relatively more secure than before.\u003c/p\u003e\n\u003ch2 id=\"a-warning-though\"\u003eA warning, though\u003c/h2\u003e\n\u003cp\u003eCRS is known to generate a lot of false-positive when enabled completely. We have not touched CRS paranoia levels. By default, it is set to paranoia level 1, which is known to produce false positives rarely, but still, as a measure of precaution, monitor your site\u0026rsquo;s traffic for some time, and then decide if you need to disable some of the CRS rules or not.\u003c/p\u003e\n","text":"Recently, I am experimenting with Web Application Firewalls a lot. ModSecurity is one of them. It is the most famous and useful open-source Web Application Firewall (WAF) in existence. It is supported by various web servers such as Apache, Nginx, and IIS.\nThe job of ModSecurity is to sit in front of the application web server and check the incoming requests and outgoing responses to filter out malicious content. It does so by the use of powerful and complex regular expressions. ModSecurity uses a rule language for its rules. The rule language has variables and operators defined to aid in the process of parsing HTTP requests.\nModSecurity, in itself, cannot block or allow requests. It is just a rule engine. It requires rules to operate appropriately. That\u0026rsquo;s where its sister project, Core Rule Set (CRS), comes into the picture. CRS is a rule set developed to be used with ModSecurity. It has been in active development for several years now and is very mature. Together, ModSecurity and CRS form a formidable defense against the widespread web application attacks.\nNow that you know, what a WAF is, let\u0026rsquo;s proceed to install ModSecurity on Ubuntu. I will be compiling ModSecurity\u0026rsquo;s latest version on Ubuntu 18.04. We will also configure ModSecurity to use Core Rule Set.\nInstalling Dependencies ModSecurity requires some dependencies to work correctly. Let\u0026rsquo;s install them -\nFirst, upgrade the Ubuntu system.\nbash sudo apt-get -y update sudo apt-get -y upgrade  Now install the dependencies.\nsudo apt-get -y install git libtool dh-autoreconf pkgconf gawk libcurl4-gnutls-dev libexpat1-dev libpcre3-dev libssl-dev libxml2-dev libyajl-dev zlibc zlib1g-dev libxml2 libpcre++-dev libxml2-dev libgeoip-dev liblmdb-dev lua5.2-dev iputils-ping locales apache2 apache2-dev ca-certificates wget Optional: clean up the Ubuntu caches.\nsudo apt-get clean \u0026amp;\u0026amp; sudo rm -rf /var/lib/apt/lists/* Install SSDeep as well (as done here)\ncd ~ git clone https://github.com/ssdeep-project/ssdeep cd ssdeep ./bootstrap ./configure make sudo make install Compiling ModSecurity Let\u0026rsquo;s clone ModSecurity from Github.\ncd ~ git clone -b v3/master --single-branch https://github.com/SpiderLabs/ModSecurity cd ModSecurity git submodule init git submodule update ./build.sh ./configure make # takes ~8 minutes on AWS t2.micro sudo make install Compiling ModSecurity-apache connector To configure it with Apache, we will require ModSecurity-apache connector. Let\u0026rsquo;s install that as well.\ncd ~ git clone https://github.com/SpiderLabs/ModSecurity-apache cd ModSecurity-apache ./autogen.sh ./configure --with-libmodsecurity=/usr/local/modsecurity make sudo make install Setting up CRS rules Now, let\u0026rsquo;s download CRS rule set as well.\ncd ~ git clone -b v3.2/dev https://github.com/SpiderLabs/owasp-modsecurity-crs sudo mv owasp-modsecurity-crs/ /usr/local/ Rename CRS configuration file -\nsudo mv /usr/local/owasp-modsecurity-crs/crs-setup.conf.example /usr/local/owasp-modsecurity-crs/crs-setup.conf Setting up ModSecurity Now, we need to create a file in the Apache modules directory, so that Apache can know, how to activate ModSecurity.\nCreate /etc/apache2/mods-enabled/security3.conf file and paste the following contents -\nLoadModule security3_module /usr/lib/apache2/modules/mod_security3.so modsecurity on modsecurity_rules_file \u0026#39;/etc/apache2/modsec/main.conf\u0026#39; As you can see, the last line in the above code block reference a file main.conf in a folder modsec. This folder will not be present by default. We need to create that.\nsudo mkdir -p /etc/apache2/modsec Setup ModSecurity configuration file -\n# enables Unicode support in ModSecurity sudo wget -P /etc/apache2/modsec/ https://raw.githubusercontent.com/SpiderLabs/ModSecurity/v3/master/unicode.mapping sudo wget -P /etc/apache2/modsec/ https://raw.githubusercontent.com/SpiderLabs/ModSecurity/v3/master/modsecurity.conf-recommended sudo mv /etc/apache2/modsec/modsecurity.conf-recommended /etc/apache2/modsec/modsecurity.conf Change the SecRuleEngine directive in the configuration to change from the default \u0026ldquo;detection only\u0026rdquo; mode to actively dropping malicious traffic.\nsudo sed -i \u0026#39;s/SecRuleEngine DetectionOnly/SecRuleEngine On/\u0026#39; /etc/apache2/modsec/modsecurity.conf Change the location of modsec_audit.log file to Apache log directory.\nsudo sed -i \u0026#39;s/SecAuditLog \\/var\\/log\\/modsec_audit.log/SecAuditLog \\/var\\/log\\/apache2\\/modsec_audit.log/\u0026#39; /etc/apache2/modsec/modsecurity.conf To configure ModSecurity to use CRS rule set, put the following text in /etc/apache2/modsec/main.conf file.\nInclude \u0026#34;/etc/apache2/modsec/modsecurity.conf\u0026#34; Include \u0026#34;/usr/local/owasp-modsecurity-crs/crs-setup.conf\u0026#34; Include \u0026#34;/usr/local/owasp-modsecurity-crs/rules/*.conf\u0026#34; Also enable some Apache modules for better functioning of ModSecurity.\nsudo a2enmod unique_id headers rewrite actions dav dav_fs Now restart the Apache server\nsudo systemctl restart apache2 Fixing some common issues Sometimes, I had encountered errors when ModSecurity was not able to append logs to its log file. I figured out that ModSecurity did not have enough permissions to write that file. We can fix this issue quickly.\nFirst, test if you really have this issue or not.\ncurl \u0026#39;http://localhost/?q=\u0026#34;\u0026gt;\u0026lt;script\u0026gt;alert(1)\u0026lt;/script\u0026gt;\u0026#39; \u0026lt;!DOCTYPE HTML PUBLIC \u0026#34;-//IETF//DTD HTML 2.0//EN\u0026#34;\u0026gt; \u0026lt;html\u0026gt;\u0026lt;head\u0026gt; \u0026lt;title\u0026gt;403 Forbidden\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt;\u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Forbidden\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;You dont have permission to access / on this server.\u0026lt;br /\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;address\u0026gt;Apache/2.4.29 (Ubuntu) Server at localhost Port 80\u0026lt;/address\u0026gt; \u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt; Now go to Apache log directory and check the contents of modsec_audit.log file.\ncd /var/log/apache2 tail modsec_audit.log You should see the following content -\n---0LzdyETA---A-- [01/Jul/2019:14:42:41 +0000] 156199216179.666171 127.0.0.1 41824 ip-xxx-xx-xx-xx.ap-south-1.compute.internal 80 ---0LzdyETA---B-- GET /?q=\u0026#34;\u0026gt;\u0026lt;script\u0026gt;alert(1)\u0026lt;/script\u0026gt; HTTP/1.1 Host: localhost User-Agent: curl/7.58.0 Accept: */* ---TqjMwy7h---D-- ---TqjMwy7h---F-- HTTP/1.1 403 ---TqjMwy7h---H-- ModSecurity: Warning. detected XSS using libinjection. [file \u0026#34;/usr/local/owasp-modsecurity-crs/rules/REQUEST-941-APPLICATION-ATTACK-XSS.conf\u0026#34;] [line \u0026#34;37\u0026#34;] [id \u0026#34;941100\u0026#34;] [rev \u0026#34;\u0026#34;] [msg \u0026#34;XSS Attack Detected via libinjection\u0026#34;] [data \u0026#34;Matched Data: XSS data found within ARGS:q: \u0026#34;\u0026gt;\u0026lt;script\u0026gt;alert(1)\u0026lt;/script\u0026gt;\u0026#34;] [severity \u0026#34;2\u0026#34;] [ver \u0026#34;OWASP_CRS/3.1.0\u0026#34;] [maturity \u0026#34;0\u0026#34;] [accuracy \u0026#34;0\u0026#34;] [tag \u0026#34;application-multi\u0026#34;] [tag \u0026#34;language-multi\u0026#34;] [tag \u0026#34;platform-multi\u0026#34;] [tag \u0026#34;attack-xss\u0026#34;] [tag \u0026#34;OWASP_CRS/WEB_ATTACK/XSS\u0026#34;] [tag \u0026#34;WASCTC/WASC-8\u0026#34;] [tag \u0026#34;WASCTC/WASC-22\u0026#34;] [tag \u0026#34;OWASP_TOP_10/A3\u0026#34;] [tag \u0026#34;OWASP_AppSensor/IE1\u0026#34;] [tag \u0026#34;CAPEC-242\u0026#34;] [hostname \u0026#34;localhost\u0026#34;] [uri \u0026#34;/\u0026#34;] [unique_id \u0026#34;156198848361.198287\u0026#34;] [ref \u0026#34;v8,27t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNulls\u0026#34;] .... .... ---TqjMwy7h---I-- ---TqjMwy7h---J-- ---TqjMwy7h---Z-- If you do not see the following content, and the file is empty or it does not exist, then ModSecurity was not able to open this file for writing. Use the following fix -\n# find out the user, Apache is running as apache_user=\u0026#34;$(ps -ef | egrep \u0026#39;(httpd|apache2|apache)\u0026#39; | grep -v `whoami` | grep -v root | head -n1 | awk \u0026#39;{print $1}\u0026#39;)\u0026#34; Now, change the owner of Apache log directory to apache_user.\nsudo chown -R $apache_user:$apache_user /var/log/apache2/* Now, ModSecurity should be able to append logs to the file modsec_audit.log.\nBonus: Enabling JSON logs Note: Honestly speaking, I was not able to make it work every time. I do not know what is the issue, but it works with some of the installations, and with some of the installations, it just doesn\u0026rsquo;t log anything to the audit directory. If anyone has managed to make it work consistently, please let me know.\nAnyway, if you are like me, who do not like the default ModSecurity log format, ModSecurity provides an option to generate logs in JSON format as well. To enable JSON support, the YAJL library should be installed. We already installed this package when we were installing dependencies, so our ModSecurity setup is compiled with JSON support. Let us now configure ModSecurity to generate JSON logs.\nOpen the /etc/apache2/modsec/modsecurity.conf file and find the following lines -\nSecAuditLogType Serial SecAuditLog /var/log/modsec_audit.log Once you have found the following lines, replace these lines with the following lines\nSecAuditLogFormat JSON SecAuditLogType Parallel SecAuditLog /var/log/apache2/modsec_audit.log SecAuditLogStorageDir /var/log/apache2/audit/ SecAuditLogFileMode 0644 SecAuditLogDirMode 0755 Restart Apache server\nsudo systemctl restart apache2 Now, go to /var/log/apache2/ directory and create audit folder.\ncd /var/log/apache2 sudo mkdir audit # make `apache_user` owner of this directory as well... sudo chown -R $apache_user:$apache_user /var/log/apache2/audit Now, ModSecurity should be able to generate JSON logs in this directory. ModSecurity generates logs in the following format -\nubuntu@server:/var/log/apache2$ tree audit audit └── 20190701 ├── 20190701-1132 │ ├── 20190701-113225-156196094515.868593 │ └── 20190701-113226-156196094691.154769 ├── 20190701-1211 │ ├── 20190701-121122-156196328239.048942 │ └── 20190701-121122-156196328243.018882 .... .... Now, your site should be relatively more secure than before.\nA warning, though CRS is known to generate a lot of false-positive when enabled completely. We have not touched CRS paranoia levels. By default, it is set to paranoia level 1, which is known to produce false positives rarely, but still, as a measure of precaution, monitor your site\u0026rsquo;s traffic for some time, and then decide if you need to disable some of the CRS rules or not.\n"},"name":"Setting Up ModSecurity on Ubuntu","published":"2019-07-01T18:20:18+05:30","summary":"Recently, I am experimenting with Web Application Firewalls a lot. ModSecurity is one of them. It is the most famous and useful open-source Web Application Firewall (WAF) in existence. It is supported by various web servers such as Apache, Nginx, and IIS.\nThe job of ModSecurity is to sit in front of the application web server and check the incoming requests and outgoing responses to filter out malicious content. It does so by the use of powerful and complex regular expressions.","type":"entry","url":"https://yashagarwal.in/posts/2019/07/setting-up-modsecurity-on-ubuntu/"}],"name":"Linux","type":"feed","url":"https://yashagarwal.in/tags/linux/"}