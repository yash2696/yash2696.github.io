{"author":{"name":"Yash Agarwal","type":"card","url":"https://yashagarwal.in/"},"children":[{"content":{"html":"\u003cp\u003e\u003cem\u003eThis article was originally published on \u003ca href=\"https://www.zeolearn.com/magazine/proxy-your-requests-to-the-backend-server-with-grunt\"\u003ezeolearn\u003c/a\u003e.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eIf you are working on large projects, it is undoubtedly a good idea to have a build script or some task scripts to help to automate some of the repetitive parts of the development process.\nFor JavaScript projects, \u003ccode\u003eGrunt\u003c/code\u003e serves a similar purpose. It is a JavaScript task/build runner that is written on top of NodeJS. Grunt can help you with automatically minifying your JavaScript or CSS files, or reload your browser on every file change. It can show you a comprehensive list of JavaScript errors, compile your \u003ccode\u003eSASS/LESS\u003c/code\u003e files into CSS files automatically, and many other things.\u003c/p\u003e\n\u003cp\u003eHowever, the most significant advantage of Grunt that I am going to discuss today is its ability to proxy your requests. For example, when you are developing your backend with anything other than JavaScript, you will face difficulty in accessing the backend data in your frontend without having to compile and deploy the code every time you make any changes. It is not possible with a typical web server setup because \u003ca href=\"https://en.wikipedia.org/wiki/XMLHttpRequest\"\u003eXHR\u003c/a\u003e requests are not allowed to be cross-domain by browsers due to \u003ca href=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\"\u003eCross-origin resource sharing\u003c/a\u003e (CORS) limitations.\u003c/p\u003e\n\u003cp\u003eSo, the problem here is as follows,\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eyou are developing the UI of your applications using some frontend JavaScript framework (say Angular) with Grunt as the build runner, and the backend of your application is being designed in some backend framework other than JavaScript/NodeJS (say Laravel), you might face problems accessing the backend while running Grunt server.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eIt happens because the backend Laravel service runs on port 8000, and the front end development server runs on port 8080. The requests from the frontend server to the backend-server will result in \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\"\u003esame-origin policy\u003c/a\u003e errors due to the port difference. To fix this issue, we can set up CORS through a proxy on Grunt. This proxy will stand in front of your frontend server and the backend server and get the required data from the backend and pass it to your frontend while letting your browser think that you are all in the same domain.\u003c/p\u003e\n\u003cp\u003eGrunt has a module \u003ca href=\"https://github.com/drewzboto/grunt-connect-proxy\"\u003egrunt-connect-proxy\u003c/a\u003e that exists to help to solve this issue. It delegates requests that match a given URL to the backend of your choice. So for example, you want to access your backend using the URL \u003ca href=\"http://localhost:8080/api\"\u003ehttp://localhost:8080/api\u003c/a\u003e, you can write a proxy rule so that whenever your user tries to access this URL in a browser, the proxy will get the data from your backend and server it at this particular URL.\u003c/p\u003e\n\u003cp\u003eThe procedure to set up the proxy is simple. First, you will have to add the proxy configuration to your \u003ccode\u003eGruntfile.js\u003c/code\u003e. In this example, I am assuming that the backend server is running on the port 8000, and the Grunt server is running on the port 8080. This configuration will delegate all requests to \u003ca href=\"http://localhost:8080/api\"\u003ehttp://localhost:8080/api\u003c/a\u003e to \u003ca href=\"http://localhost:8000/backend\"\u003ehttp://localhost:8000/backend\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"nx\"\u003econnect\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eserver\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eoptions\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003eport\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e8080\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003ebase\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;public\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003ehostname\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;localhost\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003elivereload\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003emiddleware\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003econnect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eoptions\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003emiddlewares\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003emiddlewares\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eunshift\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003erequire\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;grunt-connect-proxy/lib/utils\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003eproxyRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003emiddlewares\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eproxies\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;/api\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003ehost\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;localhost\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003eport\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e8000\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003ehttps\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003erewrite\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"s1\"\u003e\u0026#39;^/api\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;/backend\u0026#39;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow register your Grunt server task to run the proxy on Grunt execution.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"nx\"\u003egrunt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eregisterTask\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;server\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"nx\"\u003egrunt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etask\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\n       \u003cspan class=\"s1\"\u003e\u0026#39;configureProxies:server\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n       \u003cspan class=\"s1\"\u003e\u0026#39;connect:server\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eLet me explain the above two scripts line by line. In the connect section of your \u003ccode\u003eGruntfile\u003c/code\u003e, we add a new section called \u003ccode\u003eproxies\u003c/code\u003e. The options defined in the proxies section are explained below.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003econtext\u003c/strong\u003e: This is the context against which the incoming requests will be matched. Matching requests will be proxied to the backend server.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ehost\u003c/strong\u003e: The host address where the backend server is running. The incoming requests will be proxied to this host.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eport\u003c/strong\u003e: The port where the backend server is running.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ehttps\u003c/strong\u003e: If your backend server is an https endpoint, then set this value to \u003ccode\u003etrue\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003erewrite\u003c/strong\u003e: This option allows rewriting of URL when proxying. What this means is that when trying to proxy \u003ca href=\"http://localhost:8080/api\"\u003ehttp://localhost:8080/api\u003c/a\u003e to the backend server, the URL will be rewritten as \u003ca href=\"http://localhost:8000/backend\"\u003ehttp://localhost:8000/backend\u003c/a\u003e. The object\u0026rsquo;s key serves as the regex used in the replacement operation, and the object\u0026rsquo;s value is the context of your backend server\u0026rsquo;s service.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eMore options can be found in the \u003ca href=\"https://github.com/drewzboto/grunt-connect-proxy#grunt-connect-proxy\"\u003edocumentation\u003c/a\u003e of \u003ccode\u003egrunt-connect-proxy\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eYou will also need to set up the proxy\u0026rsquo;s middleware in the \u003ccode\u003eoptions\u003c/code\u003e section of the \u003ccode\u003econnect\u003c/code\u003e. The relevant code is as follows.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003cspan class=\"nx\"\u003emiddleware\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003econnect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eoptions\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003emiddlewares\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003emiddlewares\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eunshift\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003erequire\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;grunt-connect-proxy/lib/utils\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003eproxyRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003emiddlewares\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eFinally, include your proxy task in the server task. It is necessary to append the proxy task before the connect task. Also, make sure to specify the connection target in the \u003ccode\u003econfigureProxies\u003c/code\u003e section. In our case, the connect target is \u003ccode\u003eserver\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eNow you can start your Grunt server via this configured proxy by typing \u003ccode\u003eGrunt server\u003c/code\u003e in the command line. You should see something like this in the console.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ grunt server\n...\nRunning \u003cspan class=\"s2\"\u003e\u0026#34;configureProxies:server\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003econfigureProxies\u003cspan class=\"o\"\u003e)\u003c/span\u003e task\nRewrite rule created \u003cspan class=\"k\"\u003efor\u003c/span\u003e: \u003cspan class=\"o\"\u003e[\u003c/span\u003e/^\u003cspan class=\"se\"\u003e\\/\u003c/span\u003eapi/ -\u0026gt; /backend\u003cspan class=\"o\"\u003e]\u003c/span\u003e.\nProxy created \u003cspan class=\"k\"\u003efor\u003c/span\u003e: /api to localhost:8000\n\nRunning \u003cspan class=\"s2\"\u003e\u0026#34;connect:server\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003econnect\u003cspan class=\"o\"\u003e)\u003c/span\u003e task\nStarted connect web server on http://localhost:8080\n...\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe above output confirms that the proxy is working fine.\nSome of the example URLs are:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eGrunt Server\u003c/th\u003e\n\u003cth\u003eBackend Server\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003ehttp://127.0.0.1:8080/api\u003c/td\u003e\n\u003ctd\u003ehttp://127.0.0.1:8000/backend\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ehttp://127.0.0.1:8080/api/x/y\u003c/td\u003e\n\u003ctd\u003ehttp://127.0.0.1:8000/backend/x/y\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThat\u0026rsquo;s all. Now you will not face any problems getting data from any backend of your choice.\u003c/p\u003e\n","text":"This article was originally published on zeolearn.\nIf you are working on large projects, it is undoubtedly a good idea to have a build script or some task scripts to help to automate some of the repetitive parts of the development process. For JavaScript projects, Grunt serves a similar purpose. It is a JavaScript task/build runner that is written on top of NodeJS. Grunt can help you with automatically minifying your JavaScript or CSS files, or reload your browser on every file change. It can show you a comprehensive list of JavaScript errors, compile your SASS/LESS files into CSS files automatically, and many other things.\nHowever, the most significant advantage of Grunt that I am going to discuss today is its ability to proxy your requests. For example, when you are developing your backend with anything other than JavaScript, you will face difficulty in accessing the backend data in your frontend without having to compile and deploy the code every time you make any changes. It is not possible with a typical web server setup because XHR requests are not allowed to be cross-domain by browsers due to Cross-origin resource sharing (CORS) limitations.\nSo, the problem here is as follows,\n you are developing the UI of your applications using some frontend JavaScript framework (say Angular) with Grunt as the build runner, and the backend of your application is being designed in some backend framework other than JavaScript/NodeJS (say Laravel), you might face problems accessing the backend while running Grunt server.\n It happens because the backend Laravel service runs on port 8000, and the front end development server runs on port 8080. The requests from the frontend server to the backend-server will result in same-origin policy errors due to the port difference. To fix this issue, we can set up CORS through a proxy on Grunt. This proxy will stand in front of your frontend server and the backend server and get the required data from the backend and pass it to your frontend while letting your browser think that you are all in the same domain.\nGrunt has a module grunt-connect-proxy that exists to help to solve this issue. It delegates requests that match a given URL to the backend of your choice. So for example, you want to access your backend using the URL http://localhost:8080/api, you can write a proxy rule so that whenever your user tries to access this URL in a browser, the proxy will get the data from your backend and server it at this particular URL.\nThe procedure to set up the proxy is simple. First, you will have to add the proxy configuration to your Gruntfile.js. In this example, I am assuming that the backend server is running on the port 8000, and the Grunt server is running on the port 8080. This configuration will delegate all requests to http://localhost:8080/api to http://localhost:8000/backend.\nconnect: { server: { options: { port: 8080, base: \u0026#39;public\u0026#39;, hostname: \u0026#39;localhost\u0026#39;, livereload: true, middleware: function (connect, options, middlewares) { middlewares.unshift(require(\u0026#39;grunt-connect-proxy/lib/utils\u0026#39;).proxyRequest); return middlewares; } }, proxies: [ { context: \u0026#39;/api\u0026#39;, host: \u0026#39;localhost\u0026#39;, port: 8000, https: false, rewrite: { \u0026#39;^/api\u0026#39;: \u0026#39;/backend\u0026#39; } } ] } }  Now register your Grunt server task to run the proxy on Grunt execution.\ngrunt.registerTask(\u0026#39;server\u0026#39;, function (target) { grunt.task.run([ \u0026#39;configureProxies:server\u0026#39;, \u0026#39;connect:server\u0026#39;, ]); });  Let me explain the above two scripts line by line. In the connect section of your Gruntfile, we add a new section called proxies. The options defined in the proxies section are explained below.\n context: This is the context against which the incoming requests will be matched. Matching requests will be proxied to the backend server. host: The host address where the backend server is running. The incoming requests will be proxied to this host. port: The port where the backend server is running. https: If your backend server is an https endpoint, then set this value to true. rewrite: This option allows rewriting of URL when proxying. What this means is that when trying to proxy http://localhost:8080/api to the backend server, the URL will be rewritten as http://localhost:8000/backend. The object\u0026rsquo;s key serves as the regex used in the replacement operation, and the object\u0026rsquo;s value is the context of your backend server\u0026rsquo;s service.  More options can be found in the documentation of grunt-connect-proxy.\nYou will also need to set up the proxy\u0026rsquo;s middleware in the options section of the connect. The relevant code is as follows.\n... middleware: function (connect, options, middlewares) { middlewares.unshift(require(\u0026#39;grunt-connect-proxy/lib/utils\u0026#39;).proxyRequest); return middlewares; } ...  Finally, include your proxy task in the server task. It is necessary to append the proxy task before the connect task. Also, make sure to specify the connection target in the configureProxies section. In our case, the connect target is server.\nNow you can start your Grunt server via this configured proxy by typing Grunt server in the command line. You should see something like this in the console.\n$ grunt server ... Running \u0026#34;configureProxies:server\u0026#34; (configureProxies) task Rewrite rule created for: [/^\\/api/ -\u0026gt; /backend]. Proxy created for: /api to localhost:8000 Running \u0026#34;connect:server\u0026#34; (connect) task Started connect web server on http://localhost:8080 ... The above output confirms that the proxy is working fine. Some of the example URLs are:\n   Grunt Server Backend Server     http://127.0.0.1:8080/api http://127.0.0.1:8000/backend   http://127.0.0.1:8080/api/x/y http://127.0.0.1:8000/backend/x/y    That\u0026rsquo;s all. Now you will not face any problems getting data from any backend of your choice.\n"},"name":"Proxy Your Requests to the Backend Server With Grunt","published":"2018-05-15T17:14:13+05:30","summary":"This article was originally published on zeolearn.\nIf you are working on large projects, it is undoubtedly a good idea to have a build script or some task scripts to help to automate some of the repetitive parts of the development process. For JavaScript projects, Grunt serves a similar purpose. It is a JavaScript task/build runner that is written on top of NodeJS. Grunt can help you with automatically minifying your JavaScript or CSS files, or reload your browser on every file change.","type":"entry","url":"https://yashagarwal.in/posts/2018/05/proxy-your-requests-to-the-backend-server-with-grunt/"},{"content":{"html":"\u003cp\u003eThis post is going to be one of those that I have written for my reference. Whatever I am going to mention in this post is not new. Everything has already been said and written many times on many websites and Linux forums.\u003c/p\u003e\n\u003cp\u003eSo I will start by explaining the problem. When you try to dual boot your machine to run both GNU/Linux and Windows operating systems, you might have noticed that the time is not the same in both the operating systems. It is generally one operating system showing the correct time, and the other one showing the wrong time. It happens because Microsoft Windows thinks that the hardware clock (CMOS clock or BIOS clock) of the machine is using the local time (depends on your current time zone), and hence it doesn\u0026rsquo;t do anything and shows you the same time. But most GNU/Linux operating systems (Ubuntu, Arch Linux, etc.) think that the hardware clock is set to track UTC. Hence the mismatch in the time happens. For example, assume that the current real-time is 10:22:51, and the hardware clock time is set to 10:22:51. Windows will interpret this time as local time and show 10:22:51, but Linux based systems will show 15:52:51 because they will understand this time as UTC. Of course, the above example is true if we assume time zone as India, which is +05:30 from UTC.\u003c/p\u003e\n\u003cp\u003eThis issue can be fixed either from Windows or from GNU/Linux OS. I prefer to adjust the behavior of Windows to use UTC. It is much more convenient to use when traveling between different time zones. Please note that this method might not work or cause instability with older versions of Windows OS. I have tried this fix on Windows 10, and it works without any issues.\u003c/p\u003e\n\u003cp\u003eOpen an Administrator Command Prompt by pressing \u003ccode\u003e⊞ + x\u003c/code\u003e, then type \u003ccode\u003ea\u003c/code\u003e. This method of opening the Administrator Command Prompt does not work on Windows 7.\u003c/p\u003e\n\u003cp\u003eNow execute the following command:\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-batch\" data-lang=\"batch\"\u003ereg add \u003cspan class=\"s2\"\u003e\u0026#34;HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\TimeZoneInformation\u0026#34;\u003c/span\u003e /v RealTimeIsUniversal /d 1 /t REG_DWORD /f\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eWindows Time Service, which keeps the clock in Windows OS accurate, will still write the local time to the Real-time clock (RTC) regardless of the registry settings on shutdown. So I prefer to disable the Windows Time Service.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-batch\" data-lang=\"batch\"\u003esc config w32time start= disabled\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eNow you may need to change the time in your BIOS to UTC time, although that depends on whether your Windows OS was showing the correct time before applying the above modifications. If yes, then changing BIOS time to UTC will make sure that both Windows and GNU/Linux convert hardware clock to local time.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"references\"\u003eReferences\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003ca href=\"https://help.ubuntu.com/community/UbuntuTime#Multiple_Boot_Systems_Time_Conflicts\"\u003eMultiple Boot Systems Time Conflicts\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://wiki.archlinux.org/index.php/Time#UTC_in_Windows\"\u003eUTC in Windows\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n","text":"This post is going to be one of those that I have written for my reference. Whatever I am going to mention in this post is not new. Everything has already been said and written many times on many websites and Linux forums.\nSo I will start by explaining the problem. When you try to dual boot your machine to run both GNU/Linux and Windows operating systems, you might have noticed that the time is not the same in both the operating systems. It is generally one operating system showing the correct time, and the other one showing the wrong time. It happens because Microsoft Windows thinks that the hardware clock (CMOS clock or BIOS clock) of the machine is using the local time (depends on your current time zone), and hence it doesn\u0026rsquo;t do anything and shows you the same time. But most GNU/Linux operating systems (Ubuntu, Arch Linux, etc.) think that the hardware clock is set to track UTC. Hence the mismatch in the time happens. For example, assume that the current real-time is 10:22:51, and the hardware clock time is set to 10:22:51. Windows will interpret this time as local time and show 10:22:51, but Linux based systems will show 15:52:51 because they will understand this time as UTC. Of course, the above example is true if we assume time zone as India, which is +05:30 from UTC.\nThis issue can be fixed either from Windows or from GNU/Linux OS. I prefer to adjust the behavior of Windows to use UTC. It is much more convenient to use when traveling between different time zones. Please note that this method might not work or cause instability with older versions of Windows OS. I have tried this fix on Windows 10, and it works without any issues.\nOpen an Administrator Command Prompt by pressing ⊞ + x, then type a. This method of opening the Administrator Command Prompt does not work on Windows 7.\nNow execute the following command: reg add \u0026#34;HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\TimeZoneInformation\u0026#34; /v RealTimeIsUniversal /d 1 /t REG_DWORD /f\nWindows Time Service, which keeps the clock in Windows OS accurate, will still write the local time to the Real-time clock (RTC) regardless of the registry settings on shutdown. So I prefer to disable the Windows Time Service. sc config w32time start= disabled\nNow you may need to change the time in your BIOS to UTC time, although that depends on whether your Windows OS was showing the correct time before applying the above modifications. If yes, then changing BIOS time to UTC will make sure that both Windows and GNU/Linux convert hardware clock to local time.\n References  Multiple Boot Systems Time Conflicts UTC in Windows  "},"name":"Syncing Time on Windows \u0026 GNU/Linux Dual Boot Setups","published":"2018-02-01T12:54:34+05:30","summary":"This post is going to be one of those that I have written for my reference. Whatever I am going to mention in this post is not new. Everything has already been said and written many times on many websites and Linux forums.\nSo I will start by explaining the problem. When you try to dual boot your machine to run both GNU/Linux and Windows operating systems, you might have noticed that the time is not the same in both the operating systems.","type":"entry","url":"https://yashagarwal.in/posts/2018/02/syncing-time-on-windows-gnu/linux-dual-boot-setups/"},{"content":{"html":"\u003cp\u003eIn this post, I will continue from my last \u003ca href=\"https://yashhere.github.io/posts/2018/01/arch-linux-installation-guide-part-1/\"\u003epost\u003c/a\u003e and set up my newly installed Arch Linux for daily use. I am going to install some applications that I use on a day to day basis. Some of these applications are required for my current dotfile \u003ca href=\"https://yashhere.github.io/posts/2018/01/my-own-configuration-manager/\"\u003econfiguration\u003c/a\u003e setup to work properly. The choice of applications is highly opinionated and your preferences might be different.\u003c/p\u003e\n\u003cdiv class=\"note\"\u003e\n    \u003cdiv\u003e\u003c/div\u003e\n    \nIf you had gone for installation via SSH option, then I would suggest you to edit your `sshd_config` file and disable `root` login. It can be a security risk otherwise.\n\n\u003c/div\u003e\n\u003ch3 id=\"install-a-terminal-based-browser\"\u003eInstall a terminal based browser\u003c/h3\u003e\n\u003cp\u003eTerminal-based browsers are very handy in cases when you are required to login into a captive portal and you don\u0026rsquo;t have access to a graphical browser. We will install two different browsers, \u003ccode\u003eelinks\u003c/code\u003e and \u003ccode\u003ew3m\u003c/code\u003e.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo pacman -S elinks w3m\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003ch3 id=\"install-x-server\"\u003eInstall X server.\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo pacman -S xorg\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThis will install minimal X desktop environment with fonts, in case, you want to test your system before installing any desktop environment.\u003c/p\u003e\n\u003ch3 id=\"enable-multilib-repository-for-32-bit-package-support\"\u003eEnable multilib repository for 32-bit package support\u003c/h3\u003e\n\u003cp\u003eTo enable multilib repository, uncomment the \u003ccode\u003e[multilib]\u003c/code\u003e section in \u003ccode\u003e/etc/pacman.conf\u003c/code\u003e.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003emultilib\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003cspan class=\"nv\"\u003eInclude\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e /etc/pacman.d/mirrorlist\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eNow upgrade your system.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo pacman -Syyu\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003ch3 id=\"install-video-and-touchpad-drivers\"\u003eInstall video and touchpad drivers\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo pacman -S xf86-video-intel xf86-input-synaptics\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3 id=\"install-pacaur-to-fetch-and-install-packages-from-aur\"\u003eInstall pacaur to fetch and install packages from AUR\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo pacman -S expac yajl --noconfirm\n\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e /tmp\ngpg --recv-keys --keyserver hkp://pgp.mit.edu:80 1EB2638FF56C0C53\ncurl -o PKGBUILD https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h\u003cspan class=\"o\"\u003e=\u003c/span\u003ecower\nmakepkg -i PKGBUILD --noconfirm\ncurl -o PKGBUILD https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h\u003cspan class=\"o\"\u003e=\u003c/span\u003epacaur\nmakepkg -i PKGBUILD --noconfirm\ncd\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3 id=\"install-graphical-browsers\"\u003eInstall graphical browsers\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003epacaur -S firefox chromium\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3 id=\"install-code-editors\"\u003eInstall code editors\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003epacaur -S sublime-text-dev atom-editor-git visual-studio-code-bin neovim neovim-drop-in leafpad\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3 id=\"setup-lamp-stack\"\u003eSetup LAMP stack\u003c/h3\u003e\n\u003ch4 id=\"install-apache-server\"\u003eInstall Apache server\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo pacman -S apache\n\n\u003cspan class=\"c1\"\u003e# Make your user-directory available to apache server\u003c/span\u003e\nmkdir ~/public_html\nchmod o+x ~\nchmod o+x ~/public_html\nchmod -R o+r ~/public_html\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"c1\"\u003e# To enable virtualhosts, uncomment the following line in `/etc/httpd/conf/httpd.conf`\u003c/span\u003e\nInclude conf/extra/httpd-vhosts.conf\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAdd your virtualhost configuration in following file -\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo vim /etc/httpd/conf/extra/httpd-vhosts.conf\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eTo test the virtual hosts on you local machine, add the virtual names to your \u003ccode\u003e/etc/hosts\u003c/code\u003e file.\u003c/p\u003e\n\u003ch4 id=\"install-php\"\u003eInstall PHP:\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo pacman -S php php-apache\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eTo use PHP with apache, open \u003ccode\u003e/etc/httpd/conf/httpd.conf\u003c/code\u003e and uncomment following line -\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eLoadModule mpm_prefork_module modules/mod_mpm_prefork.so\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eand comment out the following line -\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"c1\"\u003e# LoadModule mpm_event_module modules/mod_mpm_event.so\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eNow add these lines to \u003ccode\u003e/etc/httpd/conf/httpd.conf\u003c/code\u003e:\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"c1\"\u003e# Add these at the end of `LoadModule` section.\u003c/span\u003e\nLoadModule php7_module modules/libphp7.so\nAddHandler php7-script .php\n\n\u003cspan class=\"c1\"\u003e# Place this at the end of the `Include` section:\u003c/span\u003e\nInclude conf/extra/php7_module.conf\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003ch4 id=\"install-mysql-server\"\u003eInstall MySQL server\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo pacman -S mariadb\n\n\u003cspan class=\"c1\"\u003e# Initialize the MariaDB data directory prior to starting the service. To do so, run:\u003c/span\u003e\nsudo mysql_install_db --user\u003cspan class=\"o\"\u003e=\u003c/span\u003emysql --basedir\u003cspan class=\"o\"\u003e=\u003c/span\u003e/usr --datadir\u003cspan class=\"o\"\u003e=\u003c/span\u003e/var/lib/mysql\n\n\u003cspan class=\"c1\"\u003e# Then issue the commands to start the database server\u003c/span\u003e\nsudo systemctl \u003cspan class=\"nb\"\u003eenable\u003c/span\u003e mariadb.service\nsudo systemctl start mariadb.service\n\n\u003cspan class=\"c1\"\u003e# To apply recommended security settings to your database, run\u003c/span\u003e\nsudo mysql_secure_installation\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch4 id=\"install-phpmyadmin\"\u003eInstall PHPMyAdmin\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo pacman -S phpmyadmin php-mcrypt\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eEnable \u003ccode\u003emysqli\u003c/code\u003e, \u003ccode\u003emcrypt\u003c/code\u003e, \u003ccode\u003ezip\u003c/code\u003e and \u003ccode\u003ebz2\u003c/code\u003e extensions in \u003ccode\u003e/etc/php/php.ini\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eCreate the apache configuration file \u003ccode\u003e/etc/httpd/conf/extra/phpmyadmin.conf\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ApacheConf\" data-lang=\"ApacheConf\"\u003e\u003cspan class=\"nb\"\u003eAlias\u003c/span\u003e \u003cspan class=\"sx\"\u003e/phpmyadmin\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;/usr/share/webapps/phpMyAdmin\u0026#34;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;Directory\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;/usr/share/webapps/phpMyAdmin\u0026#34;\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eDirectoryIndex\u003c/span\u003e index.php\n    \u003cspan class=\"nb\"\u003eAllowOverride\u003c/span\u003e \u003cspan class=\"k\"\u003eAll\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eOptions\u003c/span\u003e FollowSymlinks\n    \u003cspan class=\"nb\"\u003eRequire\u003c/span\u003e \u003cspan class=\"k\"\u003eall\u003c/span\u003e granted\n\u003cspan class=\"nt\"\u003e\u0026lt;/Directory\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThen include following in \u003ccode\u003e/etc/httpd/conf/httpd.conf\u003c/code\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ApacheConf\" data-lang=\"ApacheConf\"\u003e\u003cspan class=\"c\"\u003e# phpMyAdmin configuration\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eInclude\u003c/span\u003e conf/extra/phpmyadmin.conf\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eNow restart \u003ccode\u003ehttpd\u003c/code\u003e service to apply settings.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo systemctl restart httpd\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\nOnce all these steps are done, your LAMP stack should be working.\u003c/p\u003e\n\u003ch3 id=\"setup-power-management\"\u003eSetup power management\u003c/h3\u003e\n\u003cp\u003eInstall \u003ccode\u003etlp\u003c/code\u003e and some of its optional dependencies\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo pacman -S tlp tlp-rdw bash-completion ethtool lsb-release smartmontools\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eThen enable \u003ccode\u003etlp\u003c/code\u003e services\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo systemctl \u003cspan class=\"nb\"\u003eenable\u003c/span\u003e tlp.service\nsudo systemctl \u003cspan class=\"nb\"\u003eenable\u003c/span\u003e tlp-sleep.service\n\n\u003cspan class=\"c1\"\u003e# mask some services for tlp to work properly\u003c/span\u003e\nsudo systemctl mask systemd-rfkill.service\nsudo systemctl mask systemd-rfkill.socket\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003ch3 id=\"install-i3-and-other-tools\"\u003eInstall i3 and other tools\u003c/h3\u003e\n\u003cp\u003eAll these tools are part of my \u003ccode\u003ei3\u003c/code\u003e config with exception of the theme related packages. So installing them here will help me later while setting up the \u003ccode\u003ei3\u003c/code\u003e window manager.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003epacaur -S i3 rofi polybar xautolock powerline-fonts-git i3lock-fancy-git compton scrot feh dunst unclutter xfce4-power-manager numlockx lxappearance adapta-gtk-theme gtk-engine-murrine gnome-themes-standard termite\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003ch3 id=\"fix-ugly-fonts-1\"\u003eFix Ugly Fonts \u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e1\u003c/a\u003e\u003c/sup\u003e\u003c/h3\u003e\n\u003cp\u003eFonts rendering is one area where Linux still lags behind Windows and OSX. It can be a nightmare for users to setup fonts properly in Linux. In Arch Linux, this is even worse. I found some tricks to improve the quality of font rendering on Arch Linux. Though this is far from perfect, it is manageable. Follow these \u003ca href=\"https://www.reddit.com/r/archlinux/comments/5r5ep8/make_your_arch_fonts_beautiful_easily/\"\u003esteps\u003c/a\u003e on Reddit to fix font rendering. I use Noto Sans, Adobe Source Code Pro, and Microsoft fonts. My apologies, but I can\u0026rsquo;t help here. Some websites still use Microsoft fonts.\u003c/p\u003e\n\u003ch3 id=\"setup-python-environment\"\u003eSetup Python Environment\u003c/h3\u003e\n\u003cp\u003eI use Python extensively and virtual environments are a must for my development setup. I use \u003ccode\u003epipenv\u003c/code\u003e to manage my virtual environments. To install \u003ccode\u003epipenv\u003c/code\u003e, you need to install \u003ccode\u003evirtualenv\u003c/code\u003e first. To install it, run the following command.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo pacman -S python-virtualenv\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eNow you are ready to install \u003ccode\u003epipenv\u003c/code\u003e. Follow \u003ca href=\"http://pipenv.readthedocs.io/en/latest/install/#fancy-installation-of-pipenv\"\u003ethese\u003c/a\u003e instructions to install the tool.\u003c/p\u003e\n\u003ch3 id=\"install-some-other-common-tools\"\u003eInstall some other common tools\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo pacman -S vlc openssh npm imagemagick git la-capitaine-icon-theme-git\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eDo not forget to \u003ca href=\"https://stackoverflow.com/a/13021677\"\u003esetup\u003c/a\u003e \u003ccode\u003enpm\u003c/code\u003e to install packages globally without requiring \u003ccode\u003esudo\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThat\u0026rsquo;s all! Your system should be in working condition now. Do check out my \u003ca href=\"https://yashhere.github.io/posts/2018/01/my-own-configuration-manager/\"\u003edotfiles\u003c/a\u003e if you want to set up your system like mine.\u003c/p\u003e\n\u003cp\u003eHope you enjoyed the article. Cheers 😄\u003c/p\u003e\n\u003csection class=\"footnotes\" role=\"doc-endnotes\"\u003e\n\u003chr\u003e\n\u003col\u003e\n\u003cli id=\"fn:1\" role=\"doc-endnote\"\u003e\n\u003cp\u003e\u003ca href=\"https://www.reddit.com/r/archlinux/comments/5r5ep8/make_your_arch_fonts_beautiful_easily/\"\u003eMake your Arch fonts beautiful easily!\u003c/a\u003e \u003ca href=\"#fnref:1\" class=\"footnote-backref\" role=\"doc-backlink\"\u003e\u0026#x21a9;\u0026#xfe0e;\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/section\u003e\n","text":"In this post, I will continue from my last post and set up my newly installed Arch Linux for daily use. I am going to install some applications that I use on a day to day basis. Some of these applications are required for my current dotfile configuration setup to work properly. The choice of applications is highly opinionated and your preferences might be different.\n If you had gone for installation via SSH option, then I would suggest you to edit your `sshd_config` file and disable `root` login. It can be a security risk otherwise.  Install a terminal based browser Terminal-based browsers are very handy in cases when you are required to login into a captive portal and you don\u0026rsquo;t have access to a graphical browser. We will install two different browsers, elinks and w3m. sudo pacman -S elinks w3m\nInstall X server. sudo pacman -S xorg This will install minimal X desktop environment with fonts, in case, you want to test your system before installing any desktop environment.\nEnable multilib repository for 32-bit package support To enable multilib repository, uncomment the [multilib] section in /etc/pacman.conf. [multilib] Include = /etc/pacman.d/mirrorlist\nNow upgrade your system. sudo pacman -Syyu\nInstall video and touchpad drivers sudo pacman -S xf86-video-intel xf86-input-synaptics Install pacaur to fetch and install packages from AUR sudo pacman -S expac yajl --noconfirm cd /tmp gpg --recv-keys --keyserver hkp://pgp.mit.edu:80 1EB2638FF56C0C53 curl -o PKGBUILD https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=cower makepkg -i PKGBUILD --noconfirm curl -o PKGBUILD https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=pacaur makepkg -i PKGBUILD --noconfirm cd Install graphical browsers pacaur -S firefox chromium Install code editors pacaur -S sublime-text-dev atom-editor-git visual-studio-code-bin neovim neovim-drop-in leafpad Setup LAMP stack Install Apache server sudo pacman -S apache # Make your user-directory available to apache server mkdir ~/public_html chmod o+x ~ chmod o+x ~/public_html chmod -R o+r ~/public_html # To enable virtualhosts, uncomment the following line in `/etc/httpd/conf/httpd.conf` Include conf/extra/httpd-vhosts.conf Add your virtualhost configuration in following file - sudo vim /etc/httpd/conf/extra/httpd-vhosts.conf\nTo test the virtual hosts on you local machine, add the virtual names to your /etc/hosts file.\nInstall PHP: sudo pacman -S php php-apache To use PHP with apache, open /etc/httpd/conf/httpd.conf and uncomment following line - LoadModule mpm_prefork_module modules/mod_mpm_prefork.so\nand comment out the following line - # LoadModule mpm_event_module modules/mod_mpm_event.so\nNow add these lines to /etc/httpd/conf/httpd.conf: # Add these at the end of `LoadModule` section. LoadModule php7_module modules/libphp7.so AddHandler php7-script .php # Place this at the end of the `Include` section: Include conf/extra/php7_module.conf\nInstall MySQL server sudo pacman -S mariadb # Initialize the MariaDB data directory prior to starting the service. To do so, run: sudo mysql_install_db --user=mysql --basedir=/usr --datadir=/var/lib/mysql # Then issue the commands to start the database server sudo systemctl enable mariadb.service sudo systemctl start mariadb.service # To apply recommended security settings to your database, run sudo mysql_secure_installation Install PHPMyAdmin sudo pacman -S phpmyadmin php-mcrypt Enable mysqli, mcrypt, zip and bz2 extensions in /etc/php/php.ini.\nCreate the apache configuration file /etc/httpd/conf/extra/phpmyadmin.conf\nAlias /phpmyadmin \u0026#34;/usr/share/webapps/phpMyAdmin\u0026#34; \u0026lt;Directory \u0026#34;/usr/share/webapps/phpMyAdmin\u0026#34;\u0026gt; DirectoryIndex index.php AllowOverride All Options FollowSymlinks Require all granted \u0026lt;/Directory\u0026gt; Then include following in /etc/httpd/conf/httpd.conf # phpMyAdmin configuration Include conf/extra/phpmyadmin.conf\nNow restart httpd service to apply settings. sudo systemctl restart httpd Once all these steps are done, your LAMP stack should be working.\nSetup power management Install tlp and some of its optional dependencies sudo pacman -S tlp tlp-rdw bash-completion ethtool lsb-release smartmontools\nThen enable tlp services sudo systemctl enable tlp.service sudo systemctl enable tlp-sleep.service # mask some services for tlp to work properly sudo systemctl mask systemd-rfkill.service sudo systemctl mask systemd-rfkill.socket\nInstall i3 and other tools All these tools are part of my i3 config with exception of the theme related packages. So installing them here will help me later while setting up the i3 window manager. pacaur -S i3 rofi polybar xautolock powerline-fonts-git i3lock-fancy-git compton scrot feh dunst unclutter xfce4-power-manager numlockx lxappearance adapta-gtk-theme gtk-engine-murrine gnome-themes-standard termite\nFix Ugly Fonts 1 Fonts rendering is one area where Linux still lags behind Windows and OSX. It can be a nightmare for users to setup fonts properly in Linux. In Arch Linux, this is even worse. I found some tricks to improve the quality of font rendering on Arch Linux. Though this is far from perfect, it is manageable. Follow these steps on Reddit to fix font rendering. I use Noto Sans, Adobe Source Code Pro, and Microsoft fonts. My apologies, but I can\u0026rsquo;t help here. Some websites still use Microsoft fonts.\nSetup Python Environment I use Python extensively and virtual environments are a must for my development setup. I use pipenv to manage my virtual environments. To install pipenv, you need to install virtualenv first. To install it, run the following command. sudo pacman -S python-virtualenv\nNow you are ready to install pipenv. Follow these instructions to install the tool.\nInstall some other common tools sudo pacman -S vlc openssh npm imagemagick git la-capitaine-icon-theme-git Do not forget to setup npm to install packages globally without requiring sudo.\nThat\u0026rsquo;s all! Your system should be in working condition now. Do check out my dotfiles if you want to set up your system like mine.\nHope you enjoyed the article. Cheers 😄\n  Make your Arch fonts beautiful easily! \u0026#x21a9;\u0026#xfe0e;\n   "},"name":"Arch Linux Installation Guide Part 2","published":"2018-01-26T15:45:27+05:30","summary":"In this post, I will continue from my last post and set up my newly installed Arch Linux for daily use. I am going to install some applications that I use on a day to day basis. Some of these applications are required for my current dotfile configuration setup to work properly. The choice of applications is highly opinionated and your preferences might be different.\n If you had gone for installation via SSH option, then I would suggest you to edit your `sshd_config` file and disable `root` login.","type":"entry","url":"https://yashagarwal.in/posts/2018/01/arch-linux-installation-guide-part-2/"},{"content":{"html":"\u003cp\u003eArch Linux is a Linux distribution known for its not-so-beginner-friendly command line installer, no ready-to-use system after installation and requirement of above average knowledge of command line. However, Arch Linux allows me to set up a system in my desired state in shortest possible time with least effort. This is why I keep coming back to Arch Linux even after some of its annoyances.\u003c/p\u003e\n\u003cp\u003eThis guide is written primarily for my reference, as someone who has installed Arch Linux several times, I still can\u0026rsquo;t remember all the installation steps perfectly. Most of the steps have been taken from \u003ca href=\"https://wiki.archlinux.org/index.php/installation_guide\"\u003eArch wiki\u003c/a\u003e and should work on other setups also.\u003c/p\u003e\n\u003cdiv class=\"note\"\u003e\n    \u003cdiv\u003e\u003c/div\u003e\n    \nAll the commands are run in root shell unless otherwise specified.\n\n\u003c/div\u003e\n\u003ch2 id=\"0-check-your-network-connection\"\u003e0. Check your network connection\u003c/h2\u003e\n\u003cp\u003eIf you are behind a captive portal, use \u003ccode\u003elinks\u003c/code\u003e to open browser and login into your network. For WiFi connections, use \u003ccode\u003ewifi-menu\u003c/code\u003e. LAN connections should not require any setup. The boot environment should automatically detect any wired connections. After connecting, test your connection by pinging any website:\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eping -c \u003cspan class=\"m\"\u003e5\u003c/span\u003e google.com\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003ch2 id=\"1-setup-ssh\"\u003e1. Setup SSH\u003c/h2\u003e\n\u003cp\u003eThis step is not mandatory, though I prefer to use this method to install Arch Linux, as it provides me the convenience of copying and pasting the commands directly from Arch wiki.\u003c/p\u003e\n\u003cp\u003eBy default the Arch Linux \u003ccode\u003eroot\u003c/code\u003e account password is empty. We need to set up a password for \u003ccode\u003eroot\u003c/code\u003e account, which is needed for an SSH connection.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003epasswd\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eNow we need to change the setting to permit \u003ccode\u003eroot\u003c/code\u003e login via SSH in \u003ccode\u003e/etc/ssh/sshd_config\u003c/code\u003e. Check that \u003ccode\u003ePermitRootLogin yes\u003c/code\u003e is uncommented in this file. If this line is not present there, add this to the end. Now start the \u003ccode\u003esshd.service\u003c/code\u003e by issuing the command\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo systemctl start sshd.service\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eAlso, note the IP address of the target machine by inspecting the output of the following command.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eip addr\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003ePro tip:\u003c/em\u003e One liner to get only the IP address\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eip -o -4 addr show \u003cspan class=\"p\"\u003e|\u003c/span\u003e awk -F \u003cspan class=\"s1\"\u003e\u0026#39;[ /]+\u0026#39;\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;/global/ {print $4}\u0026#39;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eNow on your host machine, connect to the target machine via SSH using the following command\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003essh root@ip-address-of-target\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003ch2 id=\"2-partition-the-disks\"\u003e2. Partition the disks\u003c/h2\u003e\n\u003cp\u003eIf Windows 8 or above is already installed on your machine, then your hard disk is probably using \u003ccode\u003eGPT\u003c/code\u003e partitioning scheme. In that case, use \u003ccode\u003egdisk\u003c/code\u003e to partition your hard disk. \u003cdel\u003eIf you use \u003ccode\u003efdisk\u003c/code\u003e on a GPT partitioned HDD, there is a possibility of data loss.\u003c/del\u003e \u003ccode\u003efdisk\u003c/code\u003e understands \u003ccode\u003eGPT\u003c/code\u003e partitioning scheme also.[1]\u003c/p\u003e\n\u003cp\u003eMy preferred setup is to have one root partition and one home partition and use \u003ccode\u003eEFI\u003c/code\u003e partition created by Windows to install boot-loader. The root and home partition will be formatted using \u003ccode\u003eext4\u003c/code\u003e file-system and the \u003ccode\u003eEFI\u003c/code\u003e partition should be formatted using \u003ccode\u003eFAT32\u003c/code\u003e file-system.\u003c/p\u003e\n\u003cp\u003eFor this guide, I am assuming that the \u003ccode\u003eEFI\u003c/code\u003e partition is \u003ccode\u003esda1\u003c/code\u003e, root partition is \u003ccode\u003esda9\u003c/code\u003e and home partition is \u003ccode\u003esda10\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eNow to format the partitions with \u003ccode\u003eext4\u003c/code\u003e file-system:\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003emkfs.ext4 /dev/sda9\nmkfs.ext4 /dev/sda10\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003ch2 id=\"3-mount-the-partitions\"\u003e3. Mount the partitions\u003c/h2\u003e\n\u003cp\u003eNow mount the root partition (\u003ccode\u003esda9\u003c/code\u003e in this case) to \u003ccode\u003e/mnt\u003c/code\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003emount /dev/sda9 /mnt\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eIf you have created any other partitions in previous steps, mount them at appropriate locations.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003emkdir /mnt/home\nmount /dev/sda10 /mnt/home\n\nmkdir /mnt/boot\nmount /dev/sda1 /mnt/boot\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003ch2 id=\"4-install-the-base-file-system\"\u003e4. Install the base file-system\u003c/h2\u003e\n\u003cp\u003eTo install the base system and some development tools, issue the following command.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003epacstrap /mnt base base-devel\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eThis will take a while to download and install. After it finishes, it will give you a bare-bone Arch Linux system with just the tools required to run a Linux distribution, no other software is installed.\u003c/p\u003e\n\u003ch2 id=\"5-generate-etcfstab\"\u003e5. Generate /etc/fstab\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003e/etc/fstab\u003c/code\u003e file stores the information about file systems of partitions and how to mount the partitions on system boot up. To generate this file, issue the following command:\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003egenfstab -U /mnt \u0026gt;\u0026gt; /mnt/etc/fstab\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\nIf you prefer to use partition labels (sda1, sda9 etc.) instead of UUID, then use \u003ccode\u003e-L\u003c/code\u003e flag in place of \u003ccode\u003e-U\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"6-chroot-into-the-system\"\u003e6. chroot into the system\u003c/h2\u003e\n\u003cp\u003eFrom the \u003ca href=\"https://wiki.archlinux.org/index.php/Change_root\"\u003eArch wiki\u003c/a\u003e:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eChroot is an operation that changes the apparent root directory for the current running process and their children. A program that is run in such a modified environment cannot access files and commands outside that environmental directory tree. This modified environment is called a chroot jail.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eAt this step, we will go to the root of the newly installed system at \u003ccode\u003e/mnt\u003c/code\u003e and pretend as if we are logged into this system.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003earch-chroot /mnt\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003ch2 id=\"7-setup-the-time-zone-locale-and-hostname\"\u003e7. Setup the time zone, locale, and hostname\u003c/h2\u003e\n\u003cp\u003eBrowse the \u003ccode\u003e/use/share/zoneinfo\u003c/code\u003e directory to find your location entries. My location is India, so I will use this command.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eln -sf /usr/share/zoneinfo/Asia/Kolkata /etc/localtime\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eTo set the hardware clock:\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ehwclock --systohc\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eTo set the locale for your system, open the \u003ccode\u003e/etc/locale.gen\u003c/code\u003e file and uncomment your language. or run the following command for the default \u003ccode\u003een_US.UTF-8 UTF-8\u003c/code\u003e.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"nv\"\u003eLANG\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eC perl -i -pe \u003cspan class=\"s1\"\u003e\u0026#39;s/#(en_US.UTF)/$1/\u0026#39;\u003c/span\u003e /etc/locale.gen\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\nNow generate the localization with\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003elocale-gen\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eThen set the \u003ccode\u003eLANG\u003c/code\u003e variable in \u003ccode\u003e/etc/locale.conf\u003c/code\u003e accordingly, or run the following command:\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003elocalectl set-locale \u003cspan class=\"nv\"\u003eLANG\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;en_US.UTF-8\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eTo set the hostname for your machine:\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ehostnamectl set-hostname your-host-name\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eTo allow other machines to address the host by name, it is necessary to edit the \u003ccode\u003e/etc/hosts\u003c/code\u003e file to look like this:\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e127.0.0.1    localhost.localdomain          localhost\n::1          localhost.localdomain          localhost\n127.0.1.1    your-host-name.localdomain     your-host-name\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003ch2 id=\"8-create-user-account\"\u003e8. Create user account\u003c/h2\u003e\n\u003cp\u003eBefore creating user account, set password for \u003ccode\u003eroot\u003c/code\u003e account\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003epasswd\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eNow create a local account for your user\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003euseradd -m -G wheel -s /bin/bash your-user-name\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eThis will set up your user account, create a home directory for your user, set the default shell to \u003ccode\u003ebash\u003c/code\u003e and add your user to \u003ccode\u003ewheel\u003c/code\u003e group, which is necessary to gain \u003ccode\u003esudo\u003c/code\u003e access in later steps.\u003c/p\u003e\n\u003cp\u003eSet password for your user.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003epasswd your-user-name\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003ch2 id=\"9-enable-sudo-access\"\u003e9. Enable sudo access\u003c/h2\u003e\n\u003cp\u003eThis allows you to use root privileges without using the root account. To enable this, first open \u003ccode\u003e/etc/sudoers\u003c/code\u003e file\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003enano /etc/sudoers\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eNow uncomment the following line to enable \u003ccode\u003eroot\u003c/code\u003e privilege for all the users inside \u003ccode\u003ewheel\u003c/code\u003e group:\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"c1\"\u003e# %wheel ALL=(ALL) ALL\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eNow you can safely disable root account\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003epasswd -l root\n\n\u003cspan class=\"c1\"\u003e# login into your user account\u003c/span\u003e\nsu your-user-name\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eFrom this point onwards, it is necessary to append \u003ccode\u003esudo\u003c/code\u003e to any command that requires \u003ccode\u003eroot\u003c/code\u003e privileges.\u003c/p\u003e\n\u003ch2 id=\"10-install-bootloader\"\u003e10. Install bootloader\u003c/h2\u003e\n\u003cp\u003eMy preferred bootloader of choice is \u003ccode\u003egrub\u003c/code\u003e. To install \u003ccode\u003egrub\u003c/code\u003e, we need to install following packages.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo pacman -S grub efibootmgr\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eNow install \u003ccode\u003egrub\u003c/code\u003e with the following command.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo grub-install --target\u003cspan class=\"o\"\u003e=\u003c/span\u003ex86_64-efi --efi-directory\u003cspan class=\"o\"\u003e=\u003c/span\u003e/boot --bootloader-id\u003cspan class=\"o\"\u003e=\u003c/span\u003earch\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eHere \u003ccode\u003e--efi-directory\u003c/code\u003e is the folder where the \u003ccode\u003eEFI\u003c/code\u003e partition is mounted \u003ca href=\"#step3\"\u003estep 3\u003c/a\u003e and \u003ccode\u003e--bootloader-id\u003c/code\u003e is the label that will appear in your UEFI boot menu entry.\u003c/p\u003e\n\u003cp\u003eThis particular step is specific to my machine\u0026rsquo;s hardware, you might not need to run this step. I need to add \u003ccode\u003epci=nommconf\u003c/code\u003e to my kernel boot parameters in \u003ccode\u003e/etc/default/grub\u003c/code\u003e, otherwise \u003ccode\u003etty\u003c/code\u003e prints error messages continuously.\u003c/p\u003e\n\u003cp\u003eNow run to generate grub configuration file.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo grub-mkconfig -o /boot/grub/grub.cfg\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eIf you encounter any errors related to \u003ccode\u003elvm\u003c/code\u003e during installation of grub, then follow these steps.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"c1\"\u003e# come out of chroot\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\nmkdir /mnt/hostrun\nmount --bind /run /mnt/hostrun\n\n\u003cspan class=\"c1\"\u003e# back to chroot\u003c/span\u003e\narch-chroot /mnt\nmkdir /run/lvm\nmount --bind /hostrun/lvm /run/lvm\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eNow you can install \u003ccode\u003egrub\u003c/code\u003e without any errors.\u003c/p\u003e\n\u003ch2 id=\"11-configure-the-network\"\u003e11. Configure the network\u003c/h2\u003e\n\u003cp\u003eBy default, your current system cannot connect to the network in the current state. I prefer to use \u003ca href=\"https://wiki.archlinux.org/index.php/NetworkManager\"\u003eNetworkManager\u003c/a\u003e for my network management, even when I am not using GNOME. For wireless networking, install the following additional packages.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo pacman -S iw wpa_supplicant dialog networkmanager network-manager-applet dhclient\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eNetworkManager\u003c/code\u003e supports basic DHCP configuration. For full support, I have installed \u003ccode\u003edhclient\u003c/code\u003e. \u003ccode\u003eNetworkManager\u003c/code\u003e also supports automatic wired connection detection and comes with curses based tool \u003ccode\u003enmtui\u003c/code\u003e to setup wireless connection.\u003c/p\u003e\n\u003cp\u003eTo enable NetworkManager to start at system startup\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo systemctl \u003cspan class=\"nb\"\u003eenable\u003c/span\u003e NetworkManager.service\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003ch2 id=\"12-reboot-now\"\u003e12. Reboot now\u003c/h2\u003e\n\u003cp\u003eIf you had performed the \u003ccode\u003elvm\u003c/code\u003e troubleshooting steps during \u003ccode\u003egrub\u003c/code\u003e install, then\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eumount /run/lvm\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eNow exit from \u003ccode\u003echroot\u003c/code\u003e by typing \u003ccode\u003eexit\u003c/code\u003e in the shell. Unmount all the mounted partitions with:\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eumount -R /mnt\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eFinally, reboot your machine by typing \u003ccode\u003ereboot\u003c/code\u003e and remove the installation USB drive. If you are not able to boot into your system at this point, boot from the installation media again and attempt to fix the installation.\u003c/p\u003e\n\u003cp\u003eIf you can see a terminal with a prompt for your username, congratulations! You have completed the first step towards building your own system.\u003c/p\u003e\n\u003cp\u003eI will be writing about making your system usable and stable in the \u003ca href=\"/posts/2018/01/arch-linux-installation-guide-part-2/\"\u003esecond\u003c/a\u003e part of this guide.\u003c/p\u003e\n\u003cp\u003eHope you enjoyed the post. Stay tuned :)\u003c/p\u003e\n","text":"Arch Linux is a Linux distribution known for its not-so-beginner-friendly command line installer, no ready-to-use system after installation and requirement of above average knowledge of command line. However, Arch Linux allows me to set up a system in my desired state in shortest possible time with least effort. This is why I keep coming back to Arch Linux even after some of its annoyances.\nThis guide is written primarily for my reference, as someone who has installed Arch Linux several times, I still can\u0026rsquo;t remember all the installation steps perfectly. Most of the steps have been taken from Arch wiki and should work on other setups also.\n All the commands are run in root shell unless otherwise specified.  0. Check your network connection If you are behind a captive portal, use links to open browser and login into your network. For WiFi connections, use wifi-menu. LAN connections should not require any setup. The boot environment should automatically detect any wired connections. After connecting, test your connection by pinging any website: ping -c 5 google.com\n1. Setup SSH This step is not mandatory, though I prefer to use this method to install Arch Linux, as it provides me the convenience of copying and pasting the commands directly from Arch wiki.\nBy default the Arch Linux root account password is empty. We need to set up a password for root account, which is needed for an SSH connection. passwd\nNow we need to change the setting to permit root login via SSH in /etc/ssh/sshd_config. Check that PermitRootLogin yes is uncommented in this file. If this line is not present there, add this to the end. Now start the sshd.service by issuing the command sudo systemctl start sshd.service\nAlso, note the IP address of the target machine by inspecting the output of the following command. ip addr\nPro tip: One liner to get only the IP address ip -o -4 addr show | awk -F \u0026#39;[ /]+\u0026#39; \u0026#39;/global/ {print $4}\u0026#39;\nNow on your host machine, connect to the target machine via SSH using the following command ssh root@ip-address-of-target\n2. Partition the disks If Windows 8 or above is already installed on your machine, then your hard disk is probably using GPT partitioning scheme. In that case, use gdisk to partition your hard disk. If you use fdisk on a GPT partitioned HDD, there is a possibility of data loss. fdisk understands GPT partitioning scheme also.[1]\nMy preferred setup is to have one root partition and one home partition and use EFI partition created by Windows to install boot-loader. The root and home partition will be formatted using ext4 file-system and the EFI partition should be formatted using FAT32 file-system.\nFor this guide, I am assuming that the EFI partition is sda1, root partition is sda9 and home partition is sda10.\nNow to format the partitions with ext4 file-system: mkfs.ext4 /dev/sda9 mkfs.ext4 /dev/sda10\n3. Mount the partitions Now mount the root partition (sda9 in this case) to /mnt mount /dev/sda9 /mnt\nIf you have created any other partitions in previous steps, mount them at appropriate locations. mkdir /mnt/home mount /dev/sda10 /mnt/home mkdir /mnt/boot mount /dev/sda1 /mnt/boot\n4. Install the base file-system To install the base system and some development tools, issue the following command. pacstrap /mnt base base-devel\nThis will take a while to download and install. After it finishes, it will give you a bare-bone Arch Linux system with just the tools required to run a Linux distribution, no other software is installed.\n5. Generate /etc/fstab The /etc/fstab file stores the information about file systems of partitions and how to mount the partitions on system boot up. To generate this file, issue the following command: genfstab -U /mnt \u0026gt;\u0026gt; /mnt/etc/fstab If you prefer to use partition labels (sda1, sda9 etc.) instead of UUID, then use -L flag in place of -U.\n6. chroot into the system From the Arch wiki:\n Chroot is an operation that changes the apparent root directory for the current running process and their children. A program that is run in such a modified environment cannot access files and commands outside that environmental directory tree. This modified environment is called a chroot jail.\n At this step, we will go to the root of the newly installed system at /mnt and pretend as if we are logged into this system. arch-chroot /mnt\n7. Setup the time zone, locale, and hostname Browse the /use/share/zoneinfo directory to find your location entries. My location is India, so I will use this command. ln -sf /usr/share/zoneinfo/Asia/Kolkata /etc/localtime\nTo set the hardware clock: hwclock --systohc\nTo set the locale for your system, open the /etc/locale.gen file and uncomment your language. or run the following command for the default en_US.UTF-8 UTF-8. LANG=C perl -i -pe \u0026#39;s/#(en_US.UTF)/$1/\u0026#39; /etc/locale.gen Now generate the localization with locale-gen\nThen set the LANG variable in /etc/locale.conf accordingly, or run the following command: localectl set-locale LANG=\u0026#34;en_US.UTF-8\u0026#34;\nTo set the hostname for your machine: hostnamectl set-hostname your-host-name\nTo allow other machines to address the host by name, it is necessary to edit the /etc/hosts file to look like this: 127.0.0.1 localhost.localdomain localhost ::1 localhost.localdomain localhost 127.0.1.1 your-host-name.localdomain your-host-name\n8. Create user account Before creating user account, set password for root account passwd\nNow create a local account for your user useradd -m -G wheel -s /bin/bash your-user-name\nThis will set up your user account, create a home directory for your user, set the default shell to bash and add your user to wheel group, which is necessary to gain sudo access in later steps.\nSet password for your user. passwd your-user-name\n9. Enable sudo access This allows you to use root privileges without using the root account. To enable this, first open /etc/sudoers file nano /etc/sudoers\nNow uncomment the following line to enable root privilege for all the users inside wheel group: # %wheel ALL=(ALL) ALL\nNow you can safely disable root account passwd -l root # login into your user account su your-user-name\nFrom this point onwards, it is necessary to append sudo to any command that requires root privileges.\n10. Install bootloader My preferred bootloader of choice is grub. To install grub, we need to install following packages. sudo pacman -S grub efibootmgr\nNow install grub with the following command. sudo grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=arch\nHere --efi-directory is the folder where the EFI partition is mounted step 3 and --bootloader-id is the label that will appear in your UEFI boot menu entry.\nThis particular step is specific to my machine\u0026rsquo;s hardware, you might not need to run this step. I need to add pci=nommconf to my kernel boot parameters in /etc/default/grub, otherwise tty prints error messages continuously.\nNow run to generate grub configuration file. sudo grub-mkconfig -o /boot/grub/grub.cfg\nIf you encounter any errors related to lvm during installation of grub, then follow these steps. # come out of chroot exit mkdir /mnt/hostrun mount --bind /run /mnt/hostrun # back to chroot arch-chroot /mnt mkdir /run/lvm mount --bind /hostrun/lvm /run/lvm\nNow you can install grub without any errors.\n11. Configure the network By default, your current system cannot connect to the network in the current state. I prefer to use NetworkManager for my network management, even when I am not using GNOME. For wireless networking, install the following additional packages. sudo pacman -S iw wpa_supplicant dialog networkmanager network-manager-applet dhclient\nNetworkManager supports basic DHCP configuration. For full support, I have installed dhclient. NetworkManager also supports automatic wired connection detection and comes with curses based tool nmtui to setup wireless connection.\nTo enable NetworkManager to start at system startup sudo systemctl enable NetworkManager.service\n12. Reboot now If you had performed the lvm troubleshooting steps during grub install, then umount /run/lvm\nNow exit from chroot by typing exit in the shell. Unmount all the mounted partitions with: umount -R /mnt\nFinally, reboot your machine by typing reboot and remove the installation USB drive. If you are not able to boot into your system at this point, boot from the installation media again and attempt to fix the installation.\nIf you can see a terminal with a prompt for your username, congratulations! You have completed the first step towards building your own system.\nI will be writing about making your system usable and stable in the second part of this guide.\nHope you enjoyed the post. Stay tuned :)\n"},"name":"Arch Linux Installation Guide Part 1","published":"2018-01-24T21:49:05+05:30","summary":"Arch Linux is a Linux distribution known for its not-so-beginner-friendly command line installer, no ready-to-use system after installation and requirement of above average knowledge of command line. However, Arch Linux allows me to set up a system in my desired state in shortest possible time with least effort. This is why I keep coming back to Arch Linux even after some of its annoyances.\nThis guide is written primarily for my reference, as someone who has installed Arch Linux several times, I still can\u0026rsquo;t remember all the installation steps perfectly.","type":"entry","url":"https://yashagarwal.in/posts/2018/01/arch-linux-installation-guide-part-1/"},{"content":{"html":"\u003cp\u003eI have been using Linux since I was in my second year of undergraduate. My experiments with the dotfiles (configuration files) also started at the same time. For the uninformed, in Linux, it is common to configure a lot of settings and configurations within dotfiles. Dotfiles are files in a Linux user\u0026rsquo;s home directory that begin with a dot or a full-stop character. This dot indicates to the operating system that these files are used to store the settings of programs like \u003ccode\u003evim\u003c/code\u003e or shells like \u003ccode\u003ebash\u003c/code\u003e or \u003ccode\u003efish\u003c/code\u003e to name a few.\u003c/p\u003e\n\u003cp\u003eIn the beginning, I was keeping a manual backup of my dotfiles by copying them to a folder from time to time. But the list soon started getting huge, that it became complicated for me to keep track of the changes. Then I moved to symlinks. I started symlinking all the dotfiles from my folder to their usual locations. This setup worked perfectly fine, but as my collection of dotfiles grew, It became very cumbersome for me to symlink every dotfile manually.\u003c/p\u003e\n\u003cp\u003eI also tried a few tools built for this particular purpose. Some of them are \u003ccode\u003evcsh\u003c/code\u003e, \u003ccode\u003emr\u003c/code\u003e, and \u003ccode\u003estow\u003c/code\u003e. These tools work just fine, but I was not willing to learn new tools just for maintaining my dotfiles. At last, I decided to write my tool to solve this problem. This way, there will not be any external dependency, and this tool will also become part of my dotfiles.\u003c/p\u003e\n\u003ch2 id=\"design\"\u003eDesign\u003c/h2\u003e\n\u003cp\u003eThe tool, in itself, is inspired by the \u003ca href=\"https://en.wikipedia.org/wiki/Configuration_file#UNIX/Linux\"\u003eUNIX tradition\u003c/a\u003e of keeping configuration files for the settings of the programs. This configuration system uses a JSON formatted dotfile.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/yashhere/ConMan\"\u003eHere\u003c/a\u003e is the source code for the configuration system. Let\u0026rsquo;s have a look at the file structure of the repository.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e|-- .backups\n|   |-- 08-01-2018-15:47\n|   |-- 08-01-2018-19:30\n|   |-- ......\n|-- configure.py\n|-- current_status\n|-- dotfiles\n|   |-- dunst\n|   |-- gtk-3.0\n|   |-- i3\n|   |-- ......\n|-- dotfiles.json\n|-- LICENSE\n`-- README.md\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eDuring the initial setup, you need to edit the \u003ccode\u003edotfiles.json\u003c/code\u003e file to suit your setup. A relevant section of the JSON file is given below.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;pre\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;cloning repository\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;command\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;git\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;subcommand\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;clone\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;argument\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://github.com/yashhere/dotfiles.git\u0026#34;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;linking\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;bashrc\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;src\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;dotfiles/.bashrc\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;dest\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;.bashrc\u0026#34;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;bash_profile\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;src\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;dotfiles/.bash_profile\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;dest\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;.bash_profile\u0026#34;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;profile\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;src\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;dotfiles/.profile\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;dest\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;.profile\u0026#34;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;i3\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;src\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;dotfiles/i3\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;dest\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;.config/i3\u0026#34;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eAs can be seen, the JSON file has an array variable \u003ccode\u003elinking\u003c/code\u003e, which can be used to set the paths for each configuration file and folder. The \u003ccode\u003econfigure.py\u003c/code\u003e script also requires a \u003ccode\u003edotfiles\u003c/code\u003e folder to be present in the current directory. The folder can be created manually, or if it is already version controlled on GitHub, then the script can clone it. For that, you can edit the \u003ccode\u003epre\u003c/code\u003e section in the \u003ccode\u003edotfiles.json\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eYour dotfiles and config folders go inside the \u003ccode\u003edotfiles\u003c/code\u003e folder. You need to copy all your current configurations to this folder to get started.\u003c/p\u003e\n\u003cp\u003eSo, how does the script know where a file or folder will be linked? Simple, you need to edit the \u003ccode\u003edotfiles.json\u003c/code\u003e file and add source and destination locations. For example, if you want to set up configurations of \u003ccode\u003ei3\u003c/code\u003e to its original location (which is, \u003ccode\u003e$HOME/.config/i3\u003c/code\u003e), then you need to create a new JSON object in the \u003ccode\u003elinking\u003c/code\u003e array, like this.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;i3\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;src\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;dotfiles/i3\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;dest\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;.config/i3\u0026#34;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eHere the \u003ccode\u003ename\u003c/code\u003e is used to identify the configuration file, the \u003ccode\u003esrc\u003c/code\u003e parameter is the location of your config file/folder in the dotfiles directory, and the \u003ccode\u003edest\u003c/code\u003e parameter is the final destination of the file/folder. Keen observers would notice that I have not used \u003ccode\u003e$HOME\u003c/code\u003e anywhere. It is understood that the configuration will go to the current user\u0026rsquo;s home directory. So the \u003ccode\u003edest\u003c/code\u003e is relative to the user\u0026rsquo;s home directory, and \u003ccode\u003esrc\u003c/code\u003e is relative to the directory from which the \u003ccode\u003econfigure.py\u003c/code\u003e script is executed.\u003c/p\u003e\n\u003cp\u003eAnd you are done! Now, run \u003ccode\u003econfigure.py\u003c/code\u003e, and all your dotfiles and folders will be symlinked to their correct place.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003ecurrent_status\u003c/code\u003e file saves all the symlink locations that are being managed by the script, for your easy reference and to debug any error.\u003c/p\u003e\n\u003ch2 id=\"behind-the-scenes\"\u003eBehind the Scenes\u003c/h2\u003e\n\u003cp\u003eA lot to cool things happen behind the scenes. The script will check if any previous symlink exists at the given \u003ccode\u003edest\u003c/code\u003e location. It removes any symlinks to avoid redundancy. If the dest already has any dotfile or folder, then it backs it up in the \u003ccode\u003e.backups\u003c/code\u003e under today\u0026rsquo;s date and time before replacing it with a symlink to avoid any potential data loss.\u003c/p\u003e\n\u003cp\u003eI hope the article was useful. Cheers 😄\u003c/p\u003e\n","text":"I have been using Linux since I was in my second year of undergraduate. My experiments with the dotfiles (configuration files) also started at the same time. For the uninformed, in Linux, it is common to configure a lot of settings and configurations within dotfiles. Dotfiles are files in a Linux user\u0026rsquo;s home directory that begin with a dot or a full-stop character. This dot indicates to the operating system that these files are used to store the settings of programs like vim or shells like bash or fish to name a few.\nIn the beginning, I was keeping a manual backup of my dotfiles by copying them to a folder from time to time. But the list soon started getting huge, that it became complicated for me to keep track of the changes. Then I moved to symlinks. I started symlinking all the dotfiles from my folder to their usual locations. This setup worked perfectly fine, but as my collection of dotfiles grew, It became very cumbersome for me to symlink every dotfile manually.\nI also tried a few tools built for this particular purpose. Some of them are vcsh, mr, and stow. These tools work just fine, but I was not willing to learn new tools just for maintaining my dotfiles. At last, I decided to write my tool to solve this problem. This way, there will not be any external dependency, and this tool will also become part of my dotfiles.\nDesign The tool, in itself, is inspired by the UNIX tradition of keeping configuration files for the settings of the programs. This configuration system uses a JSON formatted dotfile.\nHere is the source code for the configuration system. Let\u0026rsquo;s have a look at the file structure of the repository. |-- .backups | |-- 08-01-2018-15:47 | |-- 08-01-2018-19:30 | |-- ...... |-- configure.py |-- current_status |-- dotfiles | |-- dunst | |-- gtk-3.0 | |-- i3 | |-- ...... |-- dotfiles.json |-- LICENSE `-- README.md\nDuring the initial setup, you need to edit the dotfiles.json file to suit your setup. A relevant section of the JSON file is given below. { \u0026#34;pre\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;cloning repository\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;git\u0026#34;, \u0026#34;subcommand\u0026#34;: \u0026#34;clone\u0026#34;, \u0026#34;argument\u0026#34;: \u0026#34;https://github.com/yashhere/dotfiles.git\u0026#34; } ], \u0026#34;linking\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;bashrc\u0026#34;, \u0026#34;src\u0026#34;: \u0026#34;dotfiles/.bashrc\u0026#34;, \u0026#34;dest\u0026#34;: \u0026#34;.bashrc\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;bash_profile\u0026#34;, \u0026#34;src\u0026#34;: \u0026#34;dotfiles/.bash_profile\u0026#34;, \u0026#34;dest\u0026#34;: \u0026#34;.bash_profile\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;profile\u0026#34;, \u0026#34;src\u0026#34;: \u0026#34;dotfiles/.profile\u0026#34;, \u0026#34;dest\u0026#34;: \u0026#34;.profile\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;i3\u0026#34;, \u0026#34;src\u0026#34;: \u0026#34;dotfiles/i3\u0026#34;, \u0026#34;dest\u0026#34;: \u0026#34;.config/i3\u0026#34; }, ] }\nAs can be seen, the JSON file has an array variable linking, which can be used to set the paths for each configuration file and folder. The configure.py script also requires a dotfiles folder to be present in the current directory. The folder can be created manually, or if it is already version controlled on GitHub, then the script can clone it. For that, you can edit the pre section in the dotfiles.json.\nYour dotfiles and config folders go inside the dotfiles folder. You need to copy all your current configurations to this folder to get started.\nSo, how does the script know where a file or folder will be linked? Simple, you need to edit the dotfiles.json file and add source and destination locations. For example, if you want to set up configurations of i3 to its original location (which is, $HOME/.config/i3), then you need to create a new JSON object in the linking array, like this. { \u0026#34;name\u0026#34;: \u0026#34;i3\u0026#34;, \u0026#34;src\u0026#34;: \u0026#34;dotfiles/i3\u0026#34;, \u0026#34;dest\u0026#34;: \u0026#34;.config/i3\u0026#34; }\nHere the name is used to identify the configuration file, the src parameter is the location of your config file/folder in the dotfiles directory, and the dest parameter is the final destination of the file/folder. Keen observers would notice that I have not used $HOME anywhere. It is understood that the configuration will go to the current user\u0026rsquo;s home directory. So the dest is relative to the user\u0026rsquo;s home directory, and src is relative to the directory from which the configure.py script is executed.\nAnd you are done! Now, run configure.py, and all your dotfiles and folders will be symlinked to their correct place.\nThe current_status file saves all the symlink locations that are being managed by the script, for your easy reference and to debug any error.\nBehind the Scenes A lot to cool things happen behind the scenes. The script will check if any previous symlink exists at the given dest location. It removes any symlinks to avoid redundancy. If the dest already has any dotfile or folder, then it backs it up in the .backups under today\u0026rsquo;s date and time before replacing it with a symlink to avoid any potential data loss.\nI hope the article was useful. Cheers 😄\n"},"name":"My Own Configuration Manager","published":"2018-01-21T11:23:23+05:30","summary":"I have been using Linux since I was in my second year of undergraduate. My experiments with the dotfiles (configuration files) also started at the same time. For the uninformed, in Linux, it is common to configure a lot of settings and configurations within dotfiles. Dotfiles are files in a Linux user\u0026rsquo;s home directory that begin with a dot or a full-stop character. This dot indicates to the operating system that these files are used to store the settings of programs like vim or shells like bash or fish to name a few.","type":"entry","url":"https://yashagarwal.in/posts/2018/01/my-own-configuration-manager/"}],"name":"configuration","type":"feed","url":"https://yashagarwal.in/tags/configuration/"}