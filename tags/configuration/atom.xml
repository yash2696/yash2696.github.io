<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
    <generator uri="https://gohugo.io/" version="0.68.3">Hugo</generator><title type="html"><![CDATA[configuration on /dev/yash/notes]]></title>
    
        <subtitle type="html"><![CDATA[The directory of my thoughts]]></subtitle>
    
    
    
            <link href="https://yashagarwal.in/tags/configuration/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://yashagarwal.in/tags/configuration/index.xml" rel="alternate" type="application/rss+xml" title="RSS" />
            <link href="https://yashagarwal.in/tags/configuration/atom.xml" rel="self" type="application/atom+xml" title="Atom" />
            <link href="https://yashagarwal.in/tags/configuration/jf2feed.json" rel="alternate" type="application/jf2feed+json" title="jf2feed" />
    <updated>2020-03-31T12:08:56+00:00</updated>
    
    
    <author>
            <name>Yash Agarwal</name>
            
                <email>yashagarwaljpr@gmail.com</email>
            </author>
    
        <id>https://yashagarwal.in/tags/configuration/</id>
    
        
        <entry>
            <title type="html"><![CDATA[Proxy Your Requests to the Backend Server With Grunt]]></title>
            <link href="https://yashagarwal.in/posts/2018/05/proxy-your-requests-to-the-backend-server-with-grunt/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://yashagarwal.in/posts/2018/02/syncing-time-on-windows-gnu/linux-dual-boot-setups/?utm_source=atom_feed" rel="related" type="text/html" title="Syncing Time on Windows &amp; GNU/Linux Dual Boot Setups" />
                <link href="https://yashagarwal.in/posts/2018/01/arch-linux-installation-guide-part-2/?utm_source=atom_feed" rel="related" type="text/html" title="Arch Linux Installation Guide Part 2" />
                <link href="https://yashagarwal.in/posts/2018/01/arch-linux-installation-guide-part-1/?utm_source=atom_feed" rel="related" type="text/html" title="Arch Linux Installation Guide Part 1" />
                <link href="https://yashagarwal.in/posts/2018/01/my-own-configuration-manager/?utm_source=atom_feed" rel="related" type="text/html" title="My Own Configuration Manager" />
            
                <id>https://yashagarwal.in/posts/2018/05/proxy-your-requests-to-the-backend-server-with-grunt/</id>
            
            
                    <author>
                        <name>Yash Agarwal</name>
                    </author>
            <published>2018-05-15T17:14:13+05:30</published>
            <updated>2018-05-15T17:14:13+05:30</updated>
            
            
            <content type="html"><![CDATA[<p><em>This article was originally published on <a href="https://www.zeolearn.com/magazine/proxy-your-requests-to-the-backend-server-with-grunt">zeolearn</a>.</em></p>
<p>If you are working on large projects, it is undoubtedly a good idea to have a build script or some task scripts to help to automate some of the repetitive parts of the development process.
For JavaScript projects, <code>Grunt</code> serves a similar purpose. It is a JavaScript task/build runner that is written on top of NodeJS. Grunt can help you with automatically minifying your JavaScript or CSS files, or reload your browser on every file change. It can show you a comprehensive list of JavaScript errors, compile your <code>SASS/LESS</code> files into CSS files automatically, and many other things.</p>
<p>However, the most significant advantage of Grunt that I am going to discuss today is its ability to proxy your requests. For example, when you are developing your backend with anything other than JavaScript, you will face difficulty in accessing the backend data in your frontend without having to compile and deploy the code every time you make any changes. It is not possible with a typical web server setup because <a href="https://en.wikipedia.org/wiki/XMLHttpRequest">XHR</a> requests are not allowed to be cross-domain by browsers due to <a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing">Cross-origin resource sharing</a> (CORS) limitations.</p>
<p>So, the problem here is as follows,</p>
<blockquote>
<p>you are developing the UI of your applications using some frontend JavaScript framework (say Angular) with Grunt as the build runner, and the backend of your application is being designed in some backend framework other than JavaScript/NodeJS (say Laravel), you might face problems accessing the backend while running Grunt server.</p>
</blockquote>
<p>It happens because the backend Laravel service runs on port 8000, and the front end development server runs on port 8080. The requests from the frontend server to the backend-server will result in <a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy">same-origin policy</a> errors due to the port difference. To fix this issue, we can set up CORS through a proxy on Grunt. This proxy will stand in front of your frontend server and the backend server and get the required data from the backend and pass it to your frontend while letting your browser think that you are all in the same domain.</p>
<p>Grunt has a module <a href="https://github.com/drewzboto/grunt-connect-proxy">grunt-connect-proxy</a> that exists to help to solve this issue. It delegates requests that match a given URL to the backend of your choice. So for example, you want to access your backend using the URL <a href="http://localhost:8080/api">http://localhost:8080/api</a>, you can write a proxy rule so that whenever your user tries to access this URL in a browser, the proxy will get the data from your backend and server it at this particular URL.</p>
<p>The procedure to set up the proxy is simple. First, you will have to add the proxy configuration to your <code>Gruntfile.js</code>. In this example, I am assuming that the backend server is running on the port 8000, and the Grunt server is running on the port 8080. This configuration will delegate all requests to <a href="http://localhost:8080/api">http://localhost:8080/api</a> to <a href="http://localhost:8000/backend">http://localhost:8000/backend</a>.</p>
<div class="highlight"><pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">connect</span><span class="o">:</span> <span class="p">{</span>
  <span class="nx">server</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">port</span><span class="o">:</span> <span class="mi">8080</span><span class="p">,</span>
      <span class="nx">base</span><span class="o">:</span> <span class="s1">&#39;public&#39;</span><span class="p">,</span>
      <span class="nx">hostname</span><span class="o">:</span> <span class="s1">&#39;localhost&#39;</span><span class="p">,</span>
      <span class="nx">livereload</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="nx">middleware</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">connect</span><span class="p">,</span> <span class="nx">options</span><span class="p">,</span> <span class="nx">middlewares</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">middlewares</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;grunt-connect-proxy/lib/utils&#39;</span><span class="p">).</span><span class="nx">proxyRequest</span><span class="p">);</span>
        <span class="k">return</span> <span class="nx">middlewares</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">},</span>
    <span class="nx">proxies</span><span class="o">:</span> <span class="p">[</span>
      <span class="p">{</span>
        <span class="nx">context</span><span class="o">:</span> <span class="s1">&#39;/api&#39;</span><span class="p">,</span>
        <span class="nx">host</span><span class="o">:</span> <span class="s1">&#39;localhost&#39;</span><span class="p">,</span>
        <span class="nx">port</span><span class="o">:</span> <span class="mi">8000</span><span class="p">,</span>
        <span class="nx">https</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="nx">rewrite</span><span class="o">:</span> <span class="p">{</span>
            <span class="s1">&#39;^/api&#39;</span><span class="o">:</span> <span class="s1">&#39;/backend&#39;</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">]</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>Now register your Grunt server task to run the proxy on Grunt execution.</p>
<div class="highlight"><pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;server&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">target</span><span class="p">)</span> <span class="p">{</span>
   <span class="nx">grunt</span><span class="p">.</span><span class="nx">task</span><span class="p">.</span><span class="nx">run</span><span class="p">([</span>
       <span class="s1">&#39;configureProxies:server&#39;</span><span class="p">,</span>
       <span class="s1">&#39;connect:server&#39;</span><span class="p">,</span>
   <span class="p">]);</span>
<span class="p">});</span>
</code></pre></div>
<p>Let me explain the above two scripts line by line. In the connect section of your <code>Gruntfile</code>, we add a new section called <code>proxies</code>. The options defined in the proxies section are explained below.</p>
<ul>
<li><strong>context</strong>: This is the context against which the incoming requests will be matched. Matching requests will be proxied to the backend server.</li>
<li><strong>host</strong>: The host address where the backend server is running. The incoming requests will be proxied to this host.</li>
<li><strong>port</strong>: The port where the backend server is running.</li>
<li><strong>https</strong>: If your backend server is an https endpoint, then set this value to <code>true</code>.</li>
<li><strong>rewrite</strong>: This option allows rewriting of URL when proxying. What this means is that when trying to proxy <a href="http://localhost:8080/api">http://localhost:8080/api</a> to the backend server, the URL will be rewritten as <a href="http://localhost:8000/backend">http://localhost:8000/backend</a>. The object&rsquo;s key serves as the regex used in the replacement operation, and the object&rsquo;s value is the context of your backend server&rsquo;s service.</li>
</ul>
<p>More options can be found in the <a href="https://github.com/drewzboto/grunt-connect-proxy#grunt-connect-proxy">documentation</a> of <code>grunt-connect-proxy</code>.</p>
<p>You will also need to set up the proxy&rsquo;s middleware in the <code>options</code> section of the <code>connect</code>. The relevant code is as follows.</p>
<div class="highlight"><pre class="chroma"><code class="language-js" data-lang="js"><span class="p">...</span>
<span class="nx">middleware</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">connect</span><span class="p">,</span> <span class="nx">options</span><span class="p">,</span> <span class="nx">middlewares</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">middlewares</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;grunt-connect-proxy/lib/utils&#39;</span><span class="p">).</span><span class="nx">proxyRequest</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">middlewares</span><span class="p">;</span>
<span class="p">}</span>
<span class="p">...</span>
</code></pre></div>
<p>Finally, include your proxy task in the server task. It is necessary to append the proxy task before the connect task. Also, make sure to specify the connection target in the <code>configureProxies</code> section. In our case, the connect target is <code>server</code>.</p>
<p>Now you can start your Grunt server via this configured proxy by typing <code>Grunt server</code> in the command line. You should see something like this in the console.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ grunt server
...
Running <span class="s2">&#34;configureProxies:server&#34;</span> <span class="o">(</span>configureProxies<span class="o">)</span> task
Rewrite rule created <span class="k">for</span>: <span class="o">[</span>/^<span class="se">\/</span>api/ -&gt; /backend<span class="o">]</span>.
Proxy created <span class="k">for</span>: /api to localhost:8000

Running <span class="s2">&#34;connect:server&#34;</span> <span class="o">(</span>connect<span class="o">)</span> task
Started connect web server on http://localhost:8080
...</code></pre></div>
<p>The above output confirms that the proxy is working fine.
Some of the example URLs are:</p>
<table>
<thead>
<tr>
<th>Grunt Server</th>
<th>Backend Server</th>
</tr>
</thead>
<tbody>
<tr>
<td>http://127.0.0.1:8080/api</td>
<td>http://127.0.0.1:8000/backend</td>
</tr>
<tr>
<td>http://127.0.0.1:8080/api/x/y</td>
<td>http://127.0.0.1:8000/backend/x/y</td>
</tr>
</tbody>
</table>
<p>That&rsquo;s all. Now you will not face any problems getting data from any backend of your choice.</p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://yashagarwal.in/categories/technical" term="technical" label="Technical" />
                            
                        
                    
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://yashagarwal.in/tags/configuration" term="configuration" label="configuration" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Syncing Time on Windows & GNU/Linux Dual Boot Setups]]></title>
            <link href="https://yashagarwal.in/posts/2018/02/syncing-time-on-windows-gnu/linux-dual-boot-setups/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://yashagarwal.in/posts/2018/01/arch-linux-installation-guide-part-2/?utm_source=atom_feed" rel="related" type="text/html" title="Arch Linux Installation Guide Part 2" />
                <link href="https://yashagarwal.in/posts/2018/01/arch-linux-installation-guide-part-1/?utm_source=atom_feed" rel="related" type="text/html" title="Arch Linux Installation Guide Part 1" />
                <link href="https://yashagarwal.in/posts/2018/01/my-own-configuration-manager/?utm_source=atom_feed" rel="related" type="text/html" title="My Own Configuration Manager" />
                <link href="https://yashagarwal.in/posts/2017/12/setting-up-ssh-agent-in-i3/?utm_source=atom_feed" rel="related" type="text/html" title="Setting Up SSH Agent in i3" />
                <link href="https://yashagarwal.in/posts/2017/12/setting-up-alm-octane-with-docker-compose/?utm_source=atom_feed" rel="related" type="text/html" title="Setting up ALM Octane with Docker Compose" />
            
                <id>https://yashagarwal.in/posts/2018/02/syncing-time-on-windows-gnu/linux-dual-boot-setups/</id>
            
            
                    <author>
                        <name>Yash Agarwal</name>
                    </author>
            <published>2018-02-01T12:54:34+05:30</published>
            <updated>2018-02-01T12:54:34+05:30</updated>
            
            
            <content type="html"><![CDATA[<p>This post is going to be one of those that I have written for my reference. Whatever I am going to mention in this post is not new. Everything has already been said and written many times on many websites and Linux forums.</p>
<p>So I will start by explaining the problem. When you try to dual boot your machine to run both GNU/Linux and Windows operating systems, you might have noticed that the time is not the same in both the operating systems. It is generally one operating system showing the correct time, and the other one showing the wrong time. It happens because Microsoft Windows thinks that the hardware clock (CMOS clock or BIOS clock) of the machine is using the local time (depends on your current time zone), and hence it doesn&rsquo;t do anything and shows you the same time. But most GNU/Linux operating systems (Ubuntu, Arch Linux, etc.) think that the hardware clock is set to track UTC. Hence the mismatch in the time happens. For example, assume that the current real-time is 10:22:51, and the hardware clock time is set to 10:22:51. Windows will interpret this time as local time and show 10:22:51, but Linux based systems will show 15:52:51 because they will understand this time as UTC. Of course, the above example is true if we assume time zone as India, which is +05:30 from UTC.</p>
<p>This issue can be fixed either from Windows or from GNU/Linux OS. I prefer to adjust the behavior of Windows to use UTC. It is much more convenient to use when traveling between different time zones. Please note that this method might not work or cause instability with older versions of Windows OS. I have tried this fix on Windows 10, and it works without any issues.</p>
<p>Open an Administrator Command Prompt by pressing <code>⊞ + x</code>, then type <code>a</code>. This method of opening the Administrator Command Prompt does not work on Windows 7.</p>
<p>Now execute the following command:
<div class="highlight"><pre class="chroma"><code class="language-batch" data-lang="batch">reg add <span class="s2">&#34;HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\TimeZoneInformation&#34;</span> /v RealTimeIsUniversal /d 1 /t REG_DWORD /f</code></pre></div></p>
<p>Windows Time Service, which keeps the clock in Windows OS accurate, will still write the local time to the Real-time clock (RTC) regardless of the registry settings on shutdown. So I prefer to disable the Windows Time Service.
<div class="highlight"><pre class="chroma"><code class="language-batch" data-lang="batch">sc config w32time start= disabled</code></pre></div></p>
<p>Now you may need to change the time in your BIOS to UTC time, although that depends on whether your Windows OS was showing the correct time before applying the above modifications. If yes, then changing BIOS time to UTC will make sure that both Windows and GNU/Linux convert hardware clock to local time.</p>
<hr>
<h2 id="references">References</h2>
<ol>
<li><a href="https://help.ubuntu.com/community/UbuntuTime#Multiple_Boot_Systems_Time_Conflicts">Multiple Boot Systems Time Conflicts</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Time#UTC_in_Windows">UTC in Windows</a></li>
</ol>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://yashagarwal.in/categories/hacks" term="hacks" label="Hacks" />
                            
                        
                    
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://yashagarwal.in/tags/configuration" term="configuration" label="configuration" />
                             
                                <category scheme="https://yashagarwal.in/tags/arch-linux" term="arch-linux" label="Arch Linux" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Arch Linux Installation Guide Part 2]]></title>
            <link href="https://yashagarwal.in/posts/2018/01/arch-linux-installation-guide-part-2/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://yashagarwal.in/posts/2018/01/arch-linux-installation-guide-part-1/?utm_source=atom_feed" rel="related" type="text/html" title="Arch Linux Installation Guide Part 1" />
                <link href="https://yashagarwal.in/posts/2017/12/setting-up-ssh-agent-in-i3/?utm_source=atom_feed" rel="related" type="text/html" title="Setting Up SSH Agent in i3" />
                <link href="https://yashagarwal.in/posts/2018/01/my-own-configuration-manager/?utm_source=atom_feed" rel="related" type="text/html" title="My Own Configuration Manager" />
                <link href="https://yashagarwal.in/posts/2017/12/setting-up-alm-octane-with-docker-compose/?utm_source=atom_feed" rel="related" type="text/html" title="Setting up ALM Octane with Docker Compose" />
                <link href="https://yashagarwal.in/posts/2017/10/fixing-hindi-fonts-in-arch-linux/?utm_source=atom_feed" rel="related" type="text/html" title="Fixing Hindi Fonts in Arch Linux" />
            
                <id>https://yashagarwal.in/posts/2018/01/arch-linux-installation-guide-part-2/</id>
            
            
                    <author>
                        <name>Yash Agarwal</name>
                    </author>
            <published>2018-01-26T15:45:27+05:30</published>
            <updated>2018-01-26T15:45:27+05:30</updated>
            
            
            <content type="html"><![CDATA[<p>In this post, I will continue from my last <a href="https://yashhere.github.io/posts/2018/01/arch-linux-installation-guide-part-1/">post</a> and set up my newly installed Arch Linux for daily use. I am going to install some applications that I use on a day to day basis. Some of these applications are required for my current dotfile <a href="https://yashhere.github.io/posts/2018/01/my-own-configuration-manager/">configuration</a> setup to work properly. The choice of applications is highly opinionated and your preferences might be different.</p>
<div class="note">
    <div></div>
    
If you had gone for installation via SSH option, then I would suggest you to edit your `sshd_config` file and disable `root` login. It can be a security risk otherwise.

</div>
<h3 id="install-a-terminal-based-browser">Install a terminal based browser</h3>
<p>Terminal-based browsers are very handy in cases when you are required to login into a captive portal and you don&rsquo;t have access to a graphical browser. We will install two different browsers, <code>elinks</code> and <code>w3m</code>.
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo pacman -S elinks w3m</code></pre></div></p>
<h3 id="install-x-server">Install X server.</h3>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo pacman -S xorg</code></pre></div>
<p>This will install minimal X desktop environment with fonts, in case, you want to test your system before installing any desktop environment.</p>
<h3 id="enable-multilib-repository-for-32-bit-package-support">Enable multilib repository for 32-bit package support</h3>
<p>To enable multilib repository, uncomment the <code>[multilib]</code> section in <code>/etc/pacman.conf</code>.
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="o">[</span>multilib<span class="o">]</span>
<span class="nv">Include</span> <span class="o">=</span> /etc/pacman.d/mirrorlist</code></pre></div></p>
<p>Now upgrade your system.
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo pacman -Syyu</code></pre></div></p>
<h3 id="install-video-and-touchpad-drivers">Install video and touchpad drivers</h3>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo pacman -S xf86-video-intel xf86-input-synaptics</code></pre></div>
<h3 id="install-pacaur-to-fetch-and-install-packages-from-aur">Install pacaur to fetch and install packages from AUR</h3>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo pacman -S expac yajl --noconfirm
<span class="nb">cd</span> /tmp
gpg --recv-keys --keyserver hkp://pgp.mit.edu:80 1EB2638FF56C0C53
curl -o PKGBUILD https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h<span class="o">=</span>cower
makepkg -i PKGBUILD --noconfirm
curl -o PKGBUILD https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h<span class="o">=</span>pacaur
makepkg -i PKGBUILD --noconfirm
cd</code></pre></div>
<h3 id="install-graphical-browsers">Install graphical browsers</h3>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">pacaur -S firefox chromium</code></pre></div>
<h3 id="install-code-editors">Install code editors</h3>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">pacaur -S sublime-text-dev atom-editor-git visual-studio-code-bin neovim neovim-drop-in leafpad</code></pre></div>
<h3 id="setup-lamp-stack">Setup LAMP stack</h3>
<h4 id="install-apache-server">Install Apache server</h4>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo pacman -S apache

<span class="c1"># Make your user-directory available to apache server</span>
mkdir ~/public_html
chmod o+x ~
chmod o+x ~/public_html
chmod -R o+r ~/public_html</code></pre></div>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># To enable virtualhosts, uncomment the following line in `/etc/httpd/conf/httpd.conf`</span>
Include conf/extra/httpd-vhosts.conf</code></pre></div>
<p>Add your virtualhost configuration in following file -
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo vim /etc/httpd/conf/extra/httpd-vhosts.conf</code></pre></div></p>
<p>To test the virtual hosts on you local machine, add the virtual names to your <code>/etc/hosts</code> file.</p>
<h4 id="install-php">Install PHP:</h4>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo pacman -S php php-apache</code></pre></div>
<p>To use PHP with apache, open <code>/etc/httpd/conf/httpd.conf</code> and uncomment following line -
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">LoadModule mpm_prefork_module modules/mod_mpm_prefork.so</code></pre></div></p>
<p>and comment out the following line -
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># LoadModule mpm_event_module modules/mod_mpm_event.so</span></code></pre></div></p>
<p>Now add these lines to <code>/etc/httpd/conf/httpd.conf</code>:
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># Add these at the end of `LoadModule` section.</span>
LoadModule php7_module modules/libphp7.so
AddHandler php7-script .php

<span class="c1"># Place this at the end of the `Include` section:</span>
Include conf/extra/php7_module.conf</code></pre></div></p>
<h4 id="install-mysql-server">Install MySQL server</h4>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo pacman -S mariadb

<span class="c1"># Initialize the MariaDB data directory prior to starting the service. To do so, run:</span>
sudo mysql_install_db --user<span class="o">=</span>mysql --basedir<span class="o">=</span>/usr --datadir<span class="o">=</span>/var/lib/mysql

<span class="c1"># Then issue the commands to start the database server</span>
sudo systemctl <span class="nb">enable</span> mariadb.service
sudo systemctl start mariadb.service

<span class="c1"># To apply recommended security settings to your database, run</span>
sudo mysql_secure_installation</code></pre></div>
<h4 id="install-phpmyadmin">Install PHPMyAdmin</h4>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo pacman -S phpmyadmin php-mcrypt</code></pre></div>
<p>Enable <code>mysqli</code>, <code>mcrypt</code>, <code>zip</code> and <code>bz2</code> extensions in <code>/etc/php/php.ini</code>.</p>
<p>Create the apache configuration file <code>/etc/httpd/conf/extra/phpmyadmin.conf</code></p>
<div class="highlight"><pre class="chroma"><code class="language-ApacheConf" data-lang="ApacheConf"><span class="nb">Alias</span> <span class="sx">/phpmyadmin</span> <span class="s2">&#34;/usr/share/webapps/phpMyAdmin&#34;</span>
<span class="nt">&lt;Directory</span> <span class="s">&#34;/usr/share/webapps/phpMyAdmin&#34;</span><span class="nt">&gt;</span>
    <span class="nb">DirectoryIndex</span> index.php
    <span class="nb">AllowOverride</span> <span class="k">All</span>
    <span class="nb">Options</span> FollowSymlinks
    <span class="nb">Require</span> <span class="k">all</span> granted
<span class="nt">&lt;/Directory&gt;</span></code></pre></div>
<p>Then include following in <code>/etc/httpd/conf/httpd.conf</code>
<div class="highlight"><pre class="chroma"><code class="language-ApacheConf" data-lang="ApacheConf"><span class="c"># phpMyAdmin configuration</span>
<span class="nb">Include</span> conf/extra/phpmyadmin.conf</code></pre></div></p>
<p>Now restart <code>httpd</code> service to apply settings.
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo systemctl restart httpd</code></pre></div>
Once all these steps are done, your LAMP stack should be working.</p>
<h3 id="setup-power-management">Setup power management</h3>
<p>Install <code>tlp</code> and some of its optional dependencies
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo pacman -S tlp tlp-rdw bash-completion ethtool lsb-release smartmontools</code></pre></div></p>
<p>Then enable <code>tlp</code> services
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo systemctl <span class="nb">enable</span> tlp.service
sudo systemctl <span class="nb">enable</span> tlp-sleep.service

<span class="c1"># mask some services for tlp to work properly</span>
sudo systemctl mask systemd-rfkill.service
sudo systemctl mask systemd-rfkill.socket</code></pre></div></p>
<h3 id="install-i3-and-other-tools">Install i3 and other tools</h3>
<p>All these tools are part of my <code>i3</code> config with exception of the theme related packages. So installing them here will help me later while setting up the <code>i3</code> window manager.
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">pacaur -S i3 rofi polybar xautolock powerline-fonts-git i3lock-fancy-git compton scrot feh dunst unclutter xfce4-power-manager numlockx lxappearance adapta-gtk-theme gtk-engine-murrine gnome-themes-standard termite</code></pre></div></p>
<h3 id="fix-ugly-fonts-1">Fix Ugly Fonts <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></h3>
<p>Fonts rendering is one area where Linux still lags behind Windows and OSX. It can be a nightmare for users to setup fonts properly in Linux. In Arch Linux, this is even worse. I found some tricks to improve the quality of font rendering on Arch Linux. Though this is far from perfect, it is manageable. Follow these <a href="https://www.reddit.com/r/archlinux/comments/5r5ep8/make_your_arch_fonts_beautiful_easily/">steps</a> on Reddit to fix font rendering. I use Noto Sans, Adobe Source Code Pro, and Microsoft fonts. My apologies, but I can&rsquo;t help here. Some websites still use Microsoft fonts.</p>
<h3 id="setup-python-environment">Setup Python Environment</h3>
<p>I use Python extensively and virtual environments are a must for my development setup. I use <code>pipenv</code> to manage my virtual environments. To install <code>pipenv</code>, you need to install <code>virtualenv</code> first. To install it, run the following command.
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo pacman -S python-virtualenv</code></pre></div></p>
<p>Now you are ready to install <code>pipenv</code>. Follow <a href="http://pipenv.readthedocs.io/en/latest/install/#fancy-installation-of-pipenv">these</a> instructions to install the tool.</p>
<h3 id="install-some-other-common-tools">Install some other common tools</h3>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo pacman -S vlc openssh npm imagemagick git la-capitaine-icon-theme-git</code></pre></div>
<p>Do not forget to <a href="https://stackoverflow.com/a/13021677">setup</a> <code>npm</code> to install packages globally without requiring <code>sudo</code>.</p>
<p>That&rsquo;s all! Your system should be in working condition now. Do check out my <a href="https://yashhere.github.io/posts/2018/01/my-own-configuration-manager/">dotfiles</a> if you want to set up your system like mine.</p>
<p>Hope you enjoyed the article. Cheers 😄</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p><a href="https://www.reddit.com/r/archlinux/comments/5r5ep8/make_your_arch_fonts_beautiful_easily/">Make your Arch fonts beautiful easily!</a> <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://yashagarwal.in/categories/hacks" term="hacks" label="Hacks" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://yashagarwal.in/series/arch-linux-installation" term="arch-linux-installation" label="Arch Linux Installation" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://yashagarwal.in/tags/configuration" term="configuration" label="configuration" />
                             
                                <category scheme="https://yashagarwal.in/tags/arch-linux" term="arch-linux" label="Arch Linux" />
                             
                                <category scheme="https://yashagarwal.in/tags/i3" term="i3" label="i3" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Arch Linux Installation Guide Part 1]]></title>
            <link href="https://yashagarwal.in/posts/2018/01/arch-linux-installation-guide-part-1/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
                <link href="https://yashagarwal.in/posts/2017/12/setting-up-ssh-agent-in-i3/?utm_source=atom_feed" rel="related" type="text/html" title="Setting Up SSH Agent in i3" />
                <link href="https://yashagarwal.in/posts/2018/01/my-own-configuration-manager/?utm_source=atom_feed" rel="related" type="text/html" title="My Own Configuration Manager" />
                <link href="https://yashagarwal.in/posts/2017/12/setting-up-alm-octane-with-docker-compose/?utm_source=atom_feed" rel="related" type="text/html" title="Setting up ALM Octane with Docker Compose" />
                <link href="https://yashagarwal.in/posts/2017/10/fixing-hindi-fonts-in-arch-linux/?utm_source=atom_feed" rel="related" type="text/html" title="Fixing Hindi Fonts in Arch Linux" />
                <link href="https://yashagarwal.in/posts/2017/03/mounting-ntfs-partitions-on-arch-linux/?utm_source=atom_feed" rel="related" type="text/html" title="Mounting NTFS partitions on Arch Linux" />
            
                <id>https://yashagarwal.in/posts/2018/01/arch-linux-installation-guide-part-1/</id>
            
            
                    <author>
                        <name>Yash Agarwal</name>
                    </author>
            <published>2018-01-24T21:49:05+05:30</published>
            <updated>2018-01-24T21:49:05+05:30</updated>
            
            
            <content type="html"><![CDATA[<p>Arch Linux is a Linux distribution known for its not-so-beginner-friendly command line installer, no ready-to-use system after installation and requirement of above average knowledge of command line. However, Arch Linux allows me to set up a system in my desired state in shortest possible time with least effort. This is why I keep coming back to Arch Linux even after some of its annoyances.</p>
<p>This guide is written primarily for my reference, as someone who has installed Arch Linux several times, I still can&rsquo;t remember all the installation steps perfectly. Most of the steps have been taken from <a href="https://wiki.archlinux.org/index.php/installation_guide">Arch wiki</a> and should work on other setups also.</p>
<div class="note">
    <div></div>
    
All the commands are run in root shell unless otherwise specified.

</div>
<h2 id="0-check-your-network-connection">0. Check your network connection</h2>
<p>If you are behind a captive portal, use <code>links</code> to open browser and login into your network. For WiFi connections, use <code>wifi-menu</code>. LAN connections should not require any setup. The boot environment should automatically detect any wired connections. After connecting, test your connection by pinging any website:
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">ping -c <span class="m">5</span> google.com</code></pre></div></p>
<h2 id="1-setup-ssh">1. Setup SSH</h2>
<p>This step is not mandatory, though I prefer to use this method to install Arch Linux, as it provides me the convenience of copying and pasting the commands directly from Arch wiki.</p>
<p>By default the Arch Linux <code>root</code> account password is empty. We need to set up a password for <code>root</code> account, which is needed for an SSH connection.
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">passwd</code></pre></div></p>
<p>Now we need to change the setting to permit <code>root</code> login via SSH in <code>/etc/ssh/sshd_config</code>. Check that <code>PermitRootLogin yes</code> is uncommented in this file. If this line is not present there, add this to the end. Now start the <code>sshd.service</code> by issuing the command
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo systemctl start sshd.service</code></pre></div></p>
<p>Also, note the IP address of the target machine by inspecting the output of the following command.
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">ip addr</code></pre></div></p>
<p><em>Pro tip:</em> One liner to get only the IP address
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">ip -o -4 addr show <span class="p">|</span> awk -F <span class="s1">&#39;[ /]+&#39;</span> <span class="s1">&#39;/global/ {print $4}&#39;</span></code></pre></div></p>
<p>Now on your host machine, connect to the target machine via SSH using the following command
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">ssh root@ip-address-of-target</code></pre></div></p>
<h2 id="2-partition-the-disks">2. Partition the disks</h2>
<p>If Windows 8 or above is already installed on your machine, then your hard disk is probably using <code>GPT</code> partitioning scheme. In that case, use <code>gdisk</code> to partition your hard disk. <del>If you use <code>fdisk</code> on a GPT partitioned HDD, there is a possibility of data loss.</del> <code>fdisk</code> understands <code>GPT</code> partitioning scheme also.[1]</p>
<p>My preferred setup is to have one root partition and one home partition and use <code>EFI</code> partition created by Windows to install boot-loader. The root and home partition will be formatted using <code>ext4</code> file-system and the <code>EFI</code> partition should be formatted using <code>FAT32</code> file-system.</p>
<p>For this guide, I am assuming that the <code>EFI</code> partition is <code>sda1</code>, root partition is <code>sda9</code> and home partition is <code>sda10</code>.</p>
<p>Now to format the partitions with <code>ext4</code> file-system:
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">mkfs.ext4 /dev/sda9
mkfs.ext4 /dev/sda10</code></pre></div></p>
<h2 id="3-mount-the-partitions">3. Mount the partitions</h2>
<p>Now mount the root partition (<code>sda9</code> in this case) to <code>/mnt</code>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">mount /dev/sda9 /mnt</code></pre></div></p>
<p>If you have created any other partitions in previous steps, mount them at appropriate locations.
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">mkdir /mnt/home
mount /dev/sda10 /mnt/home

mkdir /mnt/boot
mount /dev/sda1 /mnt/boot</code></pre></div></p>
<h2 id="4-install-the-base-file-system">4. Install the base file-system</h2>
<p>To install the base system and some development tools, issue the following command.
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">pacstrap /mnt base base-devel</code></pre></div></p>
<p>This will take a while to download and install. After it finishes, it will give you a bare-bone Arch Linux system with just the tools required to run a Linux distribution, no other software is installed.</p>
<h2 id="5-generate-etcfstab">5. Generate /etc/fstab</h2>
<p>The <code>/etc/fstab</code> file stores the information about file systems of partitions and how to mount the partitions on system boot up. To generate this file, issue the following command:
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</code></pre></div>
If you prefer to use partition labels (sda1, sda9 etc.) instead of UUID, then use <code>-L</code> flag in place of <code>-U</code>.</p>
<h2 id="6-chroot-into-the-system">6. chroot into the system</h2>
<p>From the <a href="https://wiki.archlinux.org/index.php/Change_root">Arch wiki</a>:</p>
<blockquote>
<p>Chroot is an operation that changes the apparent root directory for the current running process and their children. A program that is run in such a modified environment cannot access files and commands outside that environmental directory tree. This modified environment is called a chroot jail.</p>
</blockquote>
<p>At this step, we will go to the root of the newly installed system at <code>/mnt</code> and pretend as if we are logged into this system.
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">arch-chroot /mnt</code></pre></div></p>
<h2 id="7-setup-the-time-zone-locale-and-hostname">7. Setup the time zone, locale, and hostname</h2>
<p>Browse the <code>/use/share/zoneinfo</code> directory to find your location entries. My location is India, so I will use this command.
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">ln -sf /usr/share/zoneinfo/Asia/Kolkata /etc/localtime</code></pre></div></p>
<p>To set the hardware clock:
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">hwclock --systohc</code></pre></div></p>
<p>To set the locale for your system, open the <code>/etc/locale.gen</code> file and uncomment your language. or run the following command for the default <code>en_US.UTF-8 UTF-8</code>.
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nv">LANG</span><span class="o">=</span>C perl -i -pe <span class="s1">&#39;s/#(en_US.UTF)/$1/&#39;</span> /etc/locale.gen</code></pre></div>
Now generate the localization with
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">locale-gen</code></pre></div></p>
<p>Then set the <code>LANG</code> variable in <code>/etc/locale.conf</code> accordingly, or run the following command:
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">localectl set-locale <span class="nv">LANG</span><span class="o">=</span><span class="s2">&#34;en_US.UTF-8&#34;</span></code></pre></div></p>
<p>To set the hostname for your machine:
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">hostnamectl set-hostname your-host-name</code></pre></div></p>
<p>To allow other machines to address the host by name, it is necessary to edit the <code>/etc/hosts</code> file to look like this:
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">127.0.0.1    localhost.localdomain          localhost
::1          localhost.localdomain          localhost
127.0.1.1    your-host-name.localdomain     your-host-name</code></pre></div></p>
<h2 id="8-create-user-account">8. Create user account</h2>
<p>Before creating user account, set password for <code>root</code> account
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">passwd</code></pre></div></p>
<p>Now create a local account for your user
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">useradd -m -G wheel -s /bin/bash your-user-name</code></pre></div></p>
<p>This will set up your user account, create a home directory for your user, set the default shell to <code>bash</code> and add your user to <code>wheel</code> group, which is necessary to gain <code>sudo</code> access in later steps.</p>
<p>Set password for your user.
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">passwd your-user-name</code></pre></div></p>
<h2 id="9-enable-sudo-access">9. Enable sudo access</h2>
<p>This allows you to use root privileges without using the root account. To enable this, first open <code>/etc/sudoers</code> file
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">nano /etc/sudoers</code></pre></div></p>
<p>Now uncomment the following line to enable <code>root</code> privilege for all the users inside <code>wheel</code> group:
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># %wheel ALL=(ALL) ALL</span></code></pre></div></p>
<p>Now you can safely disable root account
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">passwd -l root

<span class="c1"># login into your user account</span>
su your-user-name</code></pre></div></p>
<p>From this point onwards, it is necessary to append <code>sudo</code> to any command that requires <code>root</code> privileges.</p>
<h2 id="10-install-bootloader">10. Install bootloader</h2>
<p>My preferred bootloader of choice is <code>grub</code>. To install <code>grub</code>, we need to install following packages.
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo pacman -S grub efibootmgr</code></pre></div></p>
<p>Now install <code>grub</code> with the following command.
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo grub-install --target<span class="o">=</span>x86_64-efi --efi-directory<span class="o">=</span>/boot --bootloader-id<span class="o">=</span>arch</code></pre></div></p>
<p>Here <code>--efi-directory</code> is the folder where the <code>EFI</code> partition is mounted <a href="#step3">step 3</a> and <code>--bootloader-id</code> is the label that will appear in your UEFI boot menu entry.</p>
<p>This particular step is specific to my machine&rsquo;s hardware, you might not need to run this step. I need to add <code>pci=nommconf</code> to my kernel boot parameters in <code>/etc/default/grub</code>, otherwise <code>tty</code> prints error messages continuously.</p>
<p>Now run to generate grub configuration file.
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo grub-mkconfig -o /boot/grub/grub.cfg</code></pre></div></p>
<p>If you encounter any errors related to <code>lvm</code> during installation of grub, then follow these steps.
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># come out of chroot</span>
<span class="nb">exit</span>
mkdir /mnt/hostrun
mount --bind /run /mnt/hostrun

<span class="c1"># back to chroot</span>
arch-chroot /mnt
mkdir /run/lvm
mount --bind /hostrun/lvm /run/lvm</code></pre></div></p>
<p>Now you can install <code>grub</code> without any errors.</p>
<h2 id="11-configure-the-network">11. Configure the network</h2>
<p>By default, your current system cannot connect to the network in the current state. I prefer to use <a href="https://wiki.archlinux.org/index.php/NetworkManager">NetworkManager</a> for my network management, even when I am not using GNOME. For wireless networking, install the following additional packages.
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo pacman -S iw wpa_supplicant dialog networkmanager network-manager-applet dhclient</code></pre></div></p>
<p><code>NetworkManager</code> supports basic DHCP configuration. For full support, I have installed <code>dhclient</code>. <code>NetworkManager</code> also supports automatic wired connection detection and comes with curses based tool <code>nmtui</code> to setup wireless connection.</p>
<p>To enable NetworkManager to start at system startup
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo systemctl <span class="nb">enable</span> NetworkManager.service</code></pre></div></p>
<h2 id="12-reboot-now">12. Reboot now</h2>
<p>If you had performed the <code>lvm</code> troubleshooting steps during <code>grub</code> install, then
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">umount /run/lvm</code></pre></div></p>
<p>Now exit from <code>chroot</code> by typing <code>exit</code> in the shell. Unmount all the mounted partitions with:
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">umount -R /mnt</code></pre></div></p>
<p>Finally, reboot your machine by typing <code>reboot</code> and remove the installation USB drive. If you are not able to boot into your system at this point, boot from the installation media again and attempt to fix the installation.</p>
<p>If you can see a terminal with a prompt for your username, congratulations! You have completed the first step towards building your own system.</p>
<p>I will be writing about making your system usable and stable in the <a href="/posts/2018/01/arch-linux-installation-guide-part-2/">second</a> part of this guide.</p>
<p>Hope you enjoyed the post. Stay tuned :)</p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://yashagarwal.in/categories/hacks" term="hacks" label="Hacks" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://yashagarwal.in/series/arch-linux-installation" term="arch-linux-installation" label="Arch Linux Installation" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://yashagarwal.in/tags/configuration" term="configuration" label="configuration" />
                             
                                <category scheme="https://yashagarwal.in/tags/arch-linux" term="arch-linux" label="Arch Linux" />
                             
                                <category scheme="https://yashagarwal.in/tags/i3" term="i3" label="i3" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[My Own Configuration Manager]]></title>
            <link href="https://yashagarwal.in/posts/2018/01/my-own-configuration-manager/?utm_source=atom_feed" rel="alternate" type="text/html" />
            
            
                <id>https://yashagarwal.in/posts/2018/01/my-own-configuration-manager/</id>
            
            
                    <author>
                        <name>Yash Agarwal</name>
                    </author>
            <published>2018-01-21T11:23:23+05:30</published>
            <updated>2018-01-21T11:23:23+05:30</updated>
            
            
            <content type="html"><![CDATA[<p>I have been using Linux since I was in my second year of undergraduate. My experiments with the dotfiles (configuration files) also started at the same time. For the uninformed, in Linux, it is common to configure a lot of settings and configurations within dotfiles. Dotfiles are files in a Linux user&rsquo;s home directory that begin with a dot or a full-stop character. This dot indicates to the operating system that these files are used to store the settings of programs like <code>vim</code> or shells like <code>bash</code> or <code>fish</code> to name a few.</p>
<p>In the beginning, I was keeping a manual backup of my dotfiles by copying them to a folder from time to time. But the list soon started getting huge, that it became complicated for me to keep track of the changes. Then I moved to symlinks. I started symlinking all the dotfiles from my folder to their usual locations. This setup worked perfectly fine, but as my collection of dotfiles grew, It became very cumbersome for me to symlink every dotfile manually.</p>
<p>I also tried a few tools built for this particular purpose. Some of them are <code>vcsh</code>, <code>mr</code>, and <code>stow</code>. These tools work just fine, but I was not willing to learn new tools just for maintaining my dotfiles. At last, I decided to write my tool to solve this problem. This way, there will not be any external dependency, and this tool will also become part of my dotfiles.</p>
<h2 id="design">Design</h2>
<p>The tool, in itself, is inspired by the <a href="https://en.wikipedia.org/wiki/Configuration_file#UNIX/Linux">UNIX tradition</a> of keeping configuration files for the settings of the programs. This configuration system uses a JSON formatted dotfile.</p>
<p><a href="https://github.com/yashhere/ConMan">Here</a> is the source code for the configuration system. Let&rsquo;s have a look at the file structure of the repository.
<div class="highlight"><pre class="chroma"><code class="language-text" data-lang="text">|-- .backups
|   |-- 08-01-2018-15:47
|   |-- 08-01-2018-19:30
|   |-- ......
|-- configure.py
|-- current_status
|-- dotfiles
|   |-- dunst
|   |-- gtk-3.0
|   |-- i3
|   |-- ......
|-- dotfiles.json
|-- LICENSE
`-- README.md</code></pre></div></p>
<p>During the initial setup, you need to edit the <code>dotfiles.json</code> file to suit your setup. A relevant section of the JSON file is given below.
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&#34;pre&#34;</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;cloning repository&#34;</span><span class="p">,</span>
      <span class="nt">&#34;command&#34;</span><span class="p">:</span> <span class="s2">&#34;git&#34;</span><span class="p">,</span>
      <span class="nt">&#34;subcommand&#34;</span><span class="p">:</span> <span class="s2">&#34;clone&#34;</span><span class="p">,</span>
      <span class="nt">&#34;argument&#34;</span><span class="p">:</span> <span class="s2">&#34;https://github.com/yashhere/dotfiles.git&#34;</span>
    <span class="p">}</span>
  <span class="p">],</span>
  <span class="nt">&#34;linking&#34;</span><span class="p">:</span> <span class="p">[</span>
      <span class="p">{</span>
        <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;bashrc&#34;</span><span class="p">,</span>
        <span class="nt">&#34;src&#34;</span><span class="p">:</span> <span class="s2">&#34;dotfiles/.bashrc&#34;</span><span class="p">,</span>
        <span class="nt">&#34;dest&#34;</span><span class="p">:</span> <span class="s2">&#34;.bashrc&#34;</span>
      <span class="p">},</span>
      <span class="p">{</span>
        <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;bash_profile&#34;</span><span class="p">,</span>
        <span class="nt">&#34;src&#34;</span><span class="p">:</span> <span class="s2">&#34;dotfiles/.bash_profile&#34;</span><span class="p">,</span>
        <span class="nt">&#34;dest&#34;</span><span class="p">:</span> <span class="s2">&#34;.bash_profile&#34;</span>
      <span class="p">},</span>
      <span class="p">{</span>
        <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;profile&#34;</span><span class="p">,</span>
        <span class="nt">&#34;src&#34;</span><span class="p">:</span> <span class="s2">&#34;dotfiles/.profile&#34;</span><span class="p">,</span>
        <span class="nt">&#34;dest&#34;</span><span class="p">:</span> <span class="s2">&#34;.profile&#34;</span>
      <span class="p">},</span>
      <span class="p">{</span>
        <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;i3&#34;</span><span class="p">,</span>
        <span class="nt">&#34;src&#34;</span><span class="p">:</span> <span class="s2">&#34;dotfiles/i3&#34;</span><span class="p">,</span>
        <span class="nt">&#34;dest&#34;</span><span class="p">:</span> <span class="s2">&#34;.config/i3&#34;</span>
      <span class="p">},</span>
  <span class="p">]</span>
<span class="p">}</span></code></pre></div></p>
<p>As can be seen, the JSON file has an array variable <code>linking</code>, which can be used to set the paths for each configuration file and folder. The <code>configure.py</code> script also requires a <code>dotfiles</code> folder to be present in the current directory. The folder can be created manually, or if it is already version controlled on GitHub, then the script can clone it. For that, you can edit the <code>pre</code> section in the <code>dotfiles.json</code>.</p>
<p>Your dotfiles and config folders go inside the <code>dotfiles</code> folder. You need to copy all your current configurations to this folder to get started.</p>
<p>So, how does the script know where a file or folder will be linked? Simple, you need to edit the <code>dotfiles.json</code> file and add source and destination locations. For example, if you want to set up configurations of <code>i3</code> to its original location (which is, <code>$HOME/.config/i3</code>), then you need to create a new JSON object in the <code>linking</code> array, like this.
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;i3&#34;</span><span class="p">,</span>
  <span class="nt">&#34;src&#34;</span><span class="p">:</span> <span class="s2">&#34;dotfiles/i3&#34;</span><span class="p">,</span>
  <span class="nt">&#34;dest&#34;</span><span class="p">:</span> <span class="s2">&#34;.config/i3&#34;</span>
<span class="p">}</span></code></pre></div></p>
<p>Here the <code>name</code> is used to identify the configuration file, the <code>src</code> parameter is the location of your config file/folder in the dotfiles directory, and the <code>dest</code> parameter is the final destination of the file/folder. Keen observers would notice that I have not used <code>$HOME</code> anywhere. It is understood that the configuration will go to the current user&rsquo;s home directory. So the <code>dest</code> is relative to the user&rsquo;s home directory, and <code>src</code> is relative to the directory from which the <code>configure.py</code> script is executed.</p>
<p>And you are done! Now, run <code>configure.py</code>, and all your dotfiles and folders will be symlinked to their correct place.</p>
<p>The <code>current_status</code> file saves all the symlink locations that are being managed by the script, for your easy reference and to debug any error.</p>
<h2 id="behind-the-scenes">Behind the Scenes</h2>
<p>A lot to cool things happen behind the scenes. The script will check if any previous symlink exists at the given <code>dest</code> location. It removes any symlinks to avoid redundancy. If the dest already has any dotfile or folder, then it backs it up in the <code>.backups</code> under today&rsquo;s date and time before replacing it with a symlink to avoid any potential data loss.</p>
<p>I hope the article was useful. Cheers 😄</p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://yashagarwal.in/categories/technical" term="technical" label="Technical" />
                            
                        
                    
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://yashagarwal.in/tags/configuration" term="configuration" label="configuration" />
                             
                                <category scheme="https://yashagarwal.in/tags/python" term="python" label="python" />
                             
                                <category scheme="https://yashagarwal.in/tags/github" term="github" label="github" />
                            
                        
                    
                
            
        </entry>
    
</feed>
