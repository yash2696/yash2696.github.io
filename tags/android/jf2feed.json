{"author":{"name":"Yash Agarwal","type":"card","url":"https://yashagarwal.in/"},"children":[{"content":{"html":"\u003cp\u003eThis post is a result of my experimentation with Drozer. Drozer is a security testing framework for Android, developed by MWR Labs. According the Drozer\u0026rsquo;s official \u003ca href=\"https://labs.mwrinfosecurity.com/assets/BlogFiles/mwri-drozer-user-guide-2015-03-23.pdf\"\u003edocumentation\u003c/a\u003e:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eDrozer allows you to assume the role of an Android app and interact with other apps. It can do anything that an\ninstalled application can do, such as making use of Android\u0026rsquo;s Inter-Process Communication (IPC) mechanism and\ninteract with the underlying operating system.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eDrozer modules are written in Python. The module performs operations on an Android device with the help of an agent app installed on the device. The agent app, by default, has permission to use the internet connection only. This permission is required so that the agent can open a ServerSocket on port 31415 (default). The agent will listen for the incoming connections on this port. The console will connect to the agent on this port.\u003c/p\u003e\n\u003cp\u003eDrozer modules are inherited Python classes. The parent class is defined in \u003ca href=\"https://github.com/mwrlabs/drozer/blob/develop/src/drozer/modules/base.py\"\u003edrozer.modules.Module\u003c/a\u003e. Drozer console provides commands to create a custom module repository, which is very useful for the local development of modules.\u003c/p\u003e\n\u003cp\u003eYou can read more about the structure of a Drozer module \u003ca href=\"https://github.com/mwrlabs/drozer/wiki/Writing-a-Module\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eI will explain all the critical parts of a Drozer module with the help of a sample module. I will be implementing a module to record and save the sound from the inbuilt mic of an Android device.\u003c/p\u003e\n\u003cp\u003eI initialized a new module repository using the Drozer console using the following command.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003edz\u0026gt; module repository create custom\nInitialised repository at custom.\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou will see a new directory \u003ccode\u003ecustom\u003c/code\u003e in your current directory after executing above command. Navigate to this directory and create a new folder with any name. I prefer to name this folder same as my module name. In this folder, create a file \u003ccode\u003e__init__.py\u003c/code\u003e. Drozer identifies the folder as a module directory if \u003ccode\u003e__init__.py\u003c/code\u003e is present in the directory. Now you can implement your module in this directory.\u003c/p\u003e\n\u003cp\u003eTo begin implementing our module, create a new file \u003ccode\u003erecord.py\u003c/code\u003e in the module directory. Drozer has many different utility classes, which we can use to simplify our implementation. To use these utility classes (\u003ca href=\"https://github.com/mwrlabs/drozer/wiki/Using-mixins\"\u003emixins\u003c/a\u003e), our module class must extend \u003cem\u003emixins\u003c/em\u003e using Python\u0026rsquo;s multiple inheritance feature.\u003c/p\u003e\n\u003cp\u003eWe first need to import all the required mixins. The mixins are stored in \u003ccode\u003emodules.common\u003c/code\u003e package in the Drozer source tree. After importing mixins and extending our class, the code will look like this. You can also import any other standard Python module here.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003edrozer.modules\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003ecommon\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eModule\u003c/span\u003e\n\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003eos\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nn\"\u003esubprocess\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nn\"\u003etime\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eRecord\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eModule\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecommon\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eShell\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecommon\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFileSystem\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecommon\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eClassLoader\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow we will set up the metadata for our module. This information will help Drozer to organize and list our module correctly. We can define the name, description, author, date, license, path, permissions, and examples. Most of the available options are self-explanatory. But \u003cem\u003epath\u003c/em\u003e and \u003cem\u003epermissions\u003c/em\u003e require some explanation.\u003c/p\u003e\n\u003cp\u003eThe \u003cem\u003epath\u003c/em\u003e variable defined here is an array that contains the values for the namespace of the module. Drozer supports separate namespaces for each module. We can combine similar modules in the same namespace using this feature.\u003c/p\u003e\n\u003cp\u003eThe \u003cem\u003epermissions\u003c/em\u003e array variable contains all the permissions that this module will require for proper functioning. For example, our module will need permission to record audio on the device to work correctly. So we define this permission in the permissions array. The agent app on the device is required to have this permission. Otherwise, our module will throw an error.\u003c/p\u003e\n\u003cp\u003eThe following snippet shows the metadata section of our module.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Record sound from the inbuilt mic of an Android device.\u0026#34;\u003c/span\u003e\n\u003cspan class=\"n\"\u003edescription\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Record sound from the inbuilt mic of an Android device. The default save format is 3GPP. Relies on the agent having the RECORD_AUDIO permission.\u0026#34;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eexamples\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u0026#34;\n\u003c/span\u003e\u003cspan class=\"s2\"\u003edz\u0026gt; run custom.record.record\n\u003c/span\u003e\u003cspan class=\"s2\"\u003eSetting up recorder configuration...\n\u003c/span\u003e\u003cspan class=\"s2\"\u003eRecording started\n\u003c/span\u003e\u003cspan class=\"s2\"\u003ePress any key to stop recording\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003eRecording stopped...downloading recording\n\u003c/span\u003e\u003cspan class=\"s2\"\u003eScreenshot captured. Saved at location /home/yash/work/drozer/1524201166.3gp\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eauthor\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Yash Agarwal\u0026#34;\u003c/span\u003e\n\u003cspan class=\"n\"\u003edate\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;2018-04-14\u0026#34;\u003c/span\u003e\n\u003cspan class=\"n\"\u003elicense\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;BSD (3 clause)\u0026#34;\u003c/span\u003e\n\u003cspan class=\"n\"\u003epath\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;custom\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;record\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"n\"\u003epermissions\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;android.permission.RECORD_AUDIO\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;com.mwr.dz.permissions.GET_CONTEXT\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow we can start implementing the heart of our module, the \u003ccode\u003eexecute()\u003c/code\u003e function. This function will be invoked by Drozer when the module is run. Every action that the module is expected to perform should be implemented in this method.\u003c/p\u003e\n\u003cp\u003eThe implementation of \u003ccode\u003eexecute()\u003c/code\u003e method is slightly tricky and requires an understanding of different classes and methods provided by the Android API. As we are writing a module to record sound, we will look into the documentation of \u003ca href=\"https://developer.android.com/guide/topics/media/mediarecorder.html\"\u003eMediaRecorder\u003c/a\u003e class. Before reading further, go through the documentation about the use of reflection API in Drozer \u003ca href=\"https://github.com/mwrlabs/drozer/wiki/Using-Reflection\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eexecute()\u003c/code\u003e function is given below.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eexecute\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003earguments\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e# unique file names\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efilename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e()))\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;.3gp\u0026#34;\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e# current working directory of Drozer console\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecwd\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eworkingDir\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e# Magic of Reflection API !!!\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erecorder\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;android.media.MediaRecorder\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eAudioSource\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eklass\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;android.media.MediaRecorder$AudioSource\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eOutputFormat\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eklass\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;android.media.MediaRecorder$OutputFormat\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eAudioEncoder\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eklass\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;android.media.MediaRecorder$AudioEncoder\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003erecorder\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esetAudioSource\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eAudioSource\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eMIC\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erecorder\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esetOutputFormat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eOutputFormat\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eTHREE_GPP\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erecorder\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esetAudioEncoder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eAudioEncoder\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eAMR_NB\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erecorder\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esetOutputFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"si\"\u003e%s\u003c/span\u003e\u003cspan class=\"s2\"\u003e/recording.3gp\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"n\"\u003ecwd\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erecorder\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprepare\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\n    \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estdout\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Recording started\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erecorder\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eraw_input\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Press any key to stop recording\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erecorder\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estop\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estdout\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Recording stopped...\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erecorder\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereset\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erecorder\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erelease\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e# Download file from device to PC\u003c/span\u003e\n    \u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edownloadFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"si\"\u003e%s\u003c/span\u003e\u003cspan class=\"s2\"\u003e/recording.3gp\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"n\"\u003ecwd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efilename\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"bp\"\u003eNone\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estdout\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Recording saved\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estderr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Recording could not be fetched from the device.\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eI followed the sample use case given on \u003ca href=\"https://developer.android.com/reference/android/media/MediaRecorder.html\"\u003ethis\u003c/a\u003e page, to instantiate and use the \u003cem\u003eMediaRecorder\u003c/em\u003e object.\u003c/p\u003e\n\u003cp\u003eAfter the recording is finished, we want to save this recorded media file to our computer. Drozer provides a method, \u003ca href=\"https://github.com/mwrlabs/drozer/blob/c92d74024c653b6dc7de3378a24e51d276ae2c62/src/drozer/modules/common/file_system.py\"\u003edownloadFile\u003c/a\u003e exactly for this purpose. This method returns the length of the data downloaded on success and \u003ccode\u003eNone\u003c/code\u003e otherwise. We can use this information to test the success or failure of the fetching of the recording.\u003c/p\u003e\n\u003cp\u003eThat\u0026rsquo;s all. We have successfully implemented a Drozer module which can record the sound on an Android device without the knowledge of the user. Do you smell something fishy here? The whole idea here depends on that particular \u003ccode\u003eandroid.permission.RECORD_AUDIO\u003c/code\u003e permission that our agent app had. It allowed our module to record without \u003cem\u003euser consent\u003c/em\u003e (actually, the user gave her consent unknowingly while installing agent app). Many apps nowadays ask for arbitrarily random permissions. Those permissions might not be related to the functionality of the app in any way, but because there is no method to install apps without granting these permissions, the users grant all permissions to these apps. That can be exploited very easily. This tutorial tried to show one of such exploitations.\u003c/p\u003e\n\u003cp\u003eHere are some exercises that you should try if you want to learn more about Drozer module development.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA module to initiate a call on a device.\u003c/li\u003e\n\u003cli\u003eA module to get the clipboard values on a device\u003c/li\u003e\n\u003cli\u003eTry finding a public exploit on Android forums such as XDA and implement that exploit as a Drozer module.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSlightly tougher one.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA module to terminate a call without user intervention (I do not know if it is possible to do this programmatically. If you implement this successfully, do let me know in the comments section.)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThanks for reading. Cheers :)\u003c/p\u003e\n","text":"This post is a result of my experimentation with Drozer. Drozer is a security testing framework for Android, developed by MWR Labs. According the Drozer\u0026rsquo;s official documentation:\n Drozer allows you to assume the role of an Android app and interact with other apps. It can do anything that an installed application can do, such as making use of Android\u0026rsquo;s Inter-Process Communication (IPC) mechanism and interact with the underlying operating system.\n Drozer modules are written in Python. The module performs operations on an Android device with the help of an agent app installed on the device. The agent app, by default, has permission to use the internet connection only. This permission is required so that the agent can open a ServerSocket on port 31415 (default). The agent will listen for the incoming connections on this port. The console will connect to the agent on this port.\nDrozer modules are inherited Python classes. The parent class is defined in drozer.modules.Module. Drozer console provides commands to create a custom module repository, which is very useful for the local development of modules.\nYou can read more about the structure of a Drozer module here.\nI will explain all the critical parts of a Drozer module with the help of a sample module. I will be implementing a module to record and save the sound from the inbuilt mic of an Android device.\nI initialized a new module repository using the Drozer console using the following command.\ndz\u0026gt; module repository create custom Initialised repository at custom. You will see a new directory custom in your current directory after executing above command. Navigate to this directory and create a new folder with any name. I prefer to name this folder same as my module name. In this folder, create a file __init__.py. Drozer identifies the folder as a module directory if __init__.py is present in the directory. Now you can implement your module in this directory.\nTo begin implementing our module, create a new file record.py in the module directory. Drozer has many different utility classes, which we can use to simplify our implementation. To use these utility classes (mixins), our module class must extend mixins using Python\u0026rsquo;s multiple inheritance feature.\nWe first need to import all the required mixins. The mixins are stored in modules.common package in the Drozer source tree. After importing mixins and extending our class, the code will look like this. You can also import any other standard Python module here.\nfrom drozer.modules import common, Module import os, subprocess, time class Record(Module, common.Shell, common.FileSystem, common.ClassLoader): Now we will set up the metadata for our module. This information will help Drozer to organize and list our module correctly. We can define the name, description, author, date, license, path, permissions, and examples. Most of the available options are self-explanatory. But path and permissions require some explanation.\nThe path variable defined here is an array that contains the values for the namespace of the module. Drozer supports separate namespaces for each module. We can combine similar modules in the same namespace using this feature.\nThe permissions array variable contains all the permissions that this module will require for proper functioning. For example, our module will need permission to record audio on the device to work correctly. So we define this permission in the permissions array. The agent app on the device is required to have this permission. Otherwise, our module will throw an error.\nThe following snippet shows the metadata section of our module.\nname = \u0026#34;Record sound from the inbuilt mic of an Android device.\u0026#34; description = \u0026#34;Record sound from the inbuilt mic of an Android device. The default save format is 3GPP. Relies on the agent having the RECORD_AUDIO permission.\u0026#34; examples = \u0026#34;\u0026#34;\u0026#34; dz\u0026gt; run custom.record.record Setting up recorder configuration... Recording started Press any key to stop recording Recording stopped...downloading recording Screenshot captured. Saved at location /home/yash/work/drozer/1524201166.3gp \u0026#34;\u0026#34;\u0026#34; author = \u0026#34;Yash Agarwal\u0026#34; date = \u0026#34;2018-04-14\u0026#34; license = \u0026#34;BSD (3 clause)\u0026#34; path = [\u0026#34;custom\u0026#34;, \u0026#34;record\u0026#34;] permissions = [\u0026#34;android.permission.RECORD_AUDIO\u0026#34;, \u0026#34;com.mwr.dz.permissions.GET_CONTEXT\u0026#34;] Now we can start implementing the heart of our module, the execute() function. This function will be invoked by Drozer when the module is run. Every action that the module is expected to perform should be implemented in this method.\nThe implementation of execute() method is slightly tricky and requires an understanding of different classes and methods provided by the Android API. As we are writing a module to record sound, we will look into the documentation of MediaRecorder class. Before reading further, go through the documentation about the use of reflection API in Drozer here.\nThe execute() function is given below.\ndef execute(self, arguments): # unique file names filename = str(int(time.time())) + \u0026#34;.3gp\u0026#34; # current working directory of Drozer console cwd = self.workingDir() # Magic of Reflection API !!! recorder = self.new(\u0026#34;android.media.MediaRecorder\u0026#34;) AudioSource = self.klass(\u0026#34;android.media.MediaRecorder$AudioSource\u0026#34;) OutputFormat = self.klass(\u0026#34;android.media.MediaRecorder$OutputFormat\u0026#34;) AudioEncoder = self.klass(\u0026#34;android.media.MediaRecorder$AudioEncoder\u0026#34;) recorder.setAudioSource(AudioSource.MIC) recorder.setOutputFormat(OutputFormat.THREE_GPP) recorder.setAudioEncoder(AudioEncoder.AMR_NB) recorder.setOutputFile(\u0026#34;%s/recording.3gp\u0026#34; % cwd) recorder.prepare() self.stdout.write(\u0026#34;Recording started\\n\u0026#34;) recorder.start() raw_input(\u0026#34;Press any key to stop recording\\n\u0026#34;) recorder.stop() self.stdout.write(\u0026#34;Recording stopped...\\n\u0026#34;) recorder.reset() recorder.release() # Download file from device to PC length = self.downloadFile(\u0026#34;%s/recording.3gp\u0026#34; % cwd, filename) if length != None: self.stdout.write(\u0026#34;Recording saved\\n\u0026#34;) else: self.stderr.write(\u0026#34;Recording could not be fetched from the device.\\n\u0026#34;) I followed the sample use case given on this page, to instantiate and use the MediaRecorder object.\nAfter the recording is finished, we want to save this recorded media file to our computer. Drozer provides a method, downloadFile exactly for this purpose. This method returns the length of the data downloaded on success and None otherwise. We can use this information to test the success or failure of the fetching of the recording.\nThat\u0026rsquo;s all. We have successfully implemented a Drozer module which can record the sound on an Android device without the knowledge of the user. Do you smell something fishy here? The whole idea here depends on that particular android.permission.RECORD_AUDIO permission that our agent app had. It allowed our module to record without user consent (actually, the user gave her consent unknowingly while installing agent app). Many apps nowadays ask for arbitrarily random permissions. Those permissions might not be related to the functionality of the app in any way, but because there is no method to install apps without granting these permissions, the users grant all permissions to these apps. That can be exploited very easily. This tutorial tried to show one of such exploitations.\nHere are some exercises that you should try if you want to learn more about Drozer module development.\n A module to initiate a call on a device. A module to get the clipboard values on a device Try finding a public exploit on Android forums such as XDA and implement that exploit as a Drozer module.  Slightly tougher one.\n A module to terminate a call without user intervention (I do not know if it is possible to do this programmatically. If you implement this successfully, do let me know in the comments section.)  Thanks for reading. Cheers :)\n"},"name":"Writing Drozer Modules","published":"2018-05-13T17:10:13+05:30","summary":"This post is a result of my experimentation with Drozer. Drozer is a security testing framework for Android, developed by MWR Labs. According the Drozer\u0026rsquo;s official documentation:\n Drozer allows you to assume the role of an Android app and interact with other apps. It can do anything that an installed application can do, such as making use of Android\u0026rsquo;s Inter-Process Communication (IPC) mechanism and interact with the underlying operating system.","type":"entry","url":"https://yashagarwal.in/posts/2018/05/writing-drozer-modules/"}],"name":"android","type":"feed","url":"https://yashagarwal.in/tags/android/"}