{"author":{"name":"Yash Agarwal","type":"card","url":"https://yashagarwal.in/"},"children":[{"content":{"html":"\n\n\n\n    \n\n    \n    \n\n    \n    \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe.min.css\" integrity=\"sha256-sCl5PUOGMLfFYctzDW3MtRib0ctyUvI9Qsmq2wXOeBY=\" crossorigin=\"anonymous\" /\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/default-skin/default-skin.min.css\" integrity=\"sha256-BFeI1V+Vh1Rk37wswuOYn5lsTcaU96hGaI7OUVCLjPc=\" crossorigin=\"anonymous\" /\u003e\n\n    \n    \u003clink rel=\"stylesheet\" href=\"/css/photoswipe.min.d780348a887d97b4d6cc664301a2941706e4a02aeb1533524fcce3b7b9b64b4f.css\"\u003e\n\n    \n\n    \n    \u003cdiv class=\"pswp\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\"\u003e\n        \n        \u003cdiv class=\"pswp__bg\"\u003e\u003c/div\u003e\n        \n        \u003cdiv class=\"pswp__scroll-wrap\"\u003e\n            \n            \u003cdiv class=\"pswp__container\"\u003e\n                \u003cdiv class=\"pswp__item\"\u003e\u003c/div\u003e\n                \u003cdiv class=\"pswp__item\"\u003e\u003c/div\u003e\n                \u003cdiv class=\"pswp__item\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n            \n            \u003cdiv class=\"pswp__ui pswp__ui--hidden\"\u003e\n                \u003cdiv class=\"pswp__top-bar\"\u003e\n                    \n                    \u003cdiv class=\"pswp__counter\"\u003e\u003c/div\u003e\n                    \u003cbutton class=\"pswp__button pswp__button--close\" title=\"Close (Esc)\"\u003e\u003c/button\u003e\n                    \u003cbutton class=\"pswp__button pswp__button--share\" title=\"Share\"\u003e\u003c/button\u003e\n                    \u003cbutton class=\"pswp__button pswp__button--fs\" title=\"Toggle fullscreen\"\u003e\u003c/button\u003e\n                    \u003cbutton class=\"pswp__button pswp__button--zoom\" title=\"Zoom in/out\"\u003e\u003c/button\u003e\n                    \n                    \n                    \u003cdiv class=\"pswp__preloader\"\u003e\n                        \u003cdiv class=\"pswp__preloader__icn\"\u003e\n                            \u003cdiv class=\"pswp__preloader__cut\"\u003e\n                                \u003cdiv class=\"pswp__preloader__donut\"\u003e\u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"pswp__share-modal pswp__share-modal--hidden pswp__single-tap\"\u003e\n                    \u003cdiv class=\"pswp__share-tooltip\"\u003e\u003c/div\u003e\n                \u003c/div\u003e\n                \u003cbutton class=\"pswp__button pswp__button--arrow--left\" title=\"Previous (arrow left)\"\u003e\n                \u003c/button\u003e\n                \u003cbutton class=\"pswp__button pswp__button--arrow--right\" title=\"Next (arrow right)\"\u003e\n                \u003c/button\u003e\n                \u003cdiv class=\"pswp__caption\"\u003e\n                    \u003cdiv class=\"pswp__caption__center\"\u003e\u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n\u003cp\u003eRecently, I again migrated my blog from Pelican to Hugo. So till now, I have experimented with Wordpress, Jekyll, Pelican, and Hugo. Without any doubt, Hugo is the simplest to set up. This time, I have setup Hugo in Windows, as I think, in my system, I reinstall Windows OS much less frequently than the Linux. So that way, it will be less painful for me to set up the blog again.\u003c/p\u003e\n\u003cp\u003eIn this post, I will list all the process which I used to set up automatic deployment of Hugo generated site to Github pages using Wercker. In the beginning, I was trying to use Travis-CI, but then I read about Wercker somewhere. I was impressed with the integration of Wercker with Hugo and the availability of many its community-generated “steps” for the build and deploy process.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://gohugo.io/overview/introduction/\"\u003eHugo Docs\u003c/a\u003e already have a fantastic \u003ca href=\"https://gohugo.io/tutorials/automated-deployments/\"\u003edocumentation\u003c/a\u003e for setting up Hugo with Wercker, but it is outdated. Other documentations available on-line is also obsolete. Wercker has changed many functionalities in its platform, which made it difficult for me to set up things correctly. But after hours of trial and error cycle, I was able to build and deploy my static files successfully.\u003c/p\u003e\n\u003cp\u003eHere I would like to share the issues I encountered and the tweaks I’ve made. The source codes of this site can be found \u003ca href=\"https://github.com/yash2696/yash2696.github.io\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"project-pages-or-user-pages\"\u003eProject Pages or User Pages\u003c/h2\u003e\n\u003cp\u003eTwo types of sites are supported on Github Pages, User Site, and Project Site. User Sites will serve the files stored in the master branch of the repository \u003ccode\u003ehttps://github.com/user_name/user_name.github.io\u003c/code\u003e at the address \u003ccode\u003ehttps://user_name.github.io.\u003c/code\u003e For the Project sites, everything under the gh-pages will be served at the address \u003ccode\u003ehttps://repo_name.github.io\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eMy site is a User site, so I wanted all the static files to be saved in the master branch. As Hugo generates all the static files under \u003ccode\u003epublic\u003c/code\u003e directory, I needed another branch to store my source files. So my made a new branch \u003ccode\u003esource\u003c/code\u003e, which will save all the source files for my blog. Don’t forget to remove the \u003ccode\u003e.git\u003c/code\u003e folder from the theme folder. Otherwise, the build will fail at a later stage. You can try using the git submodule feature to avoid this issue. I created a repository \u003ccode\u003eyash2696.github.io\u003c/code\u003e in Github also.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003egit init                       \u003cspan class=\"c1\"\u003e#initialized git repository in site root\u003c/span\u003e\r\ngit checkout -b \u003cspan class=\"nb\"\u003esource\u003c/span\u003e         \u003cspan class=\"c1\"\u003e#created new branch source\u003c/span\u003e\r\ngit remote add origin https://github.com/yash2696/yash2696.github.io\r\ngit add .\r\ngit commit -m \u003cspan class=\"s2\"\u003e\u0026#34;Initial Commit\u0026#34;\u003c/span\u003e\r\ngit push origin source\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThen I initialized my master branch as a orphan branch.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003egit checkout --orphan master\r\ngit rm -rf .\r\nrm -f \u003cspan class=\"s1\"\u003e\u0026#39;.gitignore\u0026#39;\u003c/span\u003e\r\n\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;#Your repository name\u0026#34;\u003c/span\u003e \u0026gt; README.md\r\ngit add README.md\r\ngit commit -a -m \u003cspan class=\"s2\"\u003e\u0026#34;Initial Commit\u0026#34;\u003c/span\u003e\r\ngit push origin master\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003ch2 id=\"automatic-deployment-using-wrecker\"\u003eAutomatic deployment using Wrecker\u003c/h2\u003e\n\u003cp\u003eIt is straightforward to build a Hugo site. Invoke \u003ccode\u003ehugo\u003c/code\u003e command under your root directory, Hugo will create a public folder which will contain all your content, static files, etc. Then push this directory to Github, and voila, your site is up!\u003c/p\u003e\n\u003cp\u003eWhat if a single push to \u003ccode\u003esource\u003c/code\u003e branch can trigger all the process for you automatically. Here the magic of continuous integration(CI) comes into the picture. A free Wercker account can be easily created and hooked to the Github account and a new application from a chosen repository. After setting up everything, a push to the development branch will automatically trigger the Wercker. One of the most significant advantages of using Wercker is its extensive collection of user-made and well documented \u0026ldquo;steps\u0026rdquo;. In this post, I will use two steps, \u003ccode\u003ebuild hugo\u003c/code\u003e and \u003ccode\u003edeploy to Github\u003c/code\u003e.\u003c/p\u003e\n\n\n\n    \u003clink rel=\"stylesheet\" href=\"/css/hugo-easy-gallery.css\"\u003e\n    \n\n\n\u003cdiv class=\"box fancy-figure caption-position-bottom caption-effect-appear\"  itemscope itemtype=\"http://schema.org/ImageGallery\"\u003e\n    \u003cfigure  itemprop=\"associatedMedia\" itemscope itemtype=\"http://schema.org/ImageObject\"\u003e\n        \u003cdiv class=\"img\"\u003e\n            \u003cimg itemprop=\"thumbnail\" src=\"/images/2017-02-22/wercker-steps.png\" alt=\"Wercker → Registry → steps\"/\u003e\n        \u003c/div\u003e\n        \u003ca href=\"/images/2017-02-22/wercker-steps.png\" itemprop=\"contentUrl\"\u003e\u003c/a\u003e\n            \u003cfigcaption\u003e\n                    \u003cp\u003eWercker → Registry → steps\u003c/p\u003e\n            \u003c/figcaption\u003e\n    \u003c/figure\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThe first task is to create a \u003ccode\u003ewercker.yml\u003c/code\u003e file. It will tell Wercker which all actions, it should perform. Here is my \u003ca href=\"https://raw.githubusercontent.com/yash2696/yash2696.github.io/source/wercker.yml\"\u003ewercker.yml\u003c/a\u003e for reference. In this, I have used two pipelines, \u003cem\u003ebuild\u003c/em\u003e and \u003cem\u003edeploy\u003c/em\u003e. Please follow the official docs for the more detailed steps. I will list all the problems which I face while setting up things properly.\u003c/p\u003e\n\u003ch3 id=\"build\"\u003eBuild\u003c/h3\u003e\n\u003cp\u003eFollowing the official guide, I used this \u003ca href=\"https://github.com/ArjenSchwarz/wercker-step-hugo-build\"\u003estep\u003c/a\u003e to trigger Hugo to build HTML pages. I had already removed git repository information from the theme folder, so this step finished successfully. If you haven’t, you may add the following piece of code in your build step.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e- script:\r\n    name: install git\r\n    code: \u003cspan class=\"p\"\u003e|\u003c/span\u003e\r\n        apt-get update\r\n        apt-get install git -y\r\n    - script:\r\n        name: initialize git submodules\r\n        code: \u003cspan class=\"p\"\u003e|\u003c/span\u003e\r\n            git submodule update --init --recursive\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003ch3 id=\"deploy\"\u003eDeploy\u003c/h3\u003e\n\u003cp\u003eThere is no concept named \u0026ldquo;Add Deploy Target\u0026rdquo; in Wercker as of now. Most of the on-line tutorials follow this process which is outdated. Now Wercker uses a concept called \u0026ldquo;Workflows in Pipelines\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eFor new interface, even if you add a deploy stage in the \u003ccode\u003ewercker.yml\u003c/code\u003e, you will have to create a new pipeline \u003ccode\u003edeploy\u003c/code\u003e under the Workflows tab. After creating the pipeline, the \u0026ldquo;YML Pipeline name\u0026rdquo; must be set to the deploy stage name, which in this case is \u003ccode\u003edeploy\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIn \u003ccode\u003edeploy\u003c/code\u003e stage, I used this \u003ca href=\"https://app.wercker.com/applications/55af22c5f32b86a9290ec706/tab/details/\"\u003estep\u003c/a\u003e to deploy the built site to Github. Each pipeline starts from scratch, so for the deploy pipeline, the git package needs to be installed again. One also has to set up the environment variable \u003ccode\u003e$GIT_TOKEN\u003c/code\u003e to each pipeline, acquired from Github setting.\u003c/p\u003e\n\n\n\n\u003cdiv class=\"box fancy-figure caption-position-bottom caption-effect-appear\"  itemscope itemtype=\"http://schema.org/ImageGallery\"\u003e\n    \u003cfigure  itemprop=\"associatedMedia\" itemscope itemtype=\"http://schema.org/ImageObject\"\u003e\n        \u003cdiv class=\"img\"\u003e\n            \u003cimg itemprop=\"thumbnail\" src=\"/images/2017-02-22/wercker-pipeline.png\" alt=\"Wercker Pipeline\"/\u003e\n        \u003c/div\u003e\n        \u003ca href=\"/images/2017-02-22/wercker-pipeline.png\" itemprop=\"contentUrl\"\u003e\u003c/a\u003e\n            \u003cfigcaption\u003e\n                    \u003cp\u003eWercker Pipeline\u003c/p\u003e\n            \u003c/figcaption\u003e\n    \u003c/figure\u003e\n\u003c/div\u003e\n\n\u003cp\u003eYou need to generate a new access token for your deploy stage from Github settings.\n\n\n\n\u003cdiv class=\"box fancy-figure caption-position-bottom caption-effect-appear\"  itemscope itemtype=\"http://schema.org/ImageGallery\"\u003e\n    \u003cfigure  itemprop=\"associatedMedia\" itemscope itemtype=\"http://schema.org/ImageObject\"\u003e\n        \u003cdiv class=\"img\"\u003e\n            \u003cimg itemprop=\"thumbnail\" src=\"/images/2017-02-22/wercker-access-token.png\" alt=\"Github Access Token\"/\u003e\n        \u003c/div\u003e\n        \u003ca href=\"/images/2017-02-22/wercker-access-token.png\" itemprop=\"contentUrl\"\u003e\u003c/a\u003e\n            \u003cfigcaption\u003e\n                    \u003cp\u003eGithub Access Token\u003c/p\u003e\n            \u003c/figcaption\u003e\n    \u003c/figure\u003e\n\u003c/div\u003e\n\u003c/p\u003e\n\u003cp\u003eAfter adding the deploy stage, add the token you obtained from the Github to Environmental Variables in deploy pipeline.\u003c/p\u003e\n\n\n\n\u003cdiv class=\"box fancy-figure caption-position-bottom caption-effect-appear\"  itemscope itemtype=\"http://schema.org/ImageGallery\"\u003e\n    \u003cfigure  itemprop=\"associatedMedia\" itemscope itemtype=\"http://schema.org/ImageObject\"\u003e\n        \u003cdiv class=\"img\"\u003e\n            \u003cimg itemprop=\"thumbnail\" src=\"/images/2017-02-22/wercker-token.png\" alt=\"Wercker Token\"/\u003e\n        \u003c/div\u003e\n        \u003ca href=\"/images/2017-02-22/wercker-token.png\" itemprop=\"contentUrl\"\u003e\u003c/a\u003e\n            \u003cfigcaption\u003e\n                    \u003cp\u003eWercker Token\u003c/p\u003e\n            \u003c/figcaption\u003e\n    \u003c/figure\u003e\n\u003c/div\u003e\n\n\u003cp\u003eOn the next push to your development branch, Wercker will automatically build the site and deploy it on Github Pages.\u003c/p\u003e\n","text":"                         Recently, I again migrated my blog from Pelican to Hugo. So till now, I have experimented with Wordpress, Jekyll, Pelican, and Hugo. Without any doubt, Hugo is the simplest to set up. This time, I have setup Hugo in Windows, as I think, in my system, I reinstall Windows OS much less frequently than the Linux. So that way, it will be less painful for me to set up the blog again.\nIn this post, I will list all the process which I used to set up automatic deployment of Hugo generated site to Github pages using Wercker. In the beginning, I was trying to use Travis-CI, but then I read about Wercker somewhere. I was impressed with the integration of Wercker with Hugo and the availability of many its community-generated “steps” for the build and deploy process.\nHugo Docs already have a fantastic documentation for setting up Hugo with Wercker, but it is outdated. Other documentations available on-line is also obsolete. Wercker has changed many functionalities in its platform, which made it difficult for me to set up things correctly. But after hours of trial and error cycle, I was able to build and deploy my static files successfully.\nHere I would like to share the issues I encountered and the tweaks I’ve made. The source codes of this site can be found here.\nProject Pages or User Pages Two types of sites are supported on Github Pages, User Site, and Project Site. User Sites will serve the files stored in the master branch of the repository https://github.com/user_name/user_name.github.io at the address https://user_name.github.io. For the Project sites, everything under the gh-pages will be served at the address https://repo_name.github.io.\nMy site is a User site, so I wanted all the static files to be saved in the master branch. As Hugo generates all the static files under public directory, I needed another branch to store my source files. So my made a new branch source, which will save all the source files for my blog. Don’t forget to remove the .git folder from the theme folder. Otherwise, the build will fail at a later stage. You can try using the git submodule feature to avoid this issue. I created a repository yash2696.github.io in Github also.\ngit init #initialized git repository in site root\rgit checkout -b source #created new branch source\rgit remote add origin https://github.com/yash2696/yash2696.github.io\rgit add .\rgit commit -m \u0026#34;Initial Commit\u0026#34;\rgit push origin source Then I initialized my master branch as a orphan branch. git checkout --orphan master\rgit rm -rf .\rrm -f \u0026#39;.gitignore\u0026#39;\recho \u0026#34;#Your repository name\u0026#34; \u0026gt; README.md\rgit add README.md\rgit commit -a -m \u0026#34;Initial Commit\u0026#34;\rgit push origin master\nAutomatic deployment using Wrecker It is straightforward to build a Hugo site. Invoke hugo command under your root directory, Hugo will create a public folder which will contain all your content, static files, etc. Then push this directory to Github, and voila, your site is up!\nWhat if a single push to source branch can trigger all the process for you automatically. Here the magic of continuous integration(CI) comes into the picture. A free Wercker account can be easily created and hooked to the Github account and a new application from a chosen repository. After setting up everything, a push to the development branch will automatically trigger the Wercker. One of the most significant advantages of using Wercker is its extensive collection of user-made and well documented \u0026ldquo;steps\u0026rdquo;. In this post, I will use two steps, build hugo and deploy to Github.\n   Wercker → Registry → steps\n   The first task is to create a wercker.yml file. It will tell Wercker which all actions, it should perform. Here is my wercker.yml for reference. In this, I have used two pipelines, build and deploy. Please follow the official docs for the more detailed steps. I will list all the problems which I face while setting up things properly.\nBuild Following the official guide, I used this step to trigger Hugo to build HTML pages. I had already removed git repository information from the theme folder, so this step finished successfully. If you haven’t, you may add the following piece of code in your build step. - script:\rname: install git\rcode: |\rapt-get update\rapt-get install git -y\r- script:\rname: initialize git submodules\rcode: |\rgit submodule update --init --recursive\nDeploy There is no concept named \u0026ldquo;Add Deploy Target\u0026rdquo; in Wercker as of now. Most of the on-line tutorials follow this process which is outdated. Now Wercker uses a concept called \u0026ldquo;Workflows in Pipelines\u0026rdquo;.\nFor new interface, even if you add a deploy stage in the wercker.yml, you will have to create a new pipeline deploy under the Workflows tab. After creating the pipeline, the \u0026ldquo;YML Pipeline name\u0026rdquo; must be set to the deploy stage name, which in this case is deploy.\nIn deploy stage, I used this step to deploy the built site to Github. Each pipeline starts from scratch, so for the deploy pipeline, the git package needs to be installed again. One also has to set up the environment variable $GIT_TOKEN to each pipeline, acquired from Github setting.\n   Wercker Pipeline\n   You need to generate a new access token for your deploy stage from Github settings.    Github Access Token\n   After adding the deploy stage, add the token you obtained from the Github to Environmental Variables in deploy pipeline.\n   Wercker Token\n   On the next push to your development branch, Wercker will automatically build the site and deploy it on Github Pages.\n"},"name":"Setting up Hugo automatic deployment to Github with Wercker","published":"2017-02-22T13:37:56+05:30","summary":"Recently, I again migrated my blog from Pelican to Hugo. So till now, I have experimented with Wordpress, Jekyll, Pelican, and Hugo. Without any doubt, Hugo is the simplest to set up. This time, I have setup Hugo in Windows, as I think, in my system, I reinstall Windows OS much less frequently than the Linux.","type":"entry","url":"https://yashagarwal.in/posts/2017/02/setting-up-hugo-automatic-deployment-to-github-with-wercker/"}],"name":"Wercker","type":"feed","url":"https://yashagarwal.in/tags/wercker/"}