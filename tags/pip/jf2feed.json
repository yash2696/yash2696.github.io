{"author":{"name":"Yash Agarwal","type":"card","url":"https://yashagarwal.in/"},"children":[{"content":{"html":"\u003cp\u003eRecently I was searching for Python projects on Github for contribution. Every single project I found, had a thing common among them. In every project\u0026rsquo;s contribution guide, it was asked to set up the virtual environment for the project. What the heck is this virtual environment and how does it work?\u003c/p\u003e\n\u003cp\u003eAs a beginner to open source projects, the problem I faced, in the beginning, was how to set up the development environments for the projects I was looking at. I searched the Internet, I found some articles, but they were not complete. So I decided to write this guide, which will be useful for me in future also.\u003c/p\u003e\n\u003cp\u003ePython uses \u003ccode\u003epip\u003c/code\u003e for package management.\u003c/p\u003e\n\u003ch2 id=\"installing-pip\"\u003eInstalling pip\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003epip\u003c/code\u003e depends on setuptools library, which is in official Ubuntu repositories. To install it for python2 -\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo apt-get install python-setuptools\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThen install \u003ccode\u003epip\u003c/code\u003e using -\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo apt-get install python-pip\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eand for python3 -\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo apt-get install python3-setuptools\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eThen install \u003ccode\u003epip\u003c/code\u003e using -\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo apt-get install python3-pip\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eIt should install \u003ccode\u003epip\u003c/code\u003e on your system for both python versions. \u003ccode\u003epip\u003c/code\u003e is very easy to use. It will take care of every single package you may require for your project.\u003c/p\u003e\n\u003ch3 id=\"installing-a-package-using-pip\"\u003eInstalling a package using pip\u003c/h3\u003e\n\u003cp\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"c1\"\u003e# it will search and install [package]\u003c/span\u003e\r\npip install \u003cspan class=\"o\"\u003e[\u003c/span\u003epackage\u003cspan class=\"o\"\u003e]\u003c/span\u003e\r\npip install django\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\nIf you are using python3, then don\u0026rsquo;t forget to use \u003ccode\u003epip3\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003epip\u003c/code\u003e can be used to install a specific version of package also.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"c1\"\u003e# it will search and install [package] with [version]\u003c/span\u003e\r\npip install \u003cspan class=\"o\"\u003e[\u003c/span\u003epackage\u003cspan class=\"o\"\u003e]==[\u003c/span\u003eversion\u003cspan class=\"o\"\u003e]\u003c/span\u003e\r\npip install \u003cspan class=\"nv\"\u003edjango\u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e1.6.5\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003ch3 id=\"uninstalling-a-package-using-pip\"\u003eUninstalling a package using pip\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"c1\"\u003e# it will search and uninstall [package]\u003c/span\u003e\r\npip uninstall \u003cspan class=\"o\"\u003e[\u003c/span\u003epackage\u003cspan class=\"o\"\u003e]\u003c/span\u003e\r\npip uninstall django\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3 id=\"upgrading-a-package-using-pip\"\u003eupgrading a package using pip\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"c1\"\u003e# it will upgrade [package] to latest version\u003c/span\u003e\r\npip install --upgrade \u003cspan class=\"o\"\u003e[\u003c/span\u003epackage\u003cspan class=\"o\"\u003e]\u003c/span\u003e\r\npip install --upgrade django\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3 id=\"creating-list-of-all-packages-with-pip\"\u003eCreating list of all packages with pip\u003c/h3\u003e\n\u003cp\u003eIt is one of most used and most useful feature of \u003ccode\u003epip\u003c/code\u003e. It allows you to make a list of all the dependencies of your project.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"c1\"\u003e# it will output the file to current directory\u003c/span\u003e\r\npip freeze \u0026gt; \u003cspan class=\"o\"\u003e[\u003c/span\u003efile_name.txt\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eAll these commands above will install the packages globally. But that\u0026rsquo;s not what is desired. \u003ccode\u003evirtualenv\u003c/code\u003e comes to our rescue here.\u003c/p\u003e\n\u003ch2 id=\"virtualenv\"\u003eVirtualenv\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003evirtualenv\u003c/code\u003e solves a very particular problem; it allows multiple python projects that have different and often conflicting dependencies, to coexist on the same system.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003evirtualenv\u003c/code\u003e solves this problem by creating different isolated development environments for your projects. An environment is a folder which contains everything; your project needs to work properly.\u003c/p\u003e\n\u003ch3 id=\"installing-virtualenv\"\u003eInstalling virtualenv\u003c/h3\u003e\n\u003cp\u003eBy default, if you install \u003ccode\u003evirtualenv\u003c/code\u003e using \u003ccode\u003epip\u003c/code\u003e, it will use system\u0026rsquo;s default python to create virtual environments. To overcome this problem, we will install \u003ccode\u003evirtualenv\u003c/code\u003e using ubuntu package manager.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo apt-get install python-virtualenv\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003ch3 id=\"installing-virtualenvwrapper\"\u003eInstalling virtualenvwrapper\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003evirtualenvwrapper\u003c/code\u003e provides some set of commands which makes working with virtual environments much easier.\u003c/p\u003e\n\u003cp\u003eTo install it -\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo pip install virtualenvwrapper\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003epip\u003c/code\u003e, \u003ccode\u003evirtualenv\u003c/code\u003e and \u003ccode\u003evirtualenvwrapper\u003c/code\u003e are the only packages which you will need to install globally. All other per project packages will be installed in respective virtual environments.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003evirtualenvwrapper\u003c/code\u003e also places all your virtual environments in one place. It makes working with projects very easy.\u003c/p\u003e\n\u003cp\u003eNow open your \u003ccode\u003e.bashrc\u003c/code\u003e and add these two lines to the end -\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"c1\"\u003e# All your projects will be saved in python-dev folder\u003c/span\u003e\r\n\u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003ePROJECT_HOME\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e~/python-dev\r\n\r\n\u003cspan class=\"c1\"\u003e# ~/python-dev/virtualenvs will contains python interpreters for each project.\u003c/span\u003e\r\n\u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003eWORKON_HOME\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e~/python-dev/virtualenvs\r\n\r\n\u003cspan class=\"c1\"\u003e# source the virtualenvwrapper script\u003c/span\u003e\r\n\u003cspan class=\"nb\"\u003esource\u003c/span\u003e /usr/local/bin/virtualenvwrapper.sh\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eYou can change \u003ccode\u003epython-dev\u003c/code\u003e to any name you wish. Your virtual environments will be created at that location.\u003c/p\u003e\n\u003cp\u003eNow restart your terminal to source the \u003ccode\u003e.bashrc\u003c/code\u003e or use -\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"nb\"\u003esource\u003c/span\u003e .bashrc\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003ch3 id=\"basic-usage\"\u003eBasic Usage\u003c/h3\u003e\n\u003cp\u003eCreate a virtual environment -\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003emkvirtualenv myproject\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eIt will create \u003ccode\u003emyproject\u003c/code\u003e folder in the python-dev directory. To activate this project -\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eworkon myproject\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eAlternatively you can create project using \u003ccode\u003emkproject\u003c/code\u003e command. It will create a virtual environment as well as a project directory in the \u003ccode\u003e$PROJECT_HOME\u003c/code\u003e, which is \u003ccode\u003ecd\u003c/code\u003e-ed into when you \u003ccode\u003eworkon\u003c/code\u003e myproject.\u003c/p\u003e\n\u003cp\u003eDon\u0026rsquo;t forget to deactivate current project when you switch between different projects.\u003c/p\u003e\n\u003cp\u003eTo deactivate a project -\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003edeactivate\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eTo delete a virtual environment -\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ermvirtualenv myproject\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eList all environments -\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003elsvirtualenv\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eit will also list all virtual environments -\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eworkon\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003ePlease refer to virtualenvwrapper documentation for \u003ca href=\"https://virtualenvwrapper.readthedocs.io/en/latest/command_ref.html\"\u003efull list of virtualenvwrapper commands\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003evirtualenvwrapper also provides the tab-completion feature which is very handy when you have a lot of projects to work with.\u003c/p\u003e\n\u003cp\u003eThat\u0026rsquo;s it. Hope you liked the post. 😄\u003c/p\u003e\n","text":"Recently I was searching for Python projects on Github for contribution. Every single project I found, had a thing common among them. In every project\u0026rsquo;s contribution guide, it was asked to set up the virtual environment for the project. What the heck is this virtual environment and how does it work?\nAs a beginner to open source projects, the problem I faced, in the beginning, was how to set up the development environments for the projects I was looking at. I searched the Internet, I found some articles, but they were not complete. So I decided to write this guide, which will be useful for me in future also.\nPython uses pip for package management.\nInstalling pip pip depends on setuptools library, which is in official Ubuntu repositories. To install it for python2 -\nsudo apt-get install python-setuptools Then install pip using - sudo apt-get install python-pip\nand for python3 - sudo apt-get install python3-setuptools\nThen install pip using - sudo apt-get install python3-pip\nIt should install pip on your system for both python versions. pip is very easy to use. It will take care of every single package you may require for your project.\nInstalling a package using pip # it will search and install [package]\rpip install [package]\rpip install django If you are using python3, then don\u0026rsquo;t forget to use pip3.\npip can be used to install a specific version of package also. # it will search and install [package] with [version]\rpip install [package]==[version]\rpip install django==1.6.5\nUninstalling a package using pip # it will search and uninstall [package]\rpip uninstall [package]\rpip uninstall django upgrading a package using pip # it will upgrade [package] to latest version\rpip install --upgrade [package]\rpip install --upgrade django Creating list of all packages with pip It is one of most used and most useful feature of pip. It allows you to make a list of all the dependencies of your project. # it will output the file to current directory\rpip freeze \u0026gt; [file_name.txt]\nAll these commands above will install the packages globally. But that\u0026rsquo;s not what is desired. virtualenv comes to our rescue here.\nVirtualenv virtualenv solves a very particular problem; it allows multiple python projects that have different and often conflicting dependencies, to coexist on the same system.\nvirtualenv solves this problem by creating different isolated development environments for your projects. An environment is a folder which contains everything; your project needs to work properly.\nInstalling virtualenv By default, if you install virtualenv using pip, it will use system\u0026rsquo;s default python to create virtual environments. To overcome this problem, we will install virtualenv using ubuntu package manager. sudo apt-get install python-virtualenv\nInstalling virtualenvwrapper virtualenvwrapper provides some set of commands which makes working with virtual environments much easier.\nTo install it - sudo pip install virtualenvwrapper\npip, virtualenv and virtualenvwrapper are the only packages which you will need to install globally. All other per project packages will be installed in respective virtual environments.\nvirtualenvwrapper also places all your virtual environments in one place. It makes working with projects very easy.\nNow open your .bashrc and add these two lines to the end - # All your projects will be saved in python-dev folder\rexport PROJECT_HOME=~/python-dev\r# ~/python-dev/virtualenvs will contains python interpreters for each project.\rexport WORKON_HOME=~/python-dev/virtualenvs\r# source the virtualenvwrapper script\rsource /usr/local/bin/virtualenvwrapper.sh\nYou can change python-dev to any name you wish. Your virtual environments will be created at that location.\nNow restart your terminal to source the .bashrc or use - source .bashrc\nBasic Usage Create a virtual environment - mkvirtualenv myproject\nIt will create myproject folder in the python-dev directory. To activate this project - workon myproject\nAlternatively you can create project using mkproject command. It will create a virtual environment as well as a project directory in the $PROJECT_HOME, which is cd-ed into when you workon myproject.\nDon\u0026rsquo;t forget to deactivate current project when you switch between different projects.\nTo deactivate a project - deactivate\nTo delete a virtual environment - rmvirtualenv myproject\nList all environments - lsvirtualenv\nit will also list all virtual environments - workon\nPlease refer to virtualenvwrapper documentation for full list of virtualenvwrapper commands.\nvirtualenvwrapper also provides the tab-completion feature which is very handy when you have a lot of projects to work with.\nThat\u0026rsquo;s it. Hope you liked the post. 😄\n"},"name":"Setting up Python Development Environments","published":"2016-10-09T00:00:00Z","summary":"Recently I was searching for Python projects on Github for contribution. Every single project I found, had a thing common among them. In every project\u0026rsquo;s contribution guide, it was asked to set up the virtual environment for the project. What the heck is this virtual environment and how does it work?\nAs a beginner to open source projects, the problem I faced, in the beginning, was how to set up the development environments for the projects I was looking at.","type":"entry","url":"https://yashagarwal.in/posts/2016/10/setting-up-python-development-environments/"}],"name":"Pip","type":"feed","url":"https://yashagarwal.in/tags/pip/"}