{"author":{"name":"Yash Agarwal","type":"card","url":"https://yashagarwal.in/"},"children":[{"content":{"html":"\u003cp\u003eI have been using Linux since I was in my second year of undergraduate. My experiments with the dotfiles (configuration files) also started at the same time. For the uninformed, in Linux, it is common to configure a lot of settings and configurations within dotfiles. Dotfiles are files in a Linux user\u0026rsquo;s home directory that begin with a dot or a full-stop character. This dot indicates to the operating system that these files are used to store the settings of programs like \u003ccode\u003evim\u003c/code\u003e or shells like \u003ccode\u003ebash\u003c/code\u003e or \u003ccode\u003efish\u003c/code\u003e to name a few.\u003c/p\u003e\n\u003cp\u003eIn the beginning, I was keeping a manual backup of my dotfiles by copying them to a folder from time to time. But the list soon started getting huge, that it became complicated for me to keep track of the changes. Then I moved to symlinks. I started symlinking all the dotfiles from my folder to their usual locations. This setup worked perfectly fine, but as my collection of dotfiles grew, It became very cumbersome for me to symlink every dotfile manually.\u003c/p\u003e\n\u003cp\u003eI also tried a few tools built for this particular purpose. Some of them are \u003ccode\u003evcsh\u003c/code\u003e, \u003ccode\u003emr\u003c/code\u003e, and \u003ccode\u003estow\u003c/code\u003e. These tools work just fine, but I was not willing to learn new tools just for maintaining my dotfiles. At last, I decided to write my tool to solve this problem. This way, there will not be any external dependency, and this tool will also become part of my dotfiles.\u003c/p\u003e\n\u003ch2 id=\"design\"\u003eDesign\u003c/h2\u003e\n\u003cp\u003eThe tool, in itself, is inspired by the \u003ca href=\"https://en.wikipedia.org/wiki/Configuration_file#UNIX/Linux\"\u003eUNIX tradition\u003c/a\u003e of keeping configuration files for the settings of the programs. This configuration system uses a JSON formatted dotfile.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/yashhere/ConMan\"\u003eHere\u003c/a\u003e is the source code for the configuration system. Let\u0026rsquo;s have a look at the file structure of the repository.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e|-- .backups\n|   |-- 08-01-2018-15:47\n|   |-- 08-01-2018-19:30\n|   |-- ......\n|-- configure.py\n|-- current_status\n|-- dotfiles\n|   |-- dunst\n|   |-- gtk-3.0\n|   |-- i3\n|   |-- ......\n|-- dotfiles.json\n|-- LICENSE\n`-- README.md\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eDuring the initial setup, you need to edit the \u003ccode\u003edotfiles.json\u003c/code\u003e file to suit your setup. A relevant section of the JSON file is given below.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;pre\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;cloning repository\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;command\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;git\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;subcommand\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;clone\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;argument\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://github.com/yashhere/dotfiles.git\u0026#34;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;linking\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;bashrc\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;src\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;dotfiles/.bashrc\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;dest\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;.bashrc\u0026#34;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;bash_profile\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;src\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;dotfiles/.bash_profile\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;dest\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;.bash_profile\u0026#34;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;profile\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;src\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;dotfiles/.profile\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;dest\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;.profile\u0026#34;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;i3\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;src\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;dotfiles/i3\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;dest\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;.config/i3\u0026#34;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eAs can be seen, the JSON file has an array variable \u003ccode\u003elinking\u003c/code\u003e, which can be used to set the paths for each configuration file and folder. The \u003ccode\u003econfigure.py\u003c/code\u003e script also requires a \u003ccode\u003edotfiles\u003c/code\u003e folder to be present in the current directory. The folder can be created manually, or if it is already version controlled on GitHub, then the script can clone it. For that, you can edit the \u003ccode\u003epre\u003c/code\u003e section in the \u003ccode\u003edotfiles.json\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eYour dotfiles and config folders go inside the \u003ccode\u003edotfiles\u003c/code\u003e folder. You need to copy all your current configurations to this folder to get started.\u003c/p\u003e\n\u003cp\u003eSo, how does the script know where a file or folder will be linked? Simple, you need to edit the \u003ccode\u003edotfiles.json\u003c/code\u003e file and add source and destination locations. For example, if you want to set up configurations of \u003ccode\u003ei3\u003c/code\u003e to its original location (which is, \u003ccode\u003e$HOME/.config/i3\u003c/code\u003e), then you need to create a new JSON object in the \u003ccode\u003elinking\u003c/code\u003e array, like this.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;i3\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;src\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;dotfiles/i3\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;dest\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;.config/i3\u0026#34;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eHere the \u003ccode\u003ename\u003c/code\u003e is used to identify the configuration file, the \u003ccode\u003esrc\u003c/code\u003e parameter is the location of your config file/folder in the dotfiles directory, and the \u003ccode\u003edest\u003c/code\u003e parameter is the final destination of the file/folder. Keen observers would notice that I have not used \u003ccode\u003e$HOME\u003c/code\u003e anywhere. It is understood that the configuration will go to the current user\u0026rsquo;s home directory. So the \u003ccode\u003edest\u003c/code\u003e is relative to the user\u0026rsquo;s home directory, and \u003ccode\u003esrc\u003c/code\u003e is relative to the directory from which the \u003ccode\u003econfigure.py\u003c/code\u003e script is executed.\u003c/p\u003e\n\u003cp\u003eAnd you are done! Now, run \u003ccode\u003econfigure.py\u003c/code\u003e, and all your dotfiles and folders will be symlinked to their correct place.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003ecurrent_status\u003c/code\u003e file saves all the symlink locations that are being managed by the script, for your easy reference and to debug any error.\u003c/p\u003e\n\u003ch2 id=\"behind-the-scenes\"\u003eBehind the Scenes\u003c/h2\u003e\n\u003cp\u003eA lot to cool things happen behind the scenes. The script will check if any previous symlink exists at the given \u003ccode\u003edest\u003c/code\u003e location. It removes any symlinks to avoid redundancy. If the dest already has any dotfile or folder, then it backs it up in the \u003ccode\u003e.backups\u003c/code\u003e under today\u0026rsquo;s date and time before replacing it with a symlink to avoid any potential data loss.\u003c/p\u003e\n\u003cp\u003eI hope the article was useful. Cheers 😄\u003c/p\u003e\n","text":"I have been using Linux since I was in my second year of undergraduate. My experiments with the dotfiles (configuration files) also started at the same time. For the uninformed, in Linux, it is common to configure a lot of settings and configurations within dotfiles. Dotfiles are files in a Linux user\u0026rsquo;s home directory that begin with a dot or a full-stop character. This dot indicates to the operating system that these files are used to store the settings of programs like vim or shells like bash or fish to name a few.\nIn the beginning, I was keeping a manual backup of my dotfiles by copying them to a folder from time to time. But the list soon started getting huge, that it became complicated for me to keep track of the changes. Then I moved to symlinks. I started symlinking all the dotfiles from my folder to their usual locations. This setup worked perfectly fine, but as my collection of dotfiles grew, It became very cumbersome for me to symlink every dotfile manually.\nI also tried a few tools built for this particular purpose. Some of them are vcsh, mr, and stow. These tools work just fine, but I was not willing to learn new tools just for maintaining my dotfiles. At last, I decided to write my tool to solve this problem. This way, there will not be any external dependency, and this tool will also become part of my dotfiles.\nDesign The tool, in itself, is inspired by the UNIX tradition of keeping configuration files for the settings of the programs. This configuration system uses a JSON formatted dotfile.\nHere is the source code for the configuration system. Let\u0026rsquo;s have a look at the file structure of the repository. |-- .backups | |-- 08-01-2018-15:47 | |-- 08-01-2018-19:30 | |-- ...... |-- configure.py |-- current_status |-- dotfiles | |-- dunst | |-- gtk-3.0 | |-- i3 | |-- ...... |-- dotfiles.json |-- LICENSE `-- README.md\nDuring the initial setup, you need to edit the dotfiles.json file to suit your setup. A relevant section of the JSON file is given below. { \u0026#34;pre\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;cloning repository\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;git\u0026#34;, \u0026#34;subcommand\u0026#34;: \u0026#34;clone\u0026#34;, \u0026#34;argument\u0026#34;: \u0026#34;https://github.com/yashhere/dotfiles.git\u0026#34; } ], \u0026#34;linking\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;bashrc\u0026#34;, \u0026#34;src\u0026#34;: \u0026#34;dotfiles/.bashrc\u0026#34;, \u0026#34;dest\u0026#34;: \u0026#34;.bashrc\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;bash_profile\u0026#34;, \u0026#34;src\u0026#34;: \u0026#34;dotfiles/.bash_profile\u0026#34;, \u0026#34;dest\u0026#34;: \u0026#34;.bash_profile\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;profile\u0026#34;, \u0026#34;src\u0026#34;: \u0026#34;dotfiles/.profile\u0026#34;, \u0026#34;dest\u0026#34;: \u0026#34;.profile\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;i3\u0026#34;, \u0026#34;src\u0026#34;: \u0026#34;dotfiles/i3\u0026#34;, \u0026#34;dest\u0026#34;: \u0026#34;.config/i3\u0026#34; }, ] }\nAs can be seen, the JSON file has an array variable linking, which can be used to set the paths for each configuration file and folder. The configure.py script also requires a dotfiles folder to be present in the current directory. The folder can be created manually, or if it is already version controlled on GitHub, then the script can clone it. For that, you can edit the pre section in the dotfiles.json.\nYour dotfiles and config folders go inside the dotfiles folder. You need to copy all your current configurations to this folder to get started.\nSo, how does the script know where a file or folder will be linked? Simple, you need to edit the dotfiles.json file and add source and destination locations. For example, if you want to set up configurations of i3 to its original location (which is, $HOME/.config/i3), then you need to create a new JSON object in the linking array, like this. { \u0026#34;name\u0026#34;: \u0026#34;i3\u0026#34;, \u0026#34;src\u0026#34;: \u0026#34;dotfiles/i3\u0026#34;, \u0026#34;dest\u0026#34;: \u0026#34;.config/i3\u0026#34; }\nHere the name is used to identify the configuration file, the src parameter is the location of your config file/folder in the dotfiles directory, and the dest parameter is the final destination of the file/folder. Keen observers would notice that I have not used $HOME anywhere. It is understood that the configuration will go to the current user\u0026rsquo;s home directory. So the dest is relative to the user\u0026rsquo;s home directory, and src is relative to the directory from which the configure.py script is executed.\nAnd you are done! Now, run configure.py, and all your dotfiles and folders will be symlinked to their correct place.\nThe current_status file saves all the symlink locations that are being managed by the script, for your easy reference and to debug any error.\nBehind the Scenes A lot to cool things happen behind the scenes. The script will check if any previous symlink exists at the given dest location. It removes any symlinks to avoid redundancy. If the dest already has any dotfile or folder, then it backs it up in the .backups under today\u0026rsquo;s date and time before replacing it with a symlink to avoid any potential data loss.\nI hope the article was useful. Cheers 😄\n"},"name":"My Own Configuration Manager","published":"2018-01-21T11:23:23+05:30","summary":"I have been using Linux since I was in my second year of undergraduate. My experiments with the dotfiles (configuration files) also started at the same time. For the uninformed, in Linux, it is common to configure a lot of settings and configurations within dotfiles. Dotfiles are files in a Linux user\u0026rsquo;s home directory that begin with a dot or a full-stop character. This dot indicates to the operating system that these files are used to store the settings of programs like vim or shells like bash or fish to name a few.","type":"entry","url":"https://yashagarwal.in/posts/2018/01/my-own-configuration-manager/"},{"content":{"html":"\u003cp\u003eRecently I was searching for Python projects on Github for contribution. Every single project I found, had a thing common among them. In every project\u0026rsquo;s contribution guide, it was asked to set up the virtual environment for the project. What the heck is this virtual environment and how does it work?\u003c/p\u003e\n\u003cp\u003eAs a beginner to open source projects, the problem I faced, in the beginning, was how to set up the development environments for the projects I was looking at. I searched the Internet, I found some articles, but they were not complete. So I decided to write this guide, which will be useful for me in future also.\u003c/p\u003e\n\u003cp\u003ePython uses \u003ccode\u003epip\u003c/code\u003e for package management.\u003c/p\u003e\n\u003ch2 id=\"installing-pip\"\u003eInstalling pip\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003epip\u003c/code\u003e depends on setuptools library, which is in official Ubuntu repositories. To install it for python2 -\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo apt-get install python-setuptools\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThen install \u003ccode\u003epip\u003c/code\u003e using -\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo apt-get install python-pip\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eand for python3 -\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo apt-get install python3-setuptools\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eThen install \u003ccode\u003epip\u003c/code\u003e using -\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo apt-get install python3-pip\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eIt should install \u003ccode\u003epip\u003c/code\u003e on your system for both python versions. \u003ccode\u003epip\u003c/code\u003e is very easy to use. It will take care of every single package you may require for your project.\u003c/p\u003e\n\u003ch3 id=\"installing-a-package-using-pip\"\u003eInstalling a package using pip\u003c/h3\u003e\n\u003cp\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"c1\"\u003e# it will search and install [package]\u003c/span\u003e\r\npip install \u003cspan class=\"o\"\u003e[\u003c/span\u003epackage\u003cspan class=\"o\"\u003e]\u003c/span\u003e\r\npip install django\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\nIf you are using python3, then don\u0026rsquo;t forget to use \u003ccode\u003epip3\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003epip\u003c/code\u003e can be used to install a specific version of package also.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"c1\"\u003e# it will search and install [package] with [version]\u003c/span\u003e\r\npip install \u003cspan class=\"o\"\u003e[\u003c/span\u003epackage\u003cspan class=\"o\"\u003e]==[\u003c/span\u003eversion\u003cspan class=\"o\"\u003e]\u003c/span\u003e\r\npip install \u003cspan class=\"nv\"\u003edjango\u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e1.6.5\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003ch3 id=\"uninstalling-a-package-using-pip\"\u003eUninstalling a package using pip\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"c1\"\u003e# it will search and uninstall [package]\u003c/span\u003e\r\npip uninstall \u003cspan class=\"o\"\u003e[\u003c/span\u003epackage\u003cspan class=\"o\"\u003e]\u003c/span\u003e\r\npip uninstall django\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3 id=\"upgrading-a-package-using-pip\"\u003eupgrading a package using pip\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"c1\"\u003e# it will upgrade [package] to latest version\u003c/span\u003e\r\npip install --upgrade \u003cspan class=\"o\"\u003e[\u003c/span\u003epackage\u003cspan class=\"o\"\u003e]\u003c/span\u003e\r\npip install --upgrade django\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3 id=\"creating-list-of-all-packages-with-pip\"\u003eCreating list of all packages with pip\u003c/h3\u003e\n\u003cp\u003eIt is one of most used and most useful feature of \u003ccode\u003epip\u003c/code\u003e. It allows you to make a list of all the dependencies of your project.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"c1\"\u003e# it will output the file to current directory\u003c/span\u003e\r\npip freeze \u0026gt; \u003cspan class=\"o\"\u003e[\u003c/span\u003efile_name.txt\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eAll these commands above will install the packages globally. But that\u0026rsquo;s not what is desired. \u003ccode\u003evirtualenv\u003c/code\u003e comes to our rescue here.\u003c/p\u003e\n\u003ch2 id=\"virtualenv\"\u003eVirtualenv\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003evirtualenv\u003c/code\u003e solves a very particular problem; it allows multiple python projects that have different and often conflicting dependencies, to coexist on the same system.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003evirtualenv\u003c/code\u003e solves this problem by creating different isolated development environments for your projects. An environment is a folder which contains everything; your project needs to work properly.\u003c/p\u003e\n\u003ch3 id=\"installing-virtualenv\"\u003eInstalling virtualenv\u003c/h3\u003e\n\u003cp\u003eBy default, if you install \u003ccode\u003evirtualenv\u003c/code\u003e using \u003ccode\u003epip\u003c/code\u003e, it will use system\u0026rsquo;s default python to create virtual environments. To overcome this problem, we will install \u003ccode\u003evirtualenv\u003c/code\u003e using ubuntu package manager.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo apt-get install python-virtualenv\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003ch3 id=\"installing-virtualenvwrapper\"\u003eInstalling virtualenvwrapper\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003evirtualenvwrapper\u003c/code\u003e provides some set of commands which makes working with virtual environments much easier.\u003c/p\u003e\n\u003cp\u003eTo install it -\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo pip install virtualenvwrapper\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003epip\u003c/code\u003e, \u003ccode\u003evirtualenv\u003c/code\u003e and \u003ccode\u003evirtualenvwrapper\u003c/code\u003e are the only packages which you will need to install globally. All other per project packages will be installed in respective virtual environments.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003evirtualenvwrapper\u003c/code\u003e also places all your virtual environments in one place. It makes working with projects very easy.\u003c/p\u003e\n\u003cp\u003eNow open your \u003ccode\u003e.bashrc\u003c/code\u003e and add these two lines to the end -\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"c1\"\u003e# All your projects will be saved in python-dev folder\u003c/span\u003e\r\n\u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003ePROJECT_HOME\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e~/python-dev\r\n\r\n\u003cspan class=\"c1\"\u003e# ~/python-dev/virtualenvs will contains python interpreters for each project.\u003c/span\u003e\r\n\u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003eWORKON_HOME\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e~/python-dev/virtualenvs\r\n\r\n\u003cspan class=\"c1\"\u003e# source the virtualenvwrapper script\u003c/span\u003e\r\n\u003cspan class=\"nb\"\u003esource\u003c/span\u003e /usr/local/bin/virtualenvwrapper.sh\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eYou can change \u003ccode\u003epython-dev\u003c/code\u003e to any name you wish. Your virtual environments will be created at that location.\u003c/p\u003e\n\u003cp\u003eNow restart your terminal to source the \u003ccode\u003e.bashrc\u003c/code\u003e or use -\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"nb\"\u003esource\u003c/span\u003e .bashrc\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003ch3 id=\"basic-usage\"\u003eBasic Usage\u003c/h3\u003e\n\u003cp\u003eCreate a virtual environment -\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003emkvirtualenv myproject\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eIt will create \u003ccode\u003emyproject\u003c/code\u003e folder in the python-dev directory. To activate this project -\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eworkon myproject\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eAlternatively you can create project using \u003ccode\u003emkproject\u003c/code\u003e command. It will create a virtual environment as well as a project directory in the \u003ccode\u003e$PROJECT_HOME\u003c/code\u003e, which is \u003ccode\u003ecd\u003c/code\u003e-ed into when you \u003ccode\u003eworkon\u003c/code\u003e myproject.\u003c/p\u003e\n\u003cp\u003eDon\u0026rsquo;t forget to deactivate current project when you switch between different projects.\u003c/p\u003e\n\u003cp\u003eTo deactivate a project -\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003edeactivate\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eTo delete a virtual environment -\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ermvirtualenv myproject\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eList all environments -\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003elsvirtualenv\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eit will also list all virtual environments -\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eworkon\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003ePlease refer to virtualenvwrapper documentation for \u003ca href=\"https://virtualenvwrapper.readthedocs.io/en/latest/command_ref.html\"\u003efull list of virtualenvwrapper commands\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003evirtualenvwrapper also provides the tab-completion feature which is very handy when you have a lot of projects to work with.\u003c/p\u003e\n\u003cp\u003eThat\u0026rsquo;s it. Hope you liked the post. 😄\u003c/p\u003e\n","text":"Recently I was searching for Python projects on Github for contribution. Every single project I found, had a thing common among them. In every project\u0026rsquo;s contribution guide, it was asked to set up the virtual environment for the project. What the heck is this virtual environment and how does it work?\nAs a beginner to open source projects, the problem I faced, in the beginning, was how to set up the development environments for the projects I was looking at. I searched the Internet, I found some articles, but they were not complete. So I decided to write this guide, which will be useful for me in future also.\nPython uses pip for package management.\nInstalling pip pip depends on setuptools library, which is in official Ubuntu repositories. To install it for python2 -\nsudo apt-get install python-setuptools Then install pip using - sudo apt-get install python-pip\nand for python3 - sudo apt-get install python3-setuptools\nThen install pip using - sudo apt-get install python3-pip\nIt should install pip on your system for both python versions. pip is very easy to use. It will take care of every single package you may require for your project.\nInstalling a package using pip # it will search and install [package]\rpip install [package]\rpip install django If you are using python3, then don\u0026rsquo;t forget to use pip3.\npip can be used to install a specific version of package also. # it will search and install [package] with [version]\rpip install [package]==[version]\rpip install django==1.6.5\nUninstalling a package using pip # it will search and uninstall [package]\rpip uninstall [package]\rpip uninstall django upgrading a package using pip # it will upgrade [package] to latest version\rpip install --upgrade [package]\rpip install --upgrade django Creating list of all packages with pip It is one of most used and most useful feature of pip. It allows you to make a list of all the dependencies of your project. # it will output the file to current directory\rpip freeze \u0026gt; [file_name.txt]\nAll these commands above will install the packages globally. But that\u0026rsquo;s not what is desired. virtualenv comes to our rescue here.\nVirtualenv virtualenv solves a very particular problem; it allows multiple python projects that have different and often conflicting dependencies, to coexist on the same system.\nvirtualenv solves this problem by creating different isolated development environments for your projects. An environment is a folder which contains everything; your project needs to work properly.\nInstalling virtualenv By default, if you install virtualenv using pip, it will use system\u0026rsquo;s default python to create virtual environments. To overcome this problem, we will install virtualenv using ubuntu package manager. sudo apt-get install python-virtualenv\nInstalling virtualenvwrapper virtualenvwrapper provides some set of commands which makes working with virtual environments much easier.\nTo install it - sudo pip install virtualenvwrapper\npip, virtualenv and virtualenvwrapper are the only packages which you will need to install globally. All other per project packages will be installed in respective virtual environments.\nvirtualenvwrapper also places all your virtual environments in one place. It makes working with projects very easy.\nNow open your .bashrc and add these two lines to the end - # All your projects will be saved in python-dev folder\rexport PROJECT_HOME=~/python-dev\r# ~/python-dev/virtualenvs will contains python interpreters for each project.\rexport WORKON_HOME=~/python-dev/virtualenvs\r# source the virtualenvwrapper script\rsource /usr/local/bin/virtualenvwrapper.sh\nYou can change python-dev to any name you wish. Your virtual environments will be created at that location.\nNow restart your terminal to source the .bashrc or use - source .bashrc\nBasic Usage Create a virtual environment - mkvirtualenv myproject\nIt will create myproject folder in the python-dev directory. To activate this project - workon myproject\nAlternatively you can create project using mkproject command. It will create a virtual environment as well as a project directory in the $PROJECT_HOME, which is cd-ed into when you workon myproject.\nDon\u0026rsquo;t forget to deactivate current project when you switch between different projects.\nTo deactivate a project - deactivate\nTo delete a virtual environment - rmvirtualenv myproject\nList all environments - lsvirtualenv\nit will also list all virtual environments - workon\nPlease refer to virtualenvwrapper documentation for full list of virtualenvwrapper commands.\nvirtualenvwrapper also provides the tab-completion feature which is very handy when you have a lot of projects to work with.\nThat\u0026rsquo;s it. Hope you liked the post. 😄\n"},"name":"Setting up Python Development Environments","published":"2016-10-09T00:00:00Z","summary":"Recently I was searching for Python projects on Github for contribution. Every single project I found, had a thing common among them. In every project\u0026rsquo;s contribution guide, it was asked to set up the virtual environment for the project. What the heck is this virtual environment and how does it work?\nAs a beginner to open source projects, the problem I faced, in the beginning, was how to set up the development environments for the projects I was looking at.","type":"entry","url":"https://yashagarwal.in/posts/2016/10/setting-up-python-development-environments/"}],"name":"Python","type":"feed","url":"https://yashagarwal.in/tags/python/"}