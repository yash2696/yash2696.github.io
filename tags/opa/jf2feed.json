{"author":{"name":"Yash Agarwal","type":"card","url":"https://yashagarwal.in/"},"children":[{"content":{"html":"\u003cp\u003eI finished my last \u003ca href=\"/posts/2019/02/go-grpc-opa-a-perfect-union-part-2/\"\u003epost\u003c/a\u003e with the following issue -\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eNow, here one problem arises, how to make sure that the search results will not return any book which the user is not\nauthorized to access. We will solve this problem using OPA in the next and last post of this series.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eLet\u0026rsquo;s solve this issue now. We will use OPA\u0026rsquo;s declarative language, Rego, to implement policies which will decide on the\nbasis of some user-provided data, which all objects are to be returned to the user.\u003c/p\u003e\n\u003cp\u003eWe will also define a list of all the users who are part of this library. Here we are hardcoding this data, as I did\nnot want to waste my time in implementing a user registration service, but this functionality is not very important from\nour point of view. We will require only one field from this users data - the \u003ccode\u003euser_type\u003c/code\u003e field. This field will\ndetermine what the access level for the user is. We have already added the \u003ccode\u003eaccess_level\u003c/code\u003e field in the \u003ccode\u003eBook\u003c/code\u003e definition\nof our proto file.\u003c/p\u003e\n\u003cp\u003eWhen the user wants to search for a particular book, it will provide its \u003ccode\u003euser_type\u003c/code\u003e the ISBN of the book to our service. Our service\nwill take that ISBN and pass it to the OPA server. OPA server already has the \u003ccode\u003eBook\u003c/code\u003e data and the \u003ccode\u003eUser\u003c/code\u003e data. Now it has\nthe required ISBN to query the Book data. The Rego policy will query the Book data by ISBN. It will also\ncheck for the \u003ccode\u003eaccess_level\u003c/code\u003e condition. Moreover, after this operation, it will return the resultant set of books that satisfy both the requirements.\u003c/p\u003e\n\u003cp\u003eHere is the Rego policy -\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"n\"\u003epackage\u003c/span\u003e \u003cspan class=\"n\"\u003elibrary\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebooks\u003c/span\u003e\n\u003cspan class=\"n\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eusers\u003c/span\u003e\n\u003cspan class=\"n\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003einput\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003esearch_books\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ebook\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003einput\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebook\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisbn\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ebooks\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003eisbn\u003c/span\u003e\n  \u003cspan class=\"n\"\u003einput\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003euser_type\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003ebooks\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003eaccess_level\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ebook\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ebooks\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003elist_all_books\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ebooks\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e]]\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003einput\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003euser_type\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003ebooks\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003eaccess_level\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe user data is \u003ca href=\"https://github.com/yashhere/go-library-service/blob/master/OPA/users.json\"\u003ehere\u003c/a\u003e and the book data is \u003ca href=\"https://github.com/yashhere/go-library-service/blob/master/add_books.sh\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eA sample \u003ccode\u003einput\u003c/code\u003e request is shown below -\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;input\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;book\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"nt\"\u003e\u0026#34;isbn\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;1128959038\u0026#34;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;user\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"nt\"\u003e\u0026#34;user_type\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003ccode\u003einput\u003c/code\u003e is the data that the user is providing. In \u003ccode\u003esearch_books\u003c/code\u003e function, the input ISBN is matched with the ISBN\nof all books one by one. Then the resultant set of books is filtered by \u003ccode\u003euser_type\u003c/code\u003e and \u003ccode\u003eaccess_level\u003c/code\u003e (these\ntwo fields are essentially the same). In the last, the resultant set of books is assigned to the variable \u003ccode\u003ebook\u003c/code\u003e which\nwill be returned to the gRPC service.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003elist_all_books\u003c/code\u003e function is implemented similarly. The only difference is that we do not need to filter the books\nby ISBN. Filtering by \u003ccode\u003eaccess_level\u003c/code\u003e is enough.\u003c/p\u003e\n\u003cp\u003eNow our library service is completed. It is a very basic service. The intention was to show that the decision-making process can be offloaded to the OPA to reduce the complexity of the services. In this example, the advantages might not\nbe obvious, but in large production environments, where many services are running, it can make a significant\ndifference.\u003c/p\u003e\n\u003cp\u003eThe code for this series can be found on my \u003ca href=\"https://github.com/yashhere/go-library-service\"\u003eGithub\u003c/a\u003e account.\u003c/p\u003e\n\u003cp\u003eI hope you liked the article. Share your views and suggestions in the comments.\u003c/p\u003e\n\u003cp\u003eThanks for reading. Cheers :)\u003c/p\u003e\n","text":"I finished my last post with the following issue -\n Now, here one problem arises, how to make sure that the search results will not return any book which the user is not authorized to access. We will solve this problem using OPA in the next and last post of this series.\n Let\u0026rsquo;s solve this issue now. We will use OPA\u0026rsquo;s declarative language, Rego, to implement policies which will decide on the basis of some user-provided data, which all objects are to be returned to the user.\nWe will also define a list of all the users who are part of this library. Here we are hardcoding this data, as I did not want to waste my time in implementing a user registration service, but this functionality is not very important from our point of view. We will require only one field from this users data - the user_type field. This field will determine what the access level for the user is. We have already added the access_level field in the Book definition of our proto file.\nWhen the user wants to search for a particular book, it will provide its user_type the ISBN of the book to our service. Our service will take that ISBN and pass it to the OPA server. OPA server already has the Book data and the User data. Now it has the required ISBN to query the Book data. The Rego policy will query the Book data by ISBN. It will also check for the access_level condition. Moreover, after this operation, it will return the resultant set of books that satisfy both the requirements.\nHere is the Rego policy -\npackage library import data.books import data.users import input search_books[book] { input.book.isbn == books[i].isbn input.user.user_type \u0026gt;= books[i].access_level book = books[i] } list_all_books[books[i]] { input.user.user_type \u0026gt;= books[i].access_level } The user data is here and the book data is here.\nA sample input request is shown below -\n{ \u0026#34;input\u0026#34;: { \u0026#34;book\u0026#34;: { \u0026#34;isbn\u0026#34;: \u0026#34;1128959038\u0026#34; }, \u0026#34;user\u0026#34;: { \u0026#34;user_type\u0026#34;: 3 } } } The input is the data that the user is providing. In search_books function, the input ISBN is matched with the ISBN of all books one by one. Then the resultant set of books is filtered by user_type and access_level (these two fields are essentially the same). In the last, the resultant set of books is assigned to the variable book which will be returned to the gRPC service.\nThe list_all_books function is implemented similarly. The only difference is that we do not need to filter the books by ISBN. Filtering by access_level is enough.\nNow our library service is completed. It is a very basic service. The intention was to show that the decision-making process can be offloaded to the OPA to reduce the complexity of the services. In this example, the advantages might not be obvious, but in large production environments, where many services are running, it can make a significant difference.\nThe code for this series can be found on my Github account.\nI hope you liked the article. Share your views and suggestions in the comments.\nThanks for reading. Cheers :)\n"},"name":"Go + gRPC + OPA - A Perfect Union - Part 3","published":"2019-02-18T06:47:15+05:30","summary":"I finished my last post with the following issue -\n Now, here one problem arises, how to make sure that the search results will not return any book which the user is not authorized to access. We will solve this problem using OPA in the next and last post of this series.\n Let\u0026rsquo;s solve this issue now. We will use OPA\u0026rsquo;s declarative language, Rego, to implement policies which will decide on the basis of some user-provided data, which all objects are to be returned to the user.","type":"entry","url":"https://yashagarwal.in/posts/2019/02/go-grpc-opa-a-perfect-union-part-3/"},{"content":{"html":"\n\n\n\n    \n\n    \n    \n\n    \n    \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe.min.css\" integrity=\"sha256-sCl5PUOGMLfFYctzDW3MtRib0ctyUvI9Qsmq2wXOeBY=\" crossorigin=\"anonymous\" /\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/default-skin/default-skin.min.css\" integrity=\"sha256-BFeI1V+Vh1Rk37wswuOYn5lsTcaU96hGaI7OUVCLjPc=\" crossorigin=\"anonymous\" /\u003e\n\n    \n    \u003clink rel=\"stylesheet\" href=\"/css/photoswipe.min.d780348a887d97b4d6cc664301a2941706e4a02aeb1533524fcce3b7b9b64b4f.css\"\u003e\n\n    \n\n    \n    \u003cdiv class=\"pswp\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\"\u003e\n        \n        \u003cdiv class=\"pswp__bg\"\u003e\u003c/div\u003e\n        \n        \u003cdiv class=\"pswp__scroll-wrap\"\u003e\n            \n            \u003cdiv class=\"pswp__container\"\u003e\n                \u003cdiv class=\"pswp__item\"\u003e\u003c/div\u003e\n                \u003cdiv class=\"pswp__item\"\u003e\u003c/div\u003e\n                \u003cdiv class=\"pswp__item\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n            \n            \u003cdiv class=\"pswp__ui pswp__ui--hidden\"\u003e\n                \u003cdiv class=\"pswp__top-bar\"\u003e\n                    \n                    \u003cdiv class=\"pswp__counter\"\u003e\u003c/div\u003e\n                    \u003cbutton class=\"pswp__button pswp__button--close\" title=\"Close (Esc)\"\u003e\u003c/button\u003e\n                    \u003cbutton class=\"pswp__button pswp__button--share\" title=\"Share\"\u003e\u003c/button\u003e\n                    \u003cbutton class=\"pswp__button pswp__button--fs\" title=\"Toggle fullscreen\"\u003e\u003c/button\u003e\n                    \u003cbutton class=\"pswp__button pswp__button--zoom\" title=\"Zoom in/out\"\u003e\u003c/button\u003e\n                    \n                    \n                    \u003cdiv class=\"pswp__preloader\"\u003e\n                        \u003cdiv class=\"pswp__preloader__icn\"\u003e\n                            \u003cdiv class=\"pswp__preloader__cut\"\u003e\n                                \u003cdiv class=\"pswp__preloader__donut\"\u003e\u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"pswp__share-modal pswp__share-modal--hidden pswp__single-tap\"\u003e\n                    \u003cdiv class=\"pswp__share-tooltip\"\u003e\u003c/div\u003e\n                \u003c/div\u003e\n                \u003cbutton class=\"pswp__button pswp__button--arrow--left\" title=\"Previous (arrow left)\"\u003e\n                \u003c/button\u003e\n                \u003cbutton class=\"pswp__button pswp__button--arrow--right\" title=\"Next (arrow right)\"\u003e\n                \u003c/button\u003e\n                \u003cdiv class=\"pswp__caption\"\u003e\n                    \u003cdiv class=\"pswp__caption__center\"\u003e\u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n\u003cp\u003eIn the last \u003ca href=\"/posts/2019/02/go-grpc-opa-a-perfect-union-part-1/\"\u003epost\u003c/a\u003e, we discussed about the structure of our library\napplication. In this post, we will define the data definitions using protobuf, and then we will use these definitions to\ncreate a Go service. We will also add a REST interface to the service. So let\u0026rsquo;s get started.\u003c/p\u003e\n\u003ch2 id=\"defining-proto-definitions\"\u003eDefining Proto Definitions\u003c/h2\u003e\n\u003cp\u003egRPC uses protocol buffers for serializing structured data. To define the structure of the data that you want to serialize, we use a \u003cem\u003eproto\u003c/em\u003e file - it is a simple text file that contains all the logical pieces of your data in the form of \u003cem\u003emessages\u003c/em\u003e, and the methods that will be called over the network. To know more about the syntax of proto files, visit \u003ca href=\"https://grpc.io/docs/guides/\"\u003ethis\u003c/a\u003e link.\u003c/p\u003e\n\u003cp\u003eI have defined the following proto file -\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-proto\" data-lang=\"proto\"\u003e\u003cspan class=\"n\"\u003esyntax\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;proto3\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nn\"\u003elibrary\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;google/api/annotations.proto\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003eservice\u003c/span\u003e \u003cspan class=\"n\"\u003eLibraryService\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"k\"\u003erpc\u003c/span\u003e \u003cspan class=\"n\"\u003eListAllBooks\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eQueryFormat\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturns\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eBooks\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003eoption\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egoogle.api.http\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e      \u003cspan class=\"n\"\u003epost\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;/listBooks\u0026#34;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e      \u003cspan class=\"n\"\u003ebody\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;*\u0026#34;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"p\"\u003e};\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"p\"\u003e};\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"k\"\u003erpc\u003c/span\u003e \u003cspan class=\"n\"\u003eAddBook\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eQueryFormat\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturns\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eResponse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003eoption\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egoogle.api.http\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e      \u003cspan class=\"n\"\u003epost\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;/addBook\u0026#34;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e      \u003cspan class=\"n\"\u003ebody\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;*\u0026#34;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"p\"\u003e};\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"p\"\u003e};\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"k\"\u003erpc\u003c/span\u003e \u003cspan class=\"n\"\u003eSearchBook\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eQueryFormat\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturns\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eResponse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003eoption\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egoogle.api.http\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e      \u003cspan class=\"n\"\u003epost\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;/searchBook\u0026#34;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e      \u003cspan class=\"n\"\u003ebody\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;*\u0026#34;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"p\"\u003e};\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"p\"\u003e};\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e// the library\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003emessage\u003c/span\u003e \u003cspan class=\"nc\"\u003eLibrary\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003eBooks\u003c/span\u003e \u003cspan class=\"n\"\u003ebooks\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003emessage\u003c/span\u003e \u003cspan class=\"nc\"\u003eBooks\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003erepeated\u003c/span\u003e \u003cspan class=\"n\"\u003eBook\u003c/span\u003e \u003cspan class=\"n\"\u003ebooks\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e// metadata about a book\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003emessage\u003c/span\u003e \u003cspan class=\"nc\"\u003eBook\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003etitle\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003eauthor\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003eisbn\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003eint32\u003c/span\u003e \u003cspan class=\"n\"\u003eno_of_copies\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003eint32\u003c/span\u003e \u003cspan class=\"n\"\u003eaccess_level\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e// details about a user\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003emessage\u003c/span\u003e \u003cspan class=\"nc\"\u003eUser\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kd\"\u003eenum\u003c/span\u003e \u003cspan class=\"n\"\u003eUserType\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// https://github.com/golang/protobuf/issues/258\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eGARBAGE\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eStudent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eAdministration\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eFaculty\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003eint32\u003c/span\u003e \u003cspan class=\"n\"\u003eid_no\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"n\"\u003eUserType\u003c/span\u003e \u003cspan class=\"n\"\u003euser_type\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003emessage\u003c/span\u003e \u003cspan class=\"nc\"\u003eQueryFormat\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"n\"\u003eBook\u003c/span\u003e \u003cspan class=\"n\"\u003ebook\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"n\"\u003eUser\u003c/span\u003e \u003cspan class=\"n\"\u003euser\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003emessage\u003c/span\u003e \u003cspan class=\"nc\"\u003eResponse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003eaction\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003eint32\u003c/span\u003e \u003cspan class=\"n\"\u003estatus\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"kd\"\u003emessage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"k\"\u003eoneof\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eBook\u003c/span\u003e \u003cspan class=\"n\"\u003ebook\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eUser\u003c/span\u003e \u003cspan class=\"n\"\u003euser_data\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003emessage\u003c/span\u003e \u003cspan class=\"nc\"\u003eEmpty\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eTo compile it, run the following commands -\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eprotoc -I/usr/local/include -I. \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e-I\u003cspan class=\"nv\"\u003e$GOPATH\u003c/span\u003e/src \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e-I\u003cspan class=\"nv\"\u003e$GOPATH\u003c/span\u003e/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e--go_out\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nv\"\u003eplugins\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003egrpc:. \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003eapi/library.proto\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eprotoc -I/usr/local/include -I. \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  -I\u003cspan class=\"nv\"\u003e$GOPATH\u003c/span\u003e/src \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  -I\u003cspan class=\"nv\"\u003e$GOPATH\u003c/span\u003e/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  --grpc-gateway_out\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nv\"\u003elogtostderr\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003etrue:. \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  api/library.proto\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIt will generate corresponding Golang definitions of the messages and services defined in the Proto file. These\ndefinitions can be used by the server and client stubs to communicate with each other.\u003c/p\u003e\n\u003ch2 id=\"implementation-of-go-service\"\u003eImplementation of Go service\u003c/h2\u003e\n\u003cp\u003eNow we can start implementing the code for our services \u003ccode\u003eAddBook()\u003c/code\u003e, \u003ccode\u003eListAllBooks()\u003c/code\u003e and \u003ccode\u003eSearchBook()\u003c/code\u003e. It is going to\nbe a very naive implementation of a library system, but it will be sufficient to learn all the concepts.\u003c/p\u003e\n\u003cp\u003eMy implementation of the server stub is hosted\n\u003ca href=\"https://github.com/yashhere/go-library-service/blob/master/pkg/librarylib/server.go\"\u003ehere\u003c/a\u003e. A basic flow diagram of\nthis implementation will look like this -\u003c/p\u003e\n\n\n\n    \u003clink rel=\"stylesheet\" href=\"/css/hugo-easy-gallery.css\"\u003e\n    \n\n\n\u003cdiv class=\"box fancy-figure caption-position-bottom caption-effect-appear\" style=\"max-width:650px\" itemscope itemtype=\"http://schema.org/ImageGallery\"\u003e\n    \u003cfigure  itemprop=\"associatedMedia\" itemscope itemtype=\"http://schema.org/ImageObject\"\u003e\n        \u003cdiv class=\"img\"\u003e\n            \u003cimg itemprop=\"thumbnail\" src=\"/images/posts/2019-02-17/OPA_Service_Flow_Diagram.jpeg#center\" alt=\"Architecture\"/\u003e\n        \u003c/div\u003e\n        \u003ca href=\"/images/posts/2019-02-17/OPA_Service_Flow_Diagram.jpeg#center\" itemprop=\"contentUrl\"\u003e\u003c/a\u003e\n    \u003c/figure\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThe gRPC server will listen on port \u003ccode\u003e:50051\u003c/code\u003e, and a REST HTTP server will listen on port \u003ccode\u003e:8181\u003c/code\u003e. The OPA server is\nrunning on port \u003ccode\u003e:8182\u003c/code\u003e. The REST server is\nimplemented using \u003ca href=\"https://github.com/grpc-ecosystem/grpc-gateway\"\u003egRPC-Gateway\u003c/a\u003e. There are three methods - \u003ccode\u003eAddBook()\u003c/code\u003e,\n\u003ccode\u003eListAllBooks()\u003c/code\u003e, and \u003ccode\u003eSearchBook()\u003c/code\u003e. These methods can be called using either gRPC methods or using the REST endpoints\n\u003ccode\u003e/addBook\u003c/code\u003e, \u003ccode\u003e/listBooks\u003c/code\u003e and \u003ccode\u003e/searchBook\u003c/code\u003e. By design, the library gRPC service will not implement the authentication\npart of the service. The main purpose of using gRPC here is to provide a scalable and secure medium where all the\ncommunication between client and server is happening in binary format, which is slightly more secure than the\ntraditional mediums. In the current form, this gRPC server will accept requests from everyone and execute the desired\nfunctions. That is not desirable. What if a student tries to add a book to the library. Only Admins should be allowed to\nexecute such functions. What if someone who is not a student of the University tries to access the service. How to stop\nthem?\u003c/p\u003e\n\u003cp\u003eThere are two steps to solve this issue -\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eAuthentication\u003c/strong\u003e - It mainly deals with the question - who are you? It is a way to gain access to the system by verifying your identity. In our case, a user will provide its username and password to access the library service.\nWithout this authentication, the user will not be able to access the system. We will not be implementing authentication\nfunctionality in our application.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eAuthorization\u003c/strong\u003e - It deals with the question - which resources are you allowed to use? OPA can be used here to define various rights based on the access levels of the users.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIf you have noticed, I have defined an \u003ccode\u003eaccess_level\u003c/code\u003e field in the proto definition of the \u003ccode\u003eBook\u003c/code\u003e. This field will tell\nus what is the minimum access level required for a user to access this book.\u003c/p\u003e\n\u003cp\u003eAgain, in the proto definition of the \u003ccode\u003eUser\u003c/code\u003e, I have defined a \u003ccode\u003euser_type\u003c/code\u003e field. This field will serve as an indicator of\nthe access rights of the user. In the real world, these access rights will be decided after the user has authenticated\nherself to\nthe system, but here, we will hardcode the access rights.\u003c/p\u003e\n\u003cp\u003eSo, only users with access rights equal to \u003ccode\u003eAdministration\u003c/code\u003e will be allowed to add books to the system. Here we do not\ncare who the user is. If the user is supplying the correct access right, she will be allowed to operate.\nThe authentication logic in real-world scenarios will determine the \u003cem\u003ewho\u003c/em\u003e part.\u003c/p\u003e\n\u003cp\u003eThere are some books in the library, which have access rights equal to that of a \u003ccode\u003eFaculty\u003c/code\u003e. It means that only faculties\nwill be allowed to access those books. The students will not be able to access these books, even while searching for\nbooks using ISBN. This kind of mechanism can be implemented using OPA very quickly. We will see the implementation of the OPA\npart in the next post.\u003c/p\u003e\n\u003cp\u003eWhile querying the service, users are required to supply their identity (at least \u003ccode\u003euser_type\u003c/code\u003e) and the book ISBN if\nthey are searching for some book. The administrators are supposed to provide the name, author, access level, number of copies, and ISBN while adding the books. I have not added the error checking functionality in the code, but it should be\neasy enough to implement such functionality.\u003c/p\u003e\n\u003cp\u003eThe \u003ca href=\"https://github.com/yashhere/go-library-service/blob/master/cmd/main.go\"\u003emain.go\u003c/a\u003e file is the starting point of this service. It will spawn two servers in two Go Routines. Ideally, some synchronization mechanisms should be implemented in the code to avoid race conditions in some cases - for example, what will happen if two or more clients are trying to add the same book simultaneously. Here in our case, nothing serious\nwill happen, as OPA will take only one book per ISBN, and discard all the other books with the same ISBN even if the other\nmetadata is different (I designed the service in this way to keep the code easy enough to understand), but if there are\nother operations like DeleteBook and IssueBook, then the race conditions can cause issues.\u003c/p\u003e\n\u003cp\u003eIn the \u003ccode\u003eAddBook()\u003c/code\u003e function, the user provided book details will be sent to the OPA server using a REST call. OPA will\nstore this information in its in-memory store at a unique place determined by the ISBN of the book. In actual cases, the data should be stored in some persistent\nstorage, such as a DB. OPA will take the information from the DB. Again, to keep the implementation easy enough to\nunderstand, we are not using any such persistent storage. If any other book with different metadata but the same ISBN comes,\nthen OPA will overwrite the existing book with the new one.\u003c/p\u003e\n\u003cp\u003eIn the \u003ccode\u003eSearchBook()\u003c/code\u003e function, the user will provide the ISBN of the desired book. The gRPC service will call\nthe OPA using REST API and find if any such book exists or not.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eListAllBooks()\u003c/code\u003e is different in the way that it does not need any ISBN.\u003c/p\u003e\n\u003cp\u003eNow, here one problem arises, how to make sure that the search results will not return any book which the user is not\nauthorized to access. We will solve this problem using OPA in the next and last post of this series.\u003c/p\u003e\n\u003cp\u003eI hope that this post was helpful. If you have any doubts or want to say anything else, please comment. It will be a great\nmotivation and appreciation for me.\u003c/p\u003e\n\u003cp\u003eThanks for reading. Cheers 😄\u003c/p\u003e\n","text":"                         In the last post, we discussed about the structure of our library application. In this post, we will define the data definitions using protobuf, and then we will use these definitions to create a Go service. We will also add a REST interface to the service. So let\u0026rsquo;s get started.\nDefining Proto Definitions gRPC uses protocol buffers for serializing structured data. To define the structure of the data that you want to serialize, we use a proto file - it is a simple text file that contains all the logical pieces of your data in the form of messages, and the methods that will be called over the network. To know more about the syntax of proto files, visit this link.\nI have defined the following proto file -\nsyntax = \u0026#34;proto3\u0026#34;;package library;import \u0026#34;google/api/annotations.proto\u0026#34;;service LibraryService { rpc ListAllBooks(QueryFormat) returns (Books) { option (google.api.http) = { post : \u0026#34;/listBooks\u0026#34; body : \u0026#34;*\u0026#34; }; }; rpc AddBook(QueryFormat) returns (Response) { option (google.api.http) = { post : \u0026#34;/addBook\u0026#34; body : \u0026#34;*\u0026#34; }; }; rpc SearchBook(QueryFormat) returns (Response) { option (google.api.http) = { post : \u0026#34;/searchBook\u0026#34; body : \u0026#34;*\u0026#34; }; };}// the library message Library { Books books = 1; }message Books { repeated Book books = 1; }// metadata about a book message Book { string title = 1; string author = 2; string isbn = 3; int32 no_of_copies = 5; int32 access_level = 6;}// details about a user message User { enum UserType { // https://github.com/golang/protobuf/issues/258  GARBAGE = 0; Student = 1; Administration = 2; Faculty = 3; } string name = 1; int32 id_no = 2; UserType user_type = 4;}message QueryFormat { Book book = 1; User user = 2;}message Response { string action = 1; int32 status = 2; string message = 3; oneof value { Book book = 4; User user_data = 5; }}message Empty {} To compile it, run the following commands -\nprotoc -I/usr/local/include -I. \\ -I$GOPATH/src \\ -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \\ --go_out=plugins=grpc:. \\ api/library.proto protoc -I/usr/local/include -I. \\  -I$GOPATH/src \\  -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \\  --grpc-gateway_out=logtostderr=true:. \\  api/library.proto It will generate corresponding Golang definitions of the messages and services defined in the Proto file. These definitions can be used by the server and client stubs to communicate with each other.\nImplementation of Go service Now we can start implementing the code for our services AddBook(), ListAllBooks() and SearchBook(). It is going to be a very naive implementation of a library system, but it will be sufficient to learn all the concepts.\nMy implementation of the server stub is hosted here. A basic flow diagram of this implementation will look like this -\n    The gRPC server will listen on port :50051, and a REST HTTP server will listen on port :8181. The OPA server is running on port :8182. The REST server is implemented using gRPC-Gateway. There are three methods - AddBook(), ListAllBooks(), and SearchBook(). These methods can be called using either gRPC methods or using the REST endpoints /addBook, /listBooks and /searchBook. By design, the library gRPC service will not implement the authentication part of the service. The main purpose of using gRPC here is to provide a scalable and secure medium where all the communication between client and server is happening in binary format, which is slightly more secure than the traditional mediums. In the current form, this gRPC server will accept requests from everyone and execute the desired functions. That is not desirable. What if a student tries to add a book to the library. Only Admins should be allowed to execute such functions. What if someone who is not a student of the University tries to access the service. How to stop them?\nThere are two steps to solve this issue -\n  Authentication - It mainly deals with the question - who are you? It is a way to gain access to the system by verifying your identity. In our case, a user will provide its username and password to access the library service. Without this authentication, the user will not be able to access the system. We will not be implementing authentication functionality in our application.\n  Authorization - It deals with the question - which resources are you allowed to use? OPA can be used here to define various rights based on the access levels of the users.\n  If you have noticed, I have defined an access_level field in the proto definition of the Book. This field will tell us what is the minimum access level required for a user to access this book.\nAgain, in the proto definition of the User, I have defined a user_type field. This field will serve as an indicator of the access rights of the user. In the real world, these access rights will be decided after the user has authenticated herself to the system, but here, we will hardcode the access rights.\nSo, only users with access rights equal to Administration will be allowed to add books to the system. Here we do not care who the user is. If the user is supplying the correct access right, she will be allowed to operate. The authentication logic in real-world scenarios will determine the who part.\nThere are some books in the library, which have access rights equal to that of a Faculty. It means that only faculties will be allowed to access those books. The students will not be able to access these books, even while searching for books using ISBN. This kind of mechanism can be implemented using OPA very quickly. We will see the implementation of the OPA part in the next post.\nWhile querying the service, users are required to supply their identity (at least user_type) and the book ISBN if they are searching for some book. The administrators are supposed to provide the name, author, access level, number of copies, and ISBN while adding the books. I have not added the error checking functionality in the code, but it should be easy enough to implement such functionality.\nThe main.go file is the starting point of this service. It will spawn two servers in two Go Routines. Ideally, some synchronization mechanisms should be implemented in the code to avoid race conditions in some cases - for example, what will happen if two or more clients are trying to add the same book simultaneously. Here in our case, nothing serious will happen, as OPA will take only one book per ISBN, and discard all the other books with the same ISBN even if the other metadata is different (I designed the service in this way to keep the code easy enough to understand), but if there are other operations like DeleteBook and IssueBook, then the race conditions can cause issues.\nIn the AddBook() function, the user provided book details will be sent to the OPA server using a REST call. OPA will store this information in its in-memory store at a unique place determined by the ISBN of the book. In actual cases, the data should be stored in some persistent storage, such as a DB. OPA will take the information from the DB. Again, to keep the implementation easy enough to understand, we are not using any such persistent storage. If any other book with different metadata but the same ISBN comes, then OPA will overwrite the existing book with the new one.\nIn the SearchBook() function, the user will provide the ISBN of the desired book. The gRPC service will call the OPA using REST API and find if any such book exists or not.\nThe ListAllBooks() is different in the way that it does not need any ISBN.\nNow, here one problem arises, how to make sure that the search results will not return any book which the user is not authorized to access. We will solve this problem using OPA in the next and last post of this series.\nI hope that this post was helpful. If you have any doubts or want to say anything else, please comment. It will be a great motivation and appreciation for me.\nThanks for reading. Cheers 😄\n"},"name":"Go + gRPC + OPA - A Perfect Union - Part 2","published":"2019-02-17T14:44:56+05:30","summary":"In the last post, we discussed about the structure of our library application. In this post, we will define the data definitions using protobuf, and then we will use these definitions to create a Go service. We will also add a REST interface to the service.","type":"entry","url":"https://yashagarwal.in/posts/2019/02/go-grpc-opa-a-perfect-union-part-2/"},{"content":{"html":"\u003cp\u003e\u003cstrong\u003eTL;DR\u003c/strong\u003e \u0026ndash; In a series of blog posts, I will be implementing a simple library application supporting both gRPC and REST interfaces using Go, gRPC, and\nOPA. My approach might not be the most optimal one, but I am learning these technologies currently. Please give your\nvaluable suggestions and be kind :)\u003c/p\u003e\n\u003cp\u003eI have been learning the basics of microservices and Golang lately. On the work front, I got a chance to work on Go, gRPC, and Open\nPolicy Agent as my first professional project. In this post, I will be demonstrating what I learned in the last few months.\nWe will be implementing a simple gRPC based library service, which will be able to serve\nrequests using both gRPC and REST calls. It will also incorporate the Open Policy Agent (OPA) to provide the authorization\nto users. Let\u0026rsquo;s begin with a quick introduction to gRPC and OPA.\u003c/p\u003e\n\u003ch2 id=\"grpc\"\u003egRPC\u003c/h2\u003e\n\u003cp\u003egRPC is Google\u0026rsquo;s implementation for Remote Procedure Calls(RPC). RPC is mainly used in building scalable distributed systems. While REST has a limited set of verbs, RPC can define any function calls, including synchronous and asynchronous calls.\u003c/p\u003e\n\u003cp\u003eIn gRPC, the client can make procedure calls as if the requests are made to some local function. However, the underlying client\nstub (auto-generated) will send the call to the server. The server will have a similar server stub, which will be able to\nhandle the requests coming from the client. The server will send the response to the client using similar mechanisms\nover the network. All the communication is serialized to binary format, so it is ideal for distributed systems as binary format\ntends to be on the faster side for large amounts of data.\u003c/p\u003e\n\u003cp\u003eFor more info about gRPC, visit the official \u003ca href=\"https://grpc.io/\"\u003ewebsite\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"open-policy-agent-opa\"\u003eOpen Policy Agent (OPA)\u003c/h2\u003e\n\u003cp\u003eOPA gives us the ability to define a fine-grained policy control mechanism. However, I think the most critical benefit of\nusing OPA is that it gives you the ability to decouple your services and the definition of policies from the enforcement\nof it.\u003c/p\u003e\n\u003cp\u003eThere are mainly two parts of OPA -\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eA JSON document store where you can define anything from your users, access roles,\npermission levels, etc.\u003c/li\u003e\n\u003cli\u003eA policy is written in a declarative language. This policy gives you new derivative data from the original JSON document store evaluated by the policy. The declarative language is called Rego, and these policies are also documents that generate results according to the defined policy. The users query these results.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThis info will be sufficient for our use case. More info about it can be found at the official\n\u003ca href=\"https://www.openpolicyagent.org/\"\u003ewebsite\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"the-skeleton-of-our-application\"\u003eThe skeleton of our Application\u003c/h2\u003e\n\u003cp\u003eWe will be building a command-line library application. This application will support adding, deleting, searching, issuing, and returning of\nbooks. There are three types of users \u0026ndash; student, faculties, and staff. Not all users have a similar kind of access level. There are some books which are only reserved for students, and some are exclusively reserved for faculties and so on.\u003c/p\u003e\n\u003cp\u003eI think emulating the \u003ca href=\"https://harrypotter.fandom.com/wiki/Hogwarts_Library\"\u003elibrary\u003c/a\u003e at Hogwarts will be a good idea here. Students and ordinary people were not allowed inside\nthe restricted section of the library. We will emulate that restricted section using the authorization mechanisms\nprovided by OPA.\u003c/p\u003e\n\u003cp\u003eThe gRPC protocol will handle the communications part in our app, but not everyone in Hogwarts is using gRPC. Wizards\nare still in love with REST (not a bad thing, though), so we will provide them alike the REST interface to interact\nwith our service. We do not want to face the wrath of the wizards, after all.\u003c/p\u003e\n\u003cp\u003eOPA can either be used as a standalone application or be embedded in the Go service as well. Both approaches have\ntheir pros and cons. I have decided to use OPA as an independent service, as it will be more comfortable that way for us to push\nauthorization data and policies to it if such a need arises in the future.\u003c/p\u003e\n\u003cp\u003eOne more issue remains - where to store the added books. Shall we persist them? In practical scenarios, persistence is\nalways a good idea, but here I do not want to complicate things too much. We could use any Object storage servers (e.g., Minio) to\nstore the JSON data generated from our gRPC methods, but that will unnecessarily add complexity to our simple scenario.\nWizards do not like complicate stuff, you know!\u003c/p\u003e\n\u003cp\u003eIn the next posts, we will define our gRPC proto file and build the Go service around it. Then we will add a REST\ninterface to our service for simple CRUD operations in our application. Then we will add OPA authorization to restrict\nour users from adding and viewing books which they are not supposed to access.\u003c/p\u003e\n\u003cp\u003eThank you for reading. Cheers 😊\u003c/p\u003e\n","text":"TL;DR \u0026ndash; In a series of blog posts, I will be implementing a simple library application supporting both gRPC and REST interfaces using Go, gRPC, and OPA. My approach might not be the most optimal one, but I am learning these technologies currently. Please give your valuable suggestions and be kind :)\nI have been learning the basics of microservices and Golang lately. On the work front, I got a chance to work on Go, gRPC, and Open Policy Agent as my first professional project. In this post, I will be demonstrating what I learned in the last few months. We will be implementing a simple gRPC based library service, which will be able to serve requests using both gRPC and REST calls. It will also incorporate the Open Policy Agent (OPA) to provide the authorization to users. Let\u0026rsquo;s begin with a quick introduction to gRPC and OPA.\ngRPC gRPC is Google\u0026rsquo;s implementation for Remote Procedure Calls(RPC). RPC is mainly used in building scalable distributed systems. While REST has a limited set of verbs, RPC can define any function calls, including synchronous and asynchronous calls.\nIn gRPC, the client can make procedure calls as if the requests are made to some local function. However, the underlying client stub (auto-generated) will send the call to the server. The server will have a similar server stub, which will be able to handle the requests coming from the client. The server will send the response to the client using similar mechanisms over the network. All the communication is serialized to binary format, so it is ideal for distributed systems as binary format tends to be on the faster side for large amounts of data.\nFor more info about gRPC, visit the official website.\nOpen Policy Agent (OPA) OPA gives us the ability to define a fine-grained policy control mechanism. However, I think the most critical benefit of using OPA is that it gives you the ability to decouple your services and the definition of policies from the enforcement of it.\nThere are mainly two parts of OPA -\n A JSON document store where you can define anything from your users, access roles, permission levels, etc. A policy is written in a declarative language. This policy gives you new derivative data from the original JSON document store evaluated by the policy. The declarative language is called Rego, and these policies are also documents that generate results according to the defined policy. The users query these results.  This info will be sufficient for our use case. More info about it can be found at the official website.\nThe skeleton of our Application We will be building a command-line library application. This application will support adding, deleting, searching, issuing, and returning of books. There are three types of users \u0026ndash; student, faculties, and staff. Not all users have a similar kind of access level. There are some books which are only reserved for students, and some are exclusively reserved for faculties and so on.\nI think emulating the library at Hogwarts will be a good idea here. Students and ordinary people were not allowed inside the restricted section of the library. We will emulate that restricted section using the authorization mechanisms provided by OPA.\nThe gRPC protocol will handle the communications part in our app, but not everyone in Hogwarts is using gRPC. Wizards are still in love with REST (not a bad thing, though), so we will provide them alike the REST interface to interact with our service. We do not want to face the wrath of the wizards, after all.\nOPA can either be used as a standalone application or be embedded in the Go service as well. Both approaches have their pros and cons. I have decided to use OPA as an independent service, as it will be more comfortable that way for us to push authorization data and policies to it if such a need arises in the future.\nOne more issue remains - where to store the added books. Shall we persist them? In practical scenarios, persistence is always a good idea, but here I do not want to complicate things too much. We could use any Object storage servers (e.g., Minio) to store the JSON data generated from our gRPC methods, but that will unnecessarily add complexity to our simple scenario. Wizards do not like complicate stuff, you know!\nIn the next posts, we will define our gRPC proto file and build the Go service around it. Then we will add a REST interface to our service for simple CRUD operations in our application. Then we will add OPA authorization to restrict our users from adding and viewing books which they are not supposed to access.\nThank you for reading. Cheers 😊\n"},"name":"Go + gRPC + OPA - A Perfect Union - Part 1","published":"2019-02-10T14:29:08+05:30","summary":"TL;DR \u0026ndash; In a series of blog posts, I will be implementing a simple library application supporting both gRPC and REST interfaces using Go, gRPC, and OPA. My approach might not be the most optimal one, but I am learning these technologies currently. Please give your valuable suggestions and be kind :)\nI have been learning the basics of microservices and Golang lately. On the work front, I got a chance to work on Go, gRPC, and Open Policy Agent as my first professional project.","type":"entry","url":"https://yashagarwal.in/posts/2019/02/go-grpc-opa-a-perfect-union-part-1/"}],"name":"OPA","type":"feed","url":"https://yashagarwal.in/tags/opa/"}