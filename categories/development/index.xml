<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on /dev/yash/notes</title>
    <link>https://yashhere.github.io/categories/development/</link>
    <description>Recent content in Development on /dev/yash/notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 22 Feb 2017 13:37:56 +0530</lastBuildDate>
    
	<atom:link href="https://yashhere.github.io/categories/development/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Setting up Hugo automatic deployment to Github with Wercker</title>
      <link>https://yashhere.github.io/posts/2017/02/setting-up-hugo-automatic-deployment-to-github-with-wercker/</link>
      <pubDate>Wed, 22 Feb 2017 13:37:56 +0530</pubDate>
      
      <guid>https://yashhere.github.io/posts/2017/02/setting-up-hugo-automatic-deployment-to-github-with-wercker/</guid>
      <description>Recently, I again migrated my blog from Pelican to Hugo. So till now, I have experimented with Wordpress, Jekyll, Pelican and Hugo. Without any doubt, Hugo is the simplest to setup. This time, I have setup Hugo in Windows, as I think, in my system, I reinstall Windows OS much less frequently than the Linux. So that way, it will be less pain for me to set up the blog again.</description>
    </item>
    
  </channel>
</rss>iption>
    </item>
    
    <item>
      <title>Custom Arch Linux setup with Openbox</title>
      <link>https://yashhere.github.io/posts/2016/06/custom-arch-linux-setup-with-openbox/</link>
      <pubDate>Sat, 11 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://yashhere.github.io/posts/2016/06/custom-arch-linux-setup-with-openbox/</guid>
      <description>After my summer vacation started, I bought a new laptop and the first thing I did was to install Arch Linux on it. After a standard arch installation procedure, I started putting together my own desktop environment starting with ArchLinux and Openbox and then piecing all pieces together to build a proper desktop environment. Building a desktop this way really follows the Unix Methodology; have softwares that each do one thing well, and when you put them together you get something amazing.</description>
    </item>
    
    <item>
      <title>A good Sublime Text Setup</title>
      <link>https://yashhere.github.io/posts/2016/04/a-good-sublime-text-setup/</link>
      <pubDate>Thu, 14 Apr 2016 10:55:35 +0000</pubDate>
      
      <guid>https://yashhere.github.io/posts/2016/04/a-good-sublime-text-setup/</guid>
      <description>So, after a hactic day, a good news finally came. I have been selected as a Lab Administrator for the Software Systems Lab of my college. Cheers!!!
Let&amp;#8217;s come to our today&amp;#8217;s topic on configuring Sublime Text Settings.
There is just one rule you must follow while designing your own editor preference configuration.
 Don&amp;#8217;t put any lines in your configuration that you don&amp;#8217;t understand.
 You will find tons of online tutorials that contains all kinds of awesome hacks to make your sublime text experience better but the worst way to make your development environment better is to just borrow the configuration from someone else.</description>
    </item>
    
  </channel>
</rss>