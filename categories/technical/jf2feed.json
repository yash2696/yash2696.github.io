{"author":{"name":"Yash Agarwal","type":"card","url":"https://yashagarwal.in/"},"children":[{"content":{"html":"\u003cp\u003eBefore I start, here is some technical information about my website -\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHosted on Gitlab and usage its CD for automatic deployment, which is triggered on a git commit.\u003c/li\u003e\n\u003cli\u003eThe domain name registrar is GoDaddy.\u003c/li\u003e\n\u003cli\u003eLet\u0026rsquo;s Encrypt as the TLS certificate provider for my domain name.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLet\u0026rsquo;s Encrypt provides certificates for 90 days only, so I was forced to set up the \u003ccode\u003ecertbot\u003c/code\u003e every three months, then generate the certificate and \u003cem\u003emanually\u003c/em\u003e deploy the certificates to GitLab. It was frustrating because in three months, my shell probably will not remember the command I used last time, and I was too lazy to document the process somewhere.\u003c/p\u003e\n\u003cp\u003eThen I came across a \u003ca href=\"https://github.com/pallavagarwal07/NamesiloCert\"\u003eproject\u003c/a\u003e, which was trying to do a similar thing with other domain name registrar. I thought that this is an excellent setup to adapt and modify it to suit my needs. So I decided to write my module for automatic deployment of Let\u0026rsquo;s Encrypt certificates to GitLab.\u003c/p\u003e\n\u003ch2 id=\"how-does-lets-encrypt-work\"\u003eHow does Let\u0026rsquo;s Encrypt work?\u003c/h2\u003e\n\u003cp\u003eBefore Let\u0026rsquo;s Encrypt can generate the certificate for the domain, it requires the user to prove domain ownership. Let\u0026rsquo;s Encrypt provides two \u003ca href=\"https://letsencrypt.org/docs/challenge-types/\"\u003emethods\u003c/a\u003e to do this task -\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUpdating the DNS records of the domain registrar (DNS-01 challenge)\u003c/li\u003e\n\u003cli\u003eAdding an HTTP resource under a well-known URI on the website (HTTP-01 challenge)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eUsing the second method requires me to add a file on my website, and I did not want to do that. Moreover, if in the future, I decide to host some other service, which does not have a website, then this method will fail.\u003c/p\u003e\n\u003cp\u003eThe first method requires that the domain configuration on the domain registrar is modified. GoDaddy provides a robust API, and it is not difficult to utilize that API to automate specific tasks. The probability of changing the registrar is quite low, at least for the next few years. It will be easier to generate the certificates for any subdomains, as all the subdomains will also be hosted under the same domain registrar.\u003c/p\u003e\n\u003ch2 id=\"how-does-the-tool-work\"\u003eHow does the tool work?\u003c/h2\u003e\n\u003cp\u003eSo here are the steps:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eCall \u003ccode\u003ecertbot\u003c/code\u003e with all the domain names\u003c/li\u003e\n\u003cli\u003eInvoke GoDaddy API to update the DNS records as indicated by Certbot\u003c/li\u003e\n\u003cli\u003eWait for 10 minutes for DNS changes to propagate\u003c/li\u003e\n\u003cli\u003eLet \u003ccode\u003ecertbot\u003c/code\u003e verify the DNS changes\u003c/li\u003e\n\u003cli\u003eUse the GitLab API to deploy the generated certificates to GitLab pages\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"step-1-invoking-certbot\"\u003eStep 1: Invoking certbot\u003c/h3\u003e\n\u003cp\u003eIn step 1, we call \u003ccode\u003ecertbot\u003c/code\u003e will the preferred method DNS. We also need to supply an email id (used by Let\u0026rsquo;s Encrypt to notify domain expiration). The \u003ccode\u003eEMAIL_ID\u003c/code\u003e environment variable can be used to store the email id of the user.\u003c/p\u003e\n\u003cp\u003eCertbot runs in an interactive mode by default. It is not desired in a scripted environment. Certbot also provides mechanisms to deploy the certificates to a local server automatically, but as we are hosting our website on Gitlab, we do not want the automatic deployment facility. So we need to invoke the \u003ccode\u003ecertbot\u003c/code\u003e command with \u003ccode\u003e--manual\u003c/code\u003e and \u003ccode\u003ecertonly\u003c/code\u003e modes.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ecertbot   --manual \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          --preferred-challenges dns \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          --agree-tos \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          --email \u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003eEMAIL_ID\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          --no-eff-email \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          --expand \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          --renew-by-default \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          --manual-public-ip-logging-ok \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          --noninteractive \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          --redirect \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          --config-dir \u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003eDIR\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e/generated/config \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          --work-dir \u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003eDIR\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e/generated/work \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          --logs-dir \u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003eDIR\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e/generated/logs \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          --manual-auth-hook \u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003eDIR\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e/auth_hook.sh \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          -d yashagarwal.in \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e          certonly\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe explanation for most of the flags used in the above command can be found by running the following command -\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ecertbot --help\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003ccode\u003e--manual-auth-hook\u003c/code\u003e flag is worth looking. This hook provides a mechanism to specify the executable, which can be used to facilitate domain ownership validation. In this case, the hook points to a script \u003ccode\u003eauth_hook.sh\u003c/code\u003e, which then calls a Go client, which interacts with GoDaddy API.\u003c/p\u003e\n\u003ch3 id=\"step-2-adding-dns-entry-to-godaddy-dns-manager\"\u003eStep 2: Adding DNS entry to GoDaddy DNS manager\u003c/h3\u003e\n\u003cp\u003eCertbot supplies two environment variables \u003ccode\u003eCERTBOT_DOMAIN\u003c/code\u003e, which contains the domain name to be verified and \u003ccode\u003eCERTBOT_VALIDATION\u003c/code\u003e, which includes a random string corresponding to \u003ccode\u003e_acme-challenge TXT\u003c/code\u003e entry. What this means is that, if I have\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003eCERTBOT_DOMAIN=yashagarwal.in\nCERTBOT_VALIDATION=6VNg5kDVI_BF1S9N5s74LTBHQnwDpQqKlblKRjIzBwM\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThen the DNS manager should contain a TXT entry \u003ccode\u003e_acme-challenge.yashagarwal.in\u003c/code\u003e with the value of \u003ccode\u003e6VNg5kDVI_BF1S9N5s74LTBHQnwDpQqKlblKRjIzBwM\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eauth_hook.sh\u003c/code\u003e file calls the Go client with the abovementioned environment variables. The relevant code can be found \u003ca href=\"https://github.com/yashhere/GoDaddy-GitLab-Certs/blob/master/auth_hook.sh\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eOnce all the DNS entries are added, the \u003ccode\u003eauth_hook.sh\u003c/code\u003e script will sleep for 10 minutes. It is to allow DNS changes to propagate throughout the Internet. It is a random duration as I could not find any GoDaddy support page mentioning the exact period used by them.\u003c/p\u003e\n\u003ch3 id=\"step-3-generation-of-certificates\"\u003eStep 3: Generation of certificates\u003c/h3\u003e\n\u003cp\u003eOnce the \u003ccode\u003eauth_hook.sh\u003c/code\u003e script returns successfully, \u003ccode\u003ecertbot\u003c/code\u003e will verify the DNS records. If the verification is successful, \u003ccode\u003ecertbot\u003c/code\u003e will generate the certificates in \u003ccode\u003e./generated/config/live/{CERTBOT_DOMAIN}\u003c/code\u003e directory.\u003c/p\u003e\n\u003ch3 id=\"step-4-deploying-the-certificates-to-gitlab\"\u003eStep 4: Deploying the certificates to GitLab\u003c/h3\u003e\n\u003cp\u003eI use the following command to deploy the certificates to Gitlab pages where my website is hosted -\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ecurl  -vvv \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e      --request PUT \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e      --header \u003cspan class=\"s2\"\u003e\u0026#34;Private-Token:\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003eGITLAB_TOKEN\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e      --form \u003cspan class=\"s2\"\u003e\u0026#34;certificate=@\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003ekey_dir\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e/fullchain.pem\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e      --form \u003cspan class=\"s2\"\u003e\u0026#34;key=@\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003ekey_dir\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e/privkey.pem\u0026#34;\u003c/span\u003e \u003cspan class=\"se\"\u003e\\ \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;https://gitlab.com/api/v4/projects/yashhere%2Fyashhere.gitlab.io/pages/domains/yashagarwal.in\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003ewhere\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"nv\"\u003ekey_dir\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;./generated/config/live/yashagarwal.in\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eMoreover, \u003ccode\u003eGITLAB_TOKEN\u003c/code\u003e is an environment variable that contains the API token generated from the Gitlab settings page.\u003c/p\u003e\n\u003ch2 id=\"automatic-deployment-using-travis-ci\"\u003eAutomatic Deployment using Travis CI\u003c/h2\u003e\n\u003cp\u003eIt is not automation if I have to run this script manually every three months. So I created a Travis CI job to automate this process. The job will run every month and deploy my certificates automatically. It has been four months, and I have not faced any issues with this setup.\u003c/p\u003e\n\u003cp\u003eThe code for this post can be viewed at \u003ca href=\"https://github.com/yashhere/GoDaddy-GitLab-Certs\"\u003eGithub\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThanks for reading. Cheers 😄\u003c/p\u003e\n","text":"Before I start, here is some technical information about my website -\n Hosted on Gitlab and usage its CD for automatic deployment, which is triggered on a git commit. The domain name registrar is GoDaddy. Let\u0026rsquo;s Encrypt as the TLS certificate provider for my domain name.  Let\u0026rsquo;s Encrypt provides certificates for 90 days only, so I was forced to set up the certbot every three months, then generate the certificate and manually deploy the certificates to GitLab. It was frustrating because in three months, my shell probably will not remember the command I used last time, and I was too lazy to document the process somewhere.\nThen I came across a project, which was trying to do a similar thing with other domain name registrar. I thought that this is an excellent setup to adapt and modify it to suit my needs. So I decided to write my module for automatic deployment of Let\u0026rsquo;s Encrypt certificates to GitLab.\nHow does Let\u0026rsquo;s Encrypt work? Before Let\u0026rsquo;s Encrypt can generate the certificate for the domain, it requires the user to prove domain ownership. Let\u0026rsquo;s Encrypt provides two methods to do this task -\n Updating the DNS records of the domain registrar (DNS-01 challenge) Adding an HTTP resource under a well-known URI on the website (HTTP-01 challenge)  Using the second method requires me to add a file on my website, and I did not want to do that. Moreover, if in the future, I decide to host some other service, which does not have a website, then this method will fail.\nThe first method requires that the domain configuration on the domain registrar is modified. GoDaddy provides a robust API, and it is not difficult to utilize that API to automate specific tasks. The probability of changing the registrar is quite low, at least for the next few years. It will be easier to generate the certificates for any subdomains, as all the subdomains will also be hosted under the same domain registrar.\nHow does the tool work? So here are the steps:\n Call certbot with all the domain names Invoke GoDaddy API to update the DNS records as indicated by Certbot Wait for 10 minutes for DNS changes to propagate Let certbot verify the DNS changes Use the GitLab API to deploy the generated certificates to GitLab pages  Step 1: Invoking certbot In step 1, we call certbot will the preferred method DNS. We also need to supply an email id (used by Let\u0026rsquo;s Encrypt to notify domain expiration). The EMAIL_ID environment variable can be used to store the email id of the user.\nCertbot runs in an interactive mode by default. It is not desired in a scripted environment. Certbot also provides mechanisms to deploy the certificates to a local server automatically, but as we are hosting our website on Gitlab, we do not want the automatic deployment facility. So we need to invoke the certbot command with --manual and certonly modes.\ncertbot --manual \\  --preferred-challenges dns \\  --agree-tos \\  --email \u0026#34;${EMAIL_ID}\u0026#34; \\  --no-eff-email \\  --expand \\  --renew-by-default \\  --manual-public-ip-logging-ok \\  --noninteractive \\  --redirect \\  --config-dir ${DIR}/generated/config \\  --work-dir ${DIR}/generated/work \\  --logs-dir ${DIR}/generated/logs \\  --manual-auth-hook ${DIR}/auth_hook.sh \\  -d yashagarwal.in \\  certonly The explanation for most of the flags used in the above command can be found by running the following command -\ncertbot --help The --manual-auth-hook flag is worth looking. This hook provides a mechanism to specify the executable, which can be used to facilitate domain ownership validation. In this case, the hook points to a script auth_hook.sh, which then calls a Go client, which interacts with GoDaddy API.\nStep 2: Adding DNS entry to GoDaddy DNS manager Certbot supplies two environment variables CERTBOT_DOMAIN, which contains the domain name to be verified and CERTBOT_VALIDATION, which includes a random string corresponding to _acme-challenge TXT entry. What this means is that, if I have\nCERTBOT_DOMAIN=yashagarwal.in CERTBOT_VALIDATION=6VNg5kDVI_BF1S9N5s74LTBHQnwDpQqKlblKRjIzBwM Then the DNS manager should contain a TXT entry _acme-challenge.yashagarwal.in with the value of 6VNg5kDVI_BF1S9N5s74LTBHQnwDpQqKlblKRjIzBwM.\nThe auth_hook.sh file calls the Go client with the abovementioned environment variables. The relevant code can be found here.\nOnce all the DNS entries are added, the auth_hook.sh script will sleep for 10 minutes. It is to allow DNS changes to propagate throughout the Internet. It is a random duration as I could not find any GoDaddy support page mentioning the exact period used by them.\nStep 3: Generation of certificates Once the auth_hook.sh script returns successfully, certbot will verify the DNS records. If the verification is successful, certbot will generate the certificates in ./generated/config/live/{CERTBOT_DOMAIN} directory.\nStep 4: Deploying the certificates to GitLab I use the following command to deploy the certificates to Gitlab pages where my website is hosted -\ncurl -vvv \\  --request PUT \\  --header \u0026#34;Private-Token:${GITLAB_TOKEN}\u0026#34; \\  --form \u0026#34;certificate=@${key_dir}/fullchain.pem\u0026#34; \\  --form \u0026#34;key=@${key_dir}/privkey.pem\u0026#34; \\ \u0026#34;https://gitlab.com/api/v4/projects/yashhere%2Fyashhere.gitlab.io/pages/domains/yashagarwal.in\u0026#34; where\nkey_dir=\u0026#34;./generated/config/live/yashagarwal.in\u0026#34; Moreover, GITLAB_TOKEN is an environment variable that contains the API token generated from the Gitlab settings page.\nAutomatic Deployment using Travis CI It is not automation if I have to run this script manually every three months. So I created a Travis CI job to automate this process. The job will run every month and deploy my certificates automatically. It has been four months, and I have not faced any issues with this setup.\nThe code for this post can be viewed at Github.\nThanks for reading. Cheers 😄\n"},"name":"Automatic HTTPS Certs Using GoDaddy and Gitlab APIs","published":"2019-07-23T16:40:28+05:30","summary":"Before I start, here is some technical information about my website -\n Hosted on Gitlab and usage its CD for automatic deployment, which is triggered on a git commit. The domain name registrar is GoDaddy. Let\u0026rsquo;s Encrypt as the TLS certificate provider for my domain name.  Let\u0026rsquo;s Encrypt provides certificates for 90 days only, so I was forced to set up the certbot every three months, then generate the certificate and manually deploy the certificates to GitLab.","type":"entry","url":"https://yashagarwal.in/posts/2019/07/automatic-https-certs-using-godaddy-and-gitlab-apis/"},{"content":{"html":"\u003cp\u003eRecently, I am experimenting with Web Application Firewalls a lot. ModSecurity is one of them. It is the most famous and useful open-source Web Application Firewall (WAF) in existence. It is supported by various web servers such as Apache, Nginx, and IIS.\u003c/p\u003e\n\u003cp\u003eThe job of ModSecurity is to sit in front of the application web server and check the incoming requests and outgoing responses to filter out malicious content. It does so by the use of powerful and complex regular expressions. ModSecurity uses a rule language for its rules. The rule language has variables and operators defined to aid in the process of parsing HTTP requests.\u003c/p\u003e\n\u003cp\u003eModSecurity, in itself, cannot block or allow requests. It is just a rule engine. It requires rules to operate appropriately. That\u0026rsquo;s where its sister project, Core Rule Set (CRS), comes into the picture. CRS is a rule set developed to be used with ModSecurity. It has been in active development for several years now and is very mature. Together, ModSecurity and CRS form a formidable defense against the widespread web application attacks.\u003c/p\u003e\n\u003cp\u003eNow that you know, what a WAF is, let\u0026rsquo;s proceed to install ModSecurity on Ubuntu. I will be compiling ModSecurity\u0026rsquo;s latest version on Ubuntu 18.04. We will also configure ModSecurity to use Core Rule Set.\u003c/p\u003e\n\u003ch2 id=\"installing-dependencies\"\u003eInstalling Dependencies\u003c/h2\u003e\n\u003cp\u003eModSecurity requires some dependencies to work correctly. Let\u0026rsquo;s install them -\u003c/p\u003e\n\u003cp\u003eFirst, upgrade the Ubuntu system.\u003c/p\u003e\n\u003cdiv class=\"highlight-wrapper\"\u003e\n    \u003cdiv class=\"highlight-before\"\u003ebash\u003c/div\u003e\n    \n        \u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo apt-get -y update\nsudo apt-get -y upgrade\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n    \n\u003c/div\u003e\n\u003cp\u003eNow install the dependencies.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo apt-get -y install git libtool dh-autoreconf pkgconf gawk libcurl4-gnutls-dev libexpat1-dev libpcre3-dev libssl-dev libxml2-dev libyajl-dev zlibc zlib1g-dev libxml2 libpcre++-dev libxml2-dev libgeoip-dev liblmdb-dev lua5.2-dev iputils-ping locales apache2 apache2-dev ca-certificates wget\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e\u003cem\u003eOptional\u003c/em\u003e: clean up the Ubuntu caches.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo apt-get clean \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e sudo rm -rf /var/lib/apt/lists/*\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eInstall \u003ccode\u003eSSDeep\u003c/code\u003e as well (as done \u003ca href=\"https://github.com/CRS-support/modsecurity-docker/blob/v3/apache-apache/Dockerfile\"\u003ehere\u003c/a\u003e)\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e ~\ngit clone https://github.com/ssdeep-project/ssdeep\n\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e ssdeep\n./bootstrap\n./configure\nmake\nsudo make install\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"compiling-modsecurity\"\u003eCompiling ModSecurity\u003c/h2\u003e\n\u003cp\u003eLet\u0026rsquo;s clone ModSecurity from Github.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e ~\ngit clone -b v3/master --single-branch https://github.com/SpiderLabs/ModSecurity\n\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e ModSecurity\ngit submodule init\ngit submodule update\n./build.sh\n./configure\nmake                \u003cspan class=\"c1\"\u003e# takes ~8 minutes on AWS t2.micro\u003c/span\u003e\nsudo make install\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"compiling-modsecurity-apache-connector\"\u003eCompiling ModSecurity-apache connector\u003c/h2\u003e\n\u003cp\u003eTo configure it with Apache, we will require ModSecurity-apache connector. Let\u0026rsquo;s install that as well.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e ~\ngit clone https://github.com/SpiderLabs/ModSecurity-apache\n\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e ModSecurity-apache\n./autogen.sh\n./configure --with-libmodsecurity\u003cspan class=\"o\"\u003e=\u003c/span\u003e/usr/local/modsecurity\nmake\nsudo make install\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"setting-up-crs-rules\"\u003eSetting up CRS rules\u003c/h2\u003e\n\u003cp\u003eNow, let\u0026rsquo;s download CRS rule set as well.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e ~\ngit clone -b v3.2/dev https://github.com/SpiderLabs/owasp-modsecurity-crs\nsudo mv owasp-modsecurity-crs/ /usr/local/\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eRename CRS configuration file -\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo mv /usr/local/owasp-modsecurity-crs/crs-setup.conf.example /usr/local/owasp-modsecurity-crs/crs-setup.conf\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"setting-up-modsecurity\"\u003eSetting up ModSecurity\u003c/h2\u003e\n\u003cp\u003eNow, we need to create a file in the Apache modules directory, so that Apache can know, how to activate ModSecurity.\u003c/p\u003e\n\u003cp\u003eCreate \u003ccode\u003e/etc/apache2/mods-enabled/security3.conf\u003c/code\u003e file and paste the following contents -\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eLoadModule security3_module /usr/lib/apache2/modules/mod_security3.so\nmodsecurity on\nmodsecurity_rules_file \u003cspan class=\"s1\"\u003e\u0026#39;/etc/apache2/modsec/main.conf\u0026#39;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAs you can see, the last line in the above code block reference a file \u003ccode\u003emain.conf\u003c/code\u003e in a folder \u003ccode\u003emodsec\u003c/code\u003e. This folder will not be present by default. We need to create that.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo mkdir -p /etc/apache2/modsec\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eSetup ModSecurity configuration file -\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"c1\"\u003e# enables Unicode support in ModSecurity\u003c/span\u003e\nsudo wget -P /etc/apache2/modsec/ https://raw.githubusercontent.com/SpiderLabs/ModSecurity/v3/master/unicode.mapping\n\nsudo wget -P /etc/apache2/modsec/ https://raw.githubusercontent.com/SpiderLabs/ModSecurity/v3/master/modsecurity.conf-recommended\nsudo mv /etc/apache2/modsec/modsecurity.conf-recommended /etc/apache2/modsec/modsecurity.conf\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eChange the SecRuleEngine directive in the configuration to change from the default \u0026ldquo;detection only\u0026rdquo; mode to actively dropping malicious traffic.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo sed -i \u003cspan class=\"s1\"\u003e\u0026#39;s/SecRuleEngine DetectionOnly/SecRuleEngine On/\u0026#39;\u003c/span\u003e /etc/apache2/modsec/modsecurity.conf\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eChange the location of \u003ccode\u003emodsec_audit.log\u003c/code\u003e file to Apache log directory.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo sed -i \u003cspan class=\"s1\"\u003e\u0026#39;s/SecAuditLog \\/var\\/log\\/modsec_audit.log/SecAuditLog \\/var\\/log\\/apache2\\/modsec_audit.log/\u0026#39;\u003c/span\u003e /etc/apache2/modsec/modsecurity.conf\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eTo configure ModSecurity to use CRS rule set, put the following text in \u003ccode\u003e/etc/apache2/modsec/main.conf\u003c/code\u003e file.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eInclude \u003cspan class=\"s2\"\u003e\u0026#34;/etc/apache2/modsec/modsecurity.conf\u0026#34;\u003c/span\u003e\nInclude \u003cspan class=\"s2\"\u003e\u0026#34;/usr/local/owasp-modsecurity-crs/crs-setup.conf\u0026#34;\u003c/span\u003e\nInclude \u003cspan class=\"s2\"\u003e\u0026#34;/usr/local/owasp-modsecurity-crs/rules/*.conf\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAlso enable some Apache modules for better functioning of ModSecurity.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo a2enmod unique_id headers rewrite actions dav dav_fs\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow restart the Apache server\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo systemctl restart apache2\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"fixing-some-common-issues\"\u003eFixing some common issues\u003c/h2\u003e\n\u003cp\u003eSometimes, I had encountered errors when ModSecurity was not able to append logs to its log file. I figured out that ModSecurity did not have enough permissions to write that file. We can fix this issue quickly.\u003c/p\u003e\n\u003cp\u003eFirst, test if you really have this issue or not.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ecurl \u003cspan class=\"s1\"\u003e\u0026#39;http://localhost/?q=\u0026#34;\u0026gt;\u0026lt;script\u0026gt;alert(1)\u0026lt;/script\u0026gt;\u0026#39;\u003c/span\u003e\n\u0026lt;!DOCTYPE HTML PUBLIC \u003cspan class=\"s2\"\u003e\u0026#34;-//IETF//DTD HTML 2.0//EN\u0026#34;\u003c/span\u003e\u0026gt;\n\u0026lt;html\u0026gt;\u0026lt;head\u0026gt;\n\u0026lt;title\u0026gt;403 Forbidden\u0026lt;/title\u0026gt;\n\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\n\u0026lt;h1\u0026gt;Forbidden\u0026lt;/h1\u0026gt;\n\u0026lt;p\u0026gt;You dont have permission to access / on this server.\u0026lt;br /\u0026gt;\u0026lt;/p\u0026gt;\n\u0026lt;hr\u0026gt;\n\u0026lt;address\u0026gt;Apache/2.4.29 \u003cspan class=\"o\"\u003e(\u003c/span\u003eUbuntu\u003cspan class=\"o\"\u003e)\u003c/span\u003e Server at localhost Port 80\u0026lt;/address\u0026gt;\n\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow go to Apache log directory and check the contents of \u003ccode\u003emodsec_audit.log\u003c/code\u003e file.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e /var/log/apache2\ntail modsec_audit.log\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou should see the following content -\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e---0LzdyETA---A--\n\u003cspan class=\"o\"\u003e[\u003c/span\u003e01/Jul/2019:14:42:41 +0000\u003cspan class=\"o\"\u003e]\u003c/span\u003e 156199216179.666171 127.0.0.1 \u003cspan class=\"m\"\u003e41824\u003c/span\u003e ip-xxx-xx-xx-xx.ap-south-1.compute.internal \u003cspan class=\"m\"\u003e80\u003c/span\u003e\n---0LzdyETA---B--\nGET /?q\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026gt;\u0026lt;script\u0026gt;alert(1)\u0026lt;/script\u0026gt; HTTP/1.1\n\u003c/span\u003e\u003cspan class=\"s2\"\u003eHost: localhost\n\u003c/span\u003e\u003cspan class=\"s2\"\u003eUser-Agent: curl/7.58.0\n\u003c/span\u003e\u003cspan class=\"s2\"\u003eAccept: */*\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e---TqjMwy7h---D--\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e---TqjMwy7h---F--\n\u003c/span\u003e\u003cspan class=\"s2\"\u003eHTTP/1.1 403\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e---TqjMwy7h---H--\n\u003c/span\u003e\u003cspan class=\"s2\"\u003eModSecurity: Warning. detected XSS using libinjection. [file \u0026#34;\u003c/span\u003e/usr/local/owasp-modsecurity-crs/rules/REQUEST-941-APPLICATION-ATTACK-XSS.conf\u003cspan class=\"s2\"\u003e\u0026#34;] [line \u0026#34;\u003c/span\u003e37\u003cspan class=\"s2\"\u003e\u0026#34;] [id \u0026#34;\u003c/span\u003e941100\u003cspan class=\"s2\"\u003e\u0026#34;] [rev \u0026#34;\u0026#34;] [msg \u0026#34;\u003c/span\u003eXSS Attack Detected via libinjection\u003cspan class=\"s2\"\u003e\u0026#34;] [data \u0026#34;\u003c/span\u003eMatched Data: XSS data found within ARGS:q: \u003cspan class=\"s2\"\u003e\u0026#34;\u0026gt;\u0026lt;script\u0026gt;alert(1)\u0026lt;/script\u0026gt;\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003eseverity \u003cspan class=\"s2\"\u003e\u0026#34;2\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003ever \u003cspan class=\"s2\"\u003e\u0026#34;OWASP_CRS/3.1.0\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003ematurity \u003cspan class=\"s2\"\u003e\u0026#34;0\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003eaccuracy \u003cspan class=\"s2\"\u003e\u0026#34;0\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003etag \u003cspan class=\"s2\"\u003e\u0026#34;application-multi\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003etag \u003cspan class=\"s2\"\u003e\u0026#34;language-multi\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003etag \u003cspan class=\"s2\"\u003e\u0026#34;platform-multi\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003etag \u003cspan class=\"s2\"\u003e\u0026#34;attack-xss\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003etag \u003cspan class=\"s2\"\u003e\u0026#34;OWASP_CRS/WEB_ATTACK/XSS\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003etag \u003cspan class=\"s2\"\u003e\u0026#34;WASCTC/WASC-8\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003etag \u003cspan class=\"s2\"\u003e\u0026#34;WASCTC/WASC-22\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003etag \u003cspan class=\"s2\"\u003e\u0026#34;OWASP_TOP_10/A3\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003etag \u003cspan class=\"s2\"\u003e\u0026#34;OWASP_AppSensor/IE1\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003etag \u003cspan class=\"s2\"\u003e\u0026#34;CAPEC-242\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003ehostname \u003cspan class=\"s2\"\u003e\u0026#34;localhost\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003euri \u003cspan class=\"s2\"\u003e\u0026#34;/\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003eunique_id \u003cspan class=\"s2\"\u003e\u0026#34;156198848361.198287\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003eref \u003cspan class=\"s2\"\u003e\u0026#34;v8,27t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNulls\u0026#34;\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n....\n....\n\n---TqjMwy7h---I--\n\n---TqjMwy7h---J--\n\n---TqjMwy7h---Z--\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIf you do not see the following content, and the file is empty or it does not exist, then ModSecurity was not able to open this file for writing. Use the following fix -\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"c1\"\u003e# find out the user, Apache is running as\u003c/span\u003e\n\u003cspan class=\"nv\"\u003eapache_user\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003eps -ef \u003cspan class=\"p\"\u003e|\u003c/span\u003e egrep \u003cspan class=\"s1\"\u003e\u0026#39;(httpd|apache2|apache)\u0026#39;\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e grep -v \u003cspan class=\"sb\"\u003e`\u003c/span\u003ewhoami\u003cspan class=\"sb\"\u003e`\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e grep -v root \u003cspan class=\"p\"\u003e|\u003c/span\u003e head -n1 \u003cspan class=\"p\"\u003e|\u003c/span\u003e awk \u003cspan class=\"s1\"\u003e\u0026#39;{print $1}\u0026#39;\u003c/span\u003e\u003cspan class=\"k\"\u003e)\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow, change the owner of Apache log directory to \u003ccode\u003eapache_user\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo chown -R \u003cspan class=\"nv\"\u003e$apache_user\u003c/span\u003e:\u003cspan class=\"nv\"\u003e$apache_user\u003c/span\u003e /var/log/apache2/*\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow, ModSecurity should be able to append logs to the file \u003ccode\u003emodsec_audit.log\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"bonus-enabling-json-logs\"\u003e\u003cem\u003eBonus\u003c/em\u003e: Enabling JSON logs\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e Honestly speaking, I was not able to make it work every time. I do not know what is the issue, but it works with some of the installations, and with some of the installations, it just doesn\u0026rsquo;t log anything to the \u003ccode\u003eaudit\u003c/code\u003e directory. If anyone has managed to make it work consistently, please let me know.\u003c/p\u003e\n\u003cp\u003eAnyway, if you are like me, who do not like the default ModSecurity log format, ModSecurity provides an option to generate logs in JSON format as well. To enable JSON support, the YAJL library should be installed. We already installed this package when we were installing dependencies, so our ModSecurity setup is compiled with JSON support. Let us now configure ModSecurity to generate JSON logs.\u003c/p\u003e\n\u003cp\u003eOpen the \u003ccode\u003e/etc/apache2/modsec/modsecurity.conf\u003c/code\u003e file and find the following lines -\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eSecAuditLogType           Serial\nSecAuditLog               /var/log/modsec_audit.log\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eOnce you have found the following lines, replace these lines with the following lines\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eSecAuditLogFormat         JSON\nSecAuditLogType           Parallel\nSecAuditLog               /var/log/apache2/modsec_audit.log\nSecAuditLogStorageDir     /var/log/apache2/audit/\n\nSecAuditLogFileMode       \u003cspan class=\"m\"\u003e0644\u003c/span\u003e\nSecAuditLogDirMode        \u003cspan class=\"m\"\u003e0755\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eRestart Apache server\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo systemctl restart apache2\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow, go to \u003ccode\u003e/var/log/apache2/\u003c/code\u003e directory and create \u003ccode\u003eaudit\u003c/code\u003e folder.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e /var/log/apache2\nsudo mkdir audit\n\n\u003cspan class=\"c1\"\u003e# make `apache_user` owner of this directory as well...\u003c/span\u003e\nsudo chown -R \u003cspan class=\"nv\"\u003e$apache_user\u003c/span\u003e:\u003cspan class=\"nv\"\u003e$apache_user\u003c/span\u003e /var/log/apache2/audit\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow, ModSecurity should be able to generate JSON logs in this directory. ModSecurity generates logs in the following format -\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003eubuntu@server:/var/log/apache2$ tree audit\naudit\n└── 20190701\n    ├── 20190701-1132\n    │   ├── 20190701-113225-156196094515.868593\n    │   └── 20190701-113226-156196094691.154769\n    ├── 20190701-1211\n    │   ├── 20190701-121122-156196328239.048942\n    │   └── 20190701-121122-156196328243.018882\n\n    ....\n    ....\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow, your site should be relatively more secure than before.\u003c/p\u003e\n\u003ch2 id=\"a-warning-though\"\u003eA warning, though\u003c/h2\u003e\n\u003cp\u003eCRS is known to generate a lot of false-positive when enabled completely. We have not touched CRS paranoia levels. By default, it is set to paranoia level 1, which is known to produce false positives rarely, but still, as a measure of precaution, monitor your site\u0026rsquo;s traffic for some time, and then decide if you need to disable some of the CRS rules or not.\u003c/p\u003e\n","text":"Recently, I am experimenting with Web Application Firewalls a lot. ModSecurity is one of them. It is the most famous and useful open-source Web Application Firewall (WAF) in existence. It is supported by various web servers such as Apache, Nginx, and IIS.\nThe job of ModSecurity is to sit in front of the application web server and check the incoming requests and outgoing responses to filter out malicious content. It does so by the use of powerful and complex regular expressions. ModSecurity uses a rule language for its rules. The rule language has variables and operators defined to aid in the process of parsing HTTP requests.\nModSecurity, in itself, cannot block or allow requests. It is just a rule engine. It requires rules to operate appropriately. That\u0026rsquo;s where its sister project, Core Rule Set (CRS), comes into the picture. CRS is a rule set developed to be used with ModSecurity. It has been in active development for several years now and is very mature. Together, ModSecurity and CRS form a formidable defense against the widespread web application attacks.\nNow that you know, what a WAF is, let\u0026rsquo;s proceed to install ModSecurity on Ubuntu. I will be compiling ModSecurity\u0026rsquo;s latest version on Ubuntu 18.04. We will also configure ModSecurity to use Core Rule Set.\nInstalling Dependencies ModSecurity requires some dependencies to work correctly. Let\u0026rsquo;s install them -\nFirst, upgrade the Ubuntu system.\nbash sudo apt-get -y update sudo apt-get -y upgrade  Now install the dependencies.\nsudo apt-get -y install git libtool dh-autoreconf pkgconf gawk libcurl4-gnutls-dev libexpat1-dev libpcre3-dev libssl-dev libxml2-dev libyajl-dev zlibc zlib1g-dev libxml2 libpcre++-dev libxml2-dev libgeoip-dev liblmdb-dev lua5.2-dev iputils-ping locales apache2 apache2-dev ca-certificates wget Optional: clean up the Ubuntu caches.\nsudo apt-get clean \u0026amp;\u0026amp; sudo rm -rf /var/lib/apt/lists/* Install SSDeep as well (as done here)\ncd ~ git clone https://github.com/ssdeep-project/ssdeep cd ssdeep ./bootstrap ./configure make sudo make install Compiling ModSecurity Let\u0026rsquo;s clone ModSecurity from Github.\ncd ~ git clone -b v3/master --single-branch https://github.com/SpiderLabs/ModSecurity cd ModSecurity git submodule init git submodule update ./build.sh ./configure make # takes ~8 minutes on AWS t2.micro sudo make install Compiling ModSecurity-apache connector To configure it with Apache, we will require ModSecurity-apache connector. Let\u0026rsquo;s install that as well.\ncd ~ git clone https://github.com/SpiderLabs/ModSecurity-apache cd ModSecurity-apache ./autogen.sh ./configure --with-libmodsecurity=/usr/local/modsecurity make sudo make install Setting up CRS rules Now, let\u0026rsquo;s download CRS rule set as well.\ncd ~ git clone -b v3.2/dev https://github.com/SpiderLabs/owasp-modsecurity-crs sudo mv owasp-modsecurity-crs/ /usr/local/ Rename CRS configuration file -\nsudo mv /usr/local/owasp-modsecurity-crs/crs-setup.conf.example /usr/local/owasp-modsecurity-crs/crs-setup.conf Setting up ModSecurity Now, we need to create a file in the Apache modules directory, so that Apache can know, how to activate ModSecurity.\nCreate /etc/apache2/mods-enabled/security3.conf file and paste the following contents -\nLoadModule security3_module /usr/lib/apache2/modules/mod_security3.so modsecurity on modsecurity_rules_file \u0026#39;/etc/apache2/modsec/main.conf\u0026#39; As you can see, the last line in the above code block reference a file main.conf in a folder modsec. This folder will not be present by default. We need to create that.\nsudo mkdir -p /etc/apache2/modsec Setup ModSecurity configuration file -\n# enables Unicode support in ModSecurity sudo wget -P /etc/apache2/modsec/ https://raw.githubusercontent.com/SpiderLabs/ModSecurity/v3/master/unicode.mapping sudo wget -P /etc/apache2/modsec/ https://raw.githubusercontent.com/SpiderLabs/ModSecurity/v3/master/modsecurity.conf-recommended sudo mv /etc/apache2/modsec/modsecurity.conf-recommended /etc/apache2/modsec/modsecurity.conf Change the SecRuleEngine directive in the configuration to change from the default \u0026ldquo;detection only\u0026rdquo; mode to actively dropping malicious traffic.\nsudo sed -i \u0026#39;s/SecRuleEngine DetectionOnly/SecRuleEngine On/\u0026#39; /etc/apache2/modsec/modsecurity.conf Change the location of modsec_audit.log file to Apache log directory.\nsudo sed -i \u0026#39;s/SecAuditLog \\/var\\/log\\/modsec_audit.log/SecAuditLog \\/var\\/log\\/apache2\\/modsec_audit.log/\u0026#39; /etc/apache2/modsec/modsecurity.conf To configure ModSecurity to use CRS rule set, put the following text in /etc/apache2/modsec/main.conf file.\nInclude \u0026#34;/etc/apache2/modsec/modsecurity.conf\u0026#34; Include \u0026#34;/usr/local/owasp-modsecurity-crs/crs-setup.conf\u0026#34; Include \u0026#34;/usr/local/owasp-modsecurity-crs/rules/*.conf\u0026#34; Also enable some Apache modules for better functioning of ModSecurity.\nsudo a2enmod unique_id headers rewrite actions dav dav_fs Now restart the Apache server\nsudo systemctl restart apache2 Fixing some common issues Sometimes, I had encountered errors when ModSecurity was not able to append logs to its log file. I figured out that ModSecurity did not have enough permissions to write that file. We can fix this issue quickly.\nFirst, test if you really have this issue or not.\ncurl \u0026#39;http://localhost/?q=\u0026#34;\u0026gt;\u0026lt;script\u0026gt;alert(1)\u0026lt;/script\u0026gt;\u0026#39; \u0026lt;!DOCTYPE HTML PUBLIC \u0026#34;-//IETF//DTD HTML 2.0//EN\u0026#34;\u0026gt; \u0026lt;html\u0026gt;\u0026lt;head\u0026gt; \u0026lt;title\u0026gt;403 Forbidden\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt;\u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Forbidden\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;You dont have permission to access / on this server.\u0026lt;br /\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;address\u0026gt;Apache/2.4.29 (Ubuntu) Server at localhost Port 80\u0026lt;/address\u0026gt; \u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt; Now go to Apache log directory and check the contents of modsec_audit.log file.\ncd /var/log/apache2 tail modsec_audit.log You should see the following content -\n---0LzdyETA---A-- [01/Jul/2019:14:42:41 +0000] 156199216179.666171 127.0.0.1 41824 ip-xxx-xx-xx-xx.ap-south-1.compute.internal 80 ---0LzdyETA---B-- GET /?q=\u0026#34;\u0026gt;\u0026lt;script\u0026gt;alert(1)\u0026lt;/script\u0026gt; HTTP/1.1 Host: localhost User-Agent: curl/7.58.0 Accept: */* ---TqjMwy7h---D-- ---TqjMwy7h---F-- HTTP/1.1 403 ---TqjMwy7h---H-- ModSecurity: Warning. detected XSS using libinjection. [file \u0026#34;/usr/local/owasp-modsecurity-crs/rules/REQUEST-941-APPLICATION-ATTACK-XSS.conf\u0026#34;] [line \u0026#34;37\u0026#34;] [id \u0026#34;941100\u0026#34;] [rev \u0026#34;\u0026#34;] [msg \u0026#34;XSS Attack Detected via libinjection\u0026#34;] [data \u0026#34;Matched Data: XSS data found within ARGS:q: \u0026#34;\u0026gt;\u0026lt;script\u0026gt;alert(1)\u0026lt;/script\u0026gt;\u0026#34;] [severity \u0026#34;2\u0026#34;] [ver \u0026#34;OWASP_CRS/3.1.0\u0026#34;] [maturity \u0026#34;0\u0026#34;] [accuracy \u0026#34;0\u0026#34;] [tag \u0026#34;application-multi\u0026#34;] [tag \u0026#34;language-multi\u0026#34;] [tag \u0026#34;platform-multi\u0026#34;] [tag \u0026#34;attack-xss\u0026#34;] [tag \u0026#34;OWASP_CRS/WEB_ATTACK/XSS\u0026#34;] [tag \u0026#34;WASCTC/WASC-8\u0026#34;] [tag \u0026#34;WASCTC/WASC-22\u0026#34;] [tag \u0026#34;OWASP_TOP_10/A3\u0026#34;] [tag \u0026#34;OWASP_AppSensor/IE1\u0026#34;] [tag \u0026#34;CAPEC-242\u0026#34;] [hostname \u0026#34;localhost\u0026#34;] [uri \u0026#34;/\u0026#34;] [unique_id \u0026#34;156198848361.198287\u0026#34;] [ref \u0026#34;v8,27t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNulls\u0026#34;] .... .... ---TqjMwy7h---I-- ---TqjMwy7h---J-- ---TqjMwy7h---Z-- If you do not see the following content, and the file is empty or it does not exist, then ModSecurity was not able to open this file for writing. Use the following fix -\n# find out the user, Apache is running as apache_user=\u0026#34;$(ps -ef | egrep \u0026#39;(httpd|apache2|apache)\u0026#39; | grep -v `whoami` | grep -v root | head -n1 | awk \u0026#39;{print $1}\u0026#39;)\u0026#34; Now, change the owner of Apache log directory to apache_user.\nsudo chown -R $apache_user:$apache_user /var/log/apache2/* Now, ModSecurity should be able to append logs to the file modsec_audit.log.\nBonus: Enabling JSON logs Note: Honestly speaking, I was not able to make it work every time. I do not know what is the issue, but it works with some of the installations, and with some of the installations, it just doesn\u0026rsquo;t log anything to the audit directory. If anyone has managed to make it work consistently, please let me know.\nAnyway, if you are like me, who do not like the default ModSecurity log format, ModSecurity provides an option to generate logs in JSON format as well. To enable JSON support, the YAJL library should be installed. We already installed this package when we were installing dependencies, so our ModSecurity setup is compiled with JSON support. Let us now configure ModSecurity to generate JSON logs.\nOpen the /etc/apache2/modsec/modsecurity.conf file and find the following lines -\nSecAuditLogType Serial SecAuditLog /var/log/modsec_audit.log Once you have found the following lines, replace these lines with the following lines\nSecAuditLogFormat JSON SecAuditLogType Parallel SecAuditLog /var/log/apache2/modsec_audit.log SecAuditLogStorageDir /var/log/apache2/audit/ SecAuditLogFileMode 0644 SecAuditLogDirMode 0755 Restart Apache server\nsudo systemctl restart apache2 Now, go to /var/log/apache2/ directory and create audit folder.\ncd /var/log/apache2 sudo mkdir audit # make `apache_user` owner of this directory as well... sudo chown -R $apache_user:$apache_user /var/log/apache2/audit Now, ModSecurity should be able to generate JSON logs in this directory. ModSecurity generates logs in the following format -\nubuntu@server:/var/log/apache2$ tree audit audit └── 20190701 ├── 20190701-1132 │ ├── 20190701-113225-156196094515.868593 │ └── 20190701-113226-156196094691.154769 ├── 20190701-1211 │ ├── 20190701-121122-156196328239.048942 │ └── 20190701-121122-156196328243.018882 .... .... Now, your site should be relatively more secure than before.\nA warning, though CRS is known to generate a lot of false-positive when enabled completely. We have not touched CRS paranoia levels. By default, it is set to paranoia level 1, which is known to produce false positives rarely, but still, as a measure of precaution, monitor your site\u0026rsquo;s traffic for some time, and then decide if you need to disable some of the CRS rules or not.\n"},"name":"Setting Up ModSecurity on Ubuntu","published":"2019-07-01T18:20:18+05:30","summary":"Recently, I am experimenting with Web Application Firewalls a lot. ModSecurity is one of them. It is the most famous and useful open-source Web Application Firewall (WAF) in existence. It is supported by various web servers such as Apache, Nginx, and IIS.\nThe job of ModSecurity is to sit in front of the application web server and check the incoming requests and outgoing responses to filter out malicious content. It does so by the use of powerful and complex regular expressions.","type":"entry","url":"https://yashagarwal.in/posts/2019/07/setting-up-modsecurity-on-ubuntu/"},{"content":{"html":"\u003cp\u003eI finished my last \u003ca href=\"/posts/2019/02/go-grpc-opa-a-perfect-union-part-2/\"\u003epost\u003c/a\u003e with the following issue -\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eNow, here one problem arises, how to make sure that the search results will not return any book which the user is not\nauthorized to access. We will solve this problem using OPA in the next and last post of this series.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eLet\u0026rsquo;s solve this issue now. We will use OPA\u0026rsquo;s declarative language, Rego, to implement policies which will decide on the\nbasis of some user-provided data, which all objects are to be returned to the user.\u003c/p\u003e\n\u003cp\u003eWe will also define a list of all the users who are part of this library. Here we are hardcoding this data, as I did\nnot want to waste my time in implementing a user registration service, but this functionality is not very important from\nour point of view. We will require only one field from this users data - the \u003ccode\u003euser_type\u003c/code\u003e field. This field will\ndetermine what the access level for the user is. We have already added the \u003ccode\u003eaccess_level\u003c/code\u003e field in the \u003ccode\u003eBook\u003c/code\u003e definition\nof our proto file.\u003c/p\u003e\n\u003cp\u003eWhen the user wants to search for a particular book, it will provide its \u003ccode\u003euser_type\u003c/code\u003e the ISBN of the book to our service. Our service\nwill take that ISBN and pass it to the OPA server. OPA server already has the \u003ccode\u003eBook\u003c/code\u003e data and the \u003ccode\u003eUser\u003c/code\u003e data. Now it has\nthe required ISBN to query the Book data. The Rego policy will query the Book data by ISBN. It will also\ncheck for the \u003ccode\u003eaccess_level\u003c/code\u003e condition. Moreover, after this operation, it will return the resultant set of books that satisfy both the requirements.\u003c/p\u003e\n\u003cp\u003eHere is the Rego policy -\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-ruby\" data-lang=\"ruby\"\u003e\u003cspan class=\"n\"\u003epackage\u003c/span\u003e \u003cspan class=\"n\"\u003elibrary\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebooks\u003c/span\u003e\n\u003cspan class=\"n\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003edata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eusers\u003c/span\u003e\n\u003cspan class=\"n\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003einput\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003esearch_books\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ebook\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003einput\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebook\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eisbn\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ebooks\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003eisbn\u003c/span\u003e\n  \u003cspan class=\"n\"\u003einput\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003euser_type\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003ebooks\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003eaccess_level\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ebook\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ebooks\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e]\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003elist_all_books\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ebooks\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e]]\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003einput\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003euser_type\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"n\"\u003ebooks\u003c/span\u003e\u003cspan class=\"o\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003eaccess_level\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe user data is \u003ca href=\"https://github.com/yashhere/go-library-service/blob/master/OPA/users.json\"\u003ehere\u003c/a\u003e and the book data is \u003ca href=\"https://github.com/yashhere/go-library-service/blob/master/add_books.sh\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eA sample \u003ccode\u003einput\u003c/code\u003e request is shown below -\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;input\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;book\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"nt\"\u003e\u0026#34;isbn\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;1128959038\u0026#34;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;user\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"nt\"\u003e\u0026#34;user_type\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe \u003ccode\u003einput\u003c/code\u003e is the data that the user is providing. In \u003ccode\u003esearch_books\u003c/code\u003e function, the input ISBN is matched with the ISBN\nof all books one by one. Then the resultant set of books is filtered by \u003ccode\u003euser_type\u003c/code\u003e and \u003ccode\u003eaccess_level\u003c/code\u003e (these\ntwo fields are essentially the same). In the last, the resultant set of books is assigned to the variable \u003ccode\u003ebook\u003c/code\u003e which\nwill be returned to the gRPC service.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003elist_all_books\u003c/code\u003e function is implemented similarly. The only difference is that we do not need to filter the books\nby ISBN. Filtering by \u003ccode\u003eaccess_level\u003c/code\u003e is enough.\u003c/p\u003e\n\u003cp\u003eNow our library service is completed. It is a very basic service. The intention was to show that the decision-making process can be offloaded to the OPA to reduce the complexity of the services. In this example, the advantages might not\nbe obvious, but in large production environments, where many services are running, it can make a significant\ndifference.\u003c/p\u003e\n\u003cp\u003eThe code for this series can be found on my \u003ca href=\"https://github.com/yashhere/go-library-service\"\u003eGithub\u003c/a\u003e account.\u003c/p\u003e\n\u003cp\u003eI hope you liked the article. Share your views and suggestions in the comments.\u003c/p\u003e\n\u003cp\u003eThanks for reading. Cheers :)\u003c/p\u003e\n","text":"I finished my last post with the following issue -\n Now, here one problem arises, how to make sure that the search results will not return any book which the user is not authorized to access. We will solve this problem using OPA in the next and last post of this series.\n Let\u0026rsquo;s solve this issue now. We will use OPA\u0026rsquo;s declarative language, Rego, to implement policies which will decide on the basis of some user-provided data, which all objects are to be returned to the user.\nWe will also define a list of all the users who are part of this library. Here we are hardcoding this data, as I did not want to waste my time in implementing a user registration service, but this functionality is not very important from our point of view. We will require only one field from this users data - the user_type field. This field will determine what the access level for the user is. We have already added the access_level field in the Book definition of our proto file.\nWhen the user wants to search for a particular book, it will provide its user_type the ISBN of the book to our service. Our service will take that ISBN and pass it to the OPA server. OPA server already has the Book data and the User data. Now it has the required ISBN to query the Book data. The Rego policy will query the Book data by ISBN. It will also check for the access_level condition. Moreover, after this operation, it will return the resultant set of books that satisfy both the requirements.\nHere is the Rego policy -\npackage library import data.books import data.users import input search_books[book] { input.book.isbn == books[i].isbn input.user.user_type \u0026gt;= books[i].access_level book = books[i] } list_all_books[books[i]] { input.user.user_type \u0026gt;= books[i].access_level } The user data is here and the book data is here.\nA sample input request is shown below -\n{ \u0026#34;input\u0026#34;: { \u0026#34;book\u0026#34;: { \u0026#34;isbn\u0026#34;: \u0026#34;1128959038\u0026#34; }, \u0026#34;user\u0026#34;: { \u0026#34;user_type\u0026#34;: 3 } } } The input is the data that the user is providing. In search_books function, the input ISBN is matched with the ISBN of all books one by one. Then the resultant set of books is filtered by user_type and access_level (these two fields are essentially the same). In the last, the resultant set of books is assigned to the variable book which will be returned to the gRPC service.\nThe list_all_books function is implemented similarly. The only difference is that we do not need to filter the books by ISBN. Filtering by access_level is enough.\nNow our library service is completed. It is a very basic service. The intention was to show that the decision-making process can be offloaded to the OPA to reduce the complexity of the services. In this example, the advantages might not be obvious, but in large production environments, where many services are running, it can make a significant difference.\nThe code for this series can be found on my Github account.\nI hope you liked the article. Share your views and suggestions in the comments.\nThanks for reading. Cheers :)\n"},"name":"Go + gRPC + OPA - A Perfect Union - Part 3","published":"2019-02-18T06:47:15+05:30","summary":"I finished my last post with the following issue -\n Now, here one problem arises, how to make sure that the search results will not return any book which the user is not authorized to access. We will solve this problem using OPA in the next and last post of this series.\n Let\u0026rsquo;s solve this issue now. We will use OPA\u0026rsquo;s declarative language, Rego, to implement policies which will decide on the basis of some user-provided data, which all objects are to be returned to the user.","type":"entry","url":"https://yashagarwal.in/posts/2019/02/go-grpc-opa-a-perfect-union-part-3/"},{"content":{"html":"\n\n\n\n    \n\n    \n    \n\n    \n    \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe.min.css\" integrity=\"sha256-sCl5PUOGMLfFYctzDW3MtRib0ctyUvI9Qsmq2wXOeBY=\" crossorigin=\"anonymous\" /\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/default-skin/default-skin.min.css\" integrity=\"sha256-BFeI1V+Vh1Rk37wswuOYn5lsTcaU96hGaI7OUVCLjPc=\" crossorigin=\"anonymous\" /\u003e\n\n    \n    \u003clink rel=\"stylesheet\" href=\"/css/photoswipe.min.d780348a887d97b4d6cc664301a2941706e4a02aeb1533524fcce3b7b9b64b4f.css\"\u003e\n\n    \n\n    \n    \u003cdiv class=\"pswp\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\"\u003e\n        \n        \u003cdiv class=\"pswp__bg\"\u003e\u003c/div\u003e\n        \n        \u003cdiv class=\"pswp__scroll-wrap\"\u003e\n            \n            \u003cdiv class=\"pswp__container\"\u003e\n                \u003cdiv class=\"pswp__item\"\u003e\u003c/div\u003e\n                \u003cdiv class=\"pswp__item\"\u003e\u003c/div\u003e\n                \u003cdiv class=\"pswp__item\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n            \n            \u003cdiv class=\"pswp__ui pswp__ui--hidden\"\u003e\n                \u003cdiv class=\"pswp__top-bar\"\u003e\n                    \n                    \u003cdiv class=\"pswp__counter\"\u003e\u003c/div\u003e\n                    \u003cbutton class=\"pswp__button pswp__button--close\" title=\"Close (Esc)\"\u003e\u003c/button\u003e\n                    \u003cbutton class=\"pswp__button pswp__button--share\" title=\"Share\"\u003e\u003c/button\u003e\n                    \u003cbutton class=\"pswp__button pswp__button--fs\" title=\"Toggle fullscreen\"\u003e\u003c/button\u003e\n                    \u003cbutton class=\"pswp__button pswp__button--zoom\" title=\"Zoom in/out\"\u003e\u003c/button\u003e\n                    \n                    \n                    \u003cdiv class=\"pswp__preloader\"\u003e\n                        \u003cdiv class=\"pswp__preloader__icn\"\u003e\n                            \u003cdiv class=\"pswp__preloader__cut\"\u003e\n                                \u003cdiv class=\"pswp__preloader__donut\"\u003e\u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"pswp__share-modal pswp__share-modal--hidden pswp__single-tap\"\u003e\n                    \u003cdiv class=\"pswp__share-tooltip\"\u003e\u003c/div\u003e\n                \u003c/div\u003e\n                \u003cbutton class=\"pswp__button pswp__button--arrow--left\" title=\"Previous (arrow left)\"\u003e\n                \u003c/button\u003e\n                \u003cbutton class=\"pswp__button pswp__button--arrow--right\" title=\"Next (arrow right)\"\u003e\n                \u003c/button\u003e\n                \u003cdiv class=\"pswp__caption\"\u003e\n                    \u003cdiv class=\"pswp__caption__center\"\u003e\u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n\u003cp\u003eIn the last \u003ca href=\"/posts/2019/02/go-grpc-opa-a-perfect-union-part-1/\"\u003epost\u003c/a\u003e, we discussed about the structure of our library\napplication. In this post, we will define the data definitions using protobuf, and then we will use these definitions to\ncreate a Go service. We will also add a REST interface to the service. So let\u0026rsquo;s get started.\u003c/p\u003e\n\u003ch2 id=\"defining-proto-definitions\"\u003eDefining Proto Definitions\u003c/h2\u003e\n\u003cp\u003egRPC uses protocol buffers for serializing structured data. To define the structure of the data that you want to serialize, we use a \u003cem\u003eproto\u003c/em\u003e file - it is a simple text file that contains all the logical pieces of your data in the form of \u003cem\u003emessages\u003c/em\u003e, and the methods that will be called over the network. To know more about the syntax of proto files, visit \u003ca href=\"https://grpc.io/docs/guides/\"\u003ethis\u003c/a\u003e link.\u003c/p\u003e\n\u003cp\u003eI have defined the following proto file -\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-proto\" data-lang=\"proto\"\u003e\u003cspan class=\"n\"\u003esyntax\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;proto3\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nn\"\u003elibrary\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;google/api/annotations.proto\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003eservice\u003c/span\u003e \u003cspan class=\"n\"\u003eLibraryService\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"k\"\u003erpc\u003c/span\u003e \u003cspan class=\"n\"\u003eListAllBooks\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eQueryFormat\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturns\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eBooks\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003eoption\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egoogle.api.http\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e      \u003cspan class=\"n\"\u003epost\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;/listBooks\u0026#34;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e      \u003cspan class=\"n\"\u003ebody\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;*\u0026#34;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"p\"\u003e};\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"p\"\u003e};\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"k\"\u003erpc\u003c/span\u003e \u003cspan class=\"n\"\u003eAddBook\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eQueryFormat\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturns\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eResponse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003eoption\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egoogle.api.http\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e      \u003cspan class=\"n\"\u003epost\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;/addBook\u0026#34;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e      \u003cspan class=\"n\"\u003ebody\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;*\u0026#34;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"p\"\u003e};\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"p\"\u003e};\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"k\"\u003erpc\u003c/span\u003e \u003cspan class=\"n\"\u003eSearchBook\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eQueryFormat\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturns\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eResponse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003eoption\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egoogle.api.http\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e      \u003cspan class=\"n\"\u003epost\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;/searchBook\u0026#34;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e      \u003cspan class=\"n\"\u003ebody\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;*\u0026#34;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"p\"\u003e};\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"p\"\u003e};\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e// the library\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003emessage\u003c/span\u003e \u003cspan class=\"nc\"\u003eLibrary\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003eBooks\u003c/span\u003e \u003cspan class=\"n\"\u003ebooks\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003emessage\u003c/span\u003e \u003cspan class=\"nc\"\u003eBooks\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003erepeated\u003c/span\u003e \u003cspan class=\"n\"\u003eBook\u003c/span\u003e \u003cspan class=\"n\"\u003ebooks\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e// metadata about a book\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003emessage\u003c/span\u003e \u003cspan class=\"nc\"\u003eBook\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003etitle\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003eauthor\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003eisbn\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003eint32\u003c/span\u003e \u003cspan class=\"n\"\u003eno_of_copies\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003eint32\u003c/span\u003e \u003cspan class=\"n\"\u003eaccess_level\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e// details about a user\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003emessage\u003c/span\u003e \u003cspan class=\"nc\"\u003eUser\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kd\"\u003eenum\u003c/span\u003e \u003cspan class=\"n\"\u003eUserType\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// https://github.com/golang/protobuf/issues/258\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eGARBAGE\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eStudent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eAdministration\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eFaculty\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003eint32\u003c/span\u003e \u003cspan class=\"n\"\u003eid_no\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"n\"\u003eUserType\u003c/span\u003e \u003cspan class=\"n\"\u003euser_type\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003emessage\u003c/span\u003e \u003cspan class=\"nc\"\u003eQueryFormat\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"n\"\u003eBook\u003c/span\u003e \u003cspan class=\"n\"\u003ebook\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"n\"\u003eUser\u003c/span\u003e \u003cspan class=\"n\"\u003euser\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003emessage\u003c/span\u003e \u003cspan class=\"nc\"\u003eResponse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003eaction\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003eint32\u003c/span\u003e \u003cspan class=\"n\"\u003estatus\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"kd\"\u003emessage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"k\"\u003eoneof\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eBook\u003c/span\u003e \u003cspan class=\"n\"\u003ebook\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eUser\u003c/span\u003e \u003cspan class=\"n\"\u003euser_data\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003emessage\u003c/span\u003e \u003cspan class=\"nc\"\u003eEmpty\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eTo compile it, run the following commands -\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eprotoc -I/usr/local/include -I. \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e-I\u003cspan class=\"nv\"\u003e$GOPATH\u003c/span\u003e/src \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e-I\u003cspan class=\"nv\"\u003e$GOPATH\u003c/span\u003e/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e--go_out\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nv\"\u003eplugins\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003egrpc:. \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003eapi/library.proto\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eprotoc -I/usr/local/include -I. \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  -I\u003cspan class=\"nv\"\u003e$GOPATH\u003c/span\u003e/src \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  -I\u003cspan class=\"nv\"\u003e$GOPATH\u003c/span\u003e/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  --grpc-gateway_out\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nv\"\u003elogtostderr\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003etrue:. \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  api/library.proto\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIt will generate corresponding Golang definitions of the messages and services defined in the Proto file. These\ndefinitions can be used by the server and client stubs to communicate with each other.\u003c/p\u003e\n\u003ch2 id=\"implementation-of-go-service\"\u003eImplementation of Go service\u003c/h2\u003e\n\u003cp\u003eNow we can start implementing the code for our services \u003ccode\u003eAddBook()\u003c/code\u003e, \u003ccode\u003eListAllBooks()\u003c/code\u003e and \u003ccode\u003eSearchBook()\u003c/code\u003e. It is going to\nbe a very naive implementation of a library system, but it will be sufficient to learn all the concepts.\u003c/p\u003e\n\u003cp\u003eMy implementation of the server stub is hosted\n\u003ca href=\"https://github.com/yashhere/go-library-service/blob/master/pkg/librarylib/server.go\"\u003ehere\u003c/a\u003e. A basic flow diagram of\nthis implementation will look like this -\u003c/p\u003e\n\n\n\n    \u003clink rel=\"stylesheet\" href=\"/css/hugo-easy-gallery.css\"\u003e\n    \n\n\n\u003cdiv class=\"box fancy-figure caption-position-bottom caption-effect-appear\" style=\"max-width:650px\" itemscope itemtype=\"http://schema.org/ImageGallery\"\u003e\n    \u003cfigure  itemprop=\"associatedMedia\" itemscope itemtype=\"http://schema.org/ImageObject\"\u003e\n        \u003cdiv class=\"img\"\u003e\n            \u003cimg itemprop=\"thumbnail\" src=\"/images/posts/2019-02-17/OPA_Service_Flow_Diagram.jpeg#center\" alt=\"Architecture\"/\u003e\n        \u003c/div\u003e\n        \u003ca href=\"/images/posts/2019-02-17/OPA_Service_Flow_Diagram.jpeg#center\" itemprop=\"contentUrl\"\u003e\u003c/a\u003e\n    \u003c/figure\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThe gRPC server will listen on port \u003ccode\u003e:50051\u003c/code\u003e, and a REST HTTP server will listen on port \u003ccode\u003e:8181\u003c/code\u003e. The OPA server is\nrunning on port \u003ccode\u003e:8182\u003c/code\u003e. The REST server is\nimplemented using \u003ca href=\"https://github.com/grpc-ecosystem/grpc-gateway\"\u003egRPC-Gateway\u003c/a\u003e. There are three methods - \u003ccode\u003eAddBook()\u003c/code\u003e,\n\u003ccode\u003eListAllBooks()\u003c/code\u003e, and \u003ccode\u003eSearchBook()\u003c/code\u003e. These methods can be called using either gRPC methods or using the REST endpoints\n\u003ccode\u003e/addBook\u003c/code\u003e, \u003ccode\u003e/listBooks\u003c/code\u003e and \u003ccode\u003e/searchBook\u003c/code\u003e. By design, the library gRPC service will not implement the authentication\npart of the service. The main purpose of using gRPC here is to provide a scalable and secure medium where all the\ncommunication between client and server is happening in binary format, which is slightly more secure than the\ntraditional mediums. In the current form, this gRPC server will accept requests from everyone and execute the desired\nfunctions. That is not desirable. What if a student tries to add a book to the library. Only Admins should be allowed to\nexecute such functions. What if someone who is not a student of the University tries to access the service. How to stop\nthem?\u003c/p\u003e\n\u003cp\u003eThere are two steps to solve this issue -\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eAuthentication\u003c/strong\u003e - It mainly deals with the question - who are you? It is a way to gain access to the system by verifying your identity. In our case, a user will provide its username and password to access the library service.\nWithout this authentication, the user will not be able to access the system. We will not be implementing authentication\nfunctionality in our application.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eAuthorization\u003c/strong\u003e - It deals with the question - which resources are you allowed to use? OPA can be used here to define various rights based on the access levels of the users.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIf you have noticed, I have defined an \u003ccode\u003eaccess_level\u003c/code\u003e field in the proto definition of the \u003ccode\u003eBook\u003c/code\u003e. This field will tell\nus what is the minimum access level required for a user to access this book.\u003c/p\u003e\n\u003cp\u003eAgain, in the proto definition of the \u003ccode\u003eUser\u003c/code\u003e, I have defined a \u003ccode\u003euser_type\u003c/code\u003e field. This field will serve as an indicator of\nthe access rights of the user. In the real world, these access rights will be decided after the user has authenticated\nherself to\nthe system, but here, we will hardcode the access rights.\u003c/p\u003e\n\u003cp\u003eSo, only users with access rights equal to \u003ccode\u003eAdministration\u003c/code\u003e will be allowed to add books to the system. Here we do not\ncare who the user is. If the user is supplying the correct access right, she will be allowed to operate.\nThe authentication logic in real-world scenarios will determine the \u003cem\u003ewho\u003c/em\u003e part.\u003c/p\u003e\n\u003cp\u003eThere are some books in the library, which have access rights equal to that of a \u003ccode\u003eFaculty\u003c/code\u003e. It means that only faculties\nwill be allowed to access those books. The students will not be able to access these books, even while searching for\nbooks using ISBN. This kind of mechanism can be implemented using OPA very quickly. We will see the implementation of the OPA\npart in the next post.\u003c/p\u003e\n\u003cp\u003eWhile querying the service, users are required to supply their identity (at least \u003ccode\u003euser_type\u003c/code\u003e) and the book ISBN if\nthey are searching for some book. The administrators are supposed to provide the name, author, access level, number of copies, and ISBN while adding the books. I have not added the error checking functionality in the code, but it should be\neasy enough to implement such functionality.\u003c/p\u003e\n\u003cp\u003eThe \u003ca href=\"https://github.com/yashhere/go-library-service/blob/master/cmd/main.go\"\u003emain.go\u003c/a\u003e file is the starting point of this service. It will spawn two servers in two Go Routines. Ideally, some synchronization mechanisms should be implemented in the code to avoid race conditions in some cases - for example, what will happen if two or more clients are trying to add the same book simultaneously. Here in our case, nothing serious\nwill happen, as OPA will take only one book per ISBN, and discard all the other books with the same ISBN even if the other\nmetadata is different (I designed the service in this way to keep the code easy enough to understand), but if there are\nother operations like DeleteBook and IssueBook, then the race conditions can cause issues.\u003c/p\u003e\n\u003cp\u003eIn the \u003ccode\u003eAddBook()\u003c/code\u003e function, the user provided book details will be sent to the OPA server using a REST call. OPA will\nstore this information in its in-memory store at a unique place determined by the ISBN of the book. In actual cases, the data should be stored in some persistent\nstorage, such as a DB. OPA will take the information from the DB. Again, to keep the implementation easy enough to\nunderstand, we are not using any such persistent storage. If any other book with different metadata but the same ISBN comes,\nthen OPA will overwrite the existing book with the new one.\u003c/p\u003e\n\u003cp\u003eIn the \u003ccode\u003eSearchBook()\u003c/code\u003e function, the user will provide the ISBN of the desired book. The gRPC service will call\nthe OPA using REST API and find if any such book exists or not.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eListAllBooks()\u003c/code\u003e is different in the way that it does not need any ISBN.\u003c/p\u003e\n\u003cp\u003eNow, here one problem arises, how to make sure that the search results will not return any book which the user is not\nauthorized to access. We will solve this problem using OPA in the next and last post of this series.\u003c/p\u003e\n\u003cp\u003eI hope that this post was helpful. If you have any doubts or want to say anything else, please comment. It will be a great\nmotivation and appreciation for me.\u003c/p\u003e\n\u003cp\u003eThanks for reading. Cheers 😄\u003c/p\u003e\n","text":"                         In the last post, we discussed about the structure of our library application. In this post, we will define the data definitions using protobuf, and then we will use these definitions to create a Go service. We will also add a REST interface to the service. So let\u0026rsquo;s get started.\nDefining Proto Definitions gRPC uses protocol buffers for serializing structured data. To define the structure of the data that you want to serialize, we use a proto file - it is a simple text file that contains all the logical pieces of your data in the form of messages, and the methods that will be called over the network. To know more about the syntax of proto files, visit this link.\nI have defined the following proto file -\nsyntax = \u0026#34;proto3\u0026#34;;package library;import \u0026#34;google/api/annotations.proto\u0026#34;;service LibraryService { rpc ListAllBooks(QueryFormat) returns (Books) { option (google.api.http) = { post : \u0026#34;/listBooks\u0026#34; body : \u0026#34;*\u0026#34; }; }; rpc AddBook(QueryFormat) returns (Response) { option (google.api.http) = { post : \u0026#34;/addBook\u0026#34; body : \u0026#34;*\u0026#34; }; }; rpc SearchBook(QueryFormat) returns (Response) { option (google.api.http) = { post : \u0026#34;/searchBook\u0026#34; body : \u0026#34;*\u0026#34; }; };}// the library message Library { Books books = 1; }message Books { repeated Book books = 1; }// metadata about a book message Book { string title = 1; string author = 2; string isbn = 3; int32 no_of_copies = 5; int32 access_level = 6;}// details about a user message User { enum UserType { // https://github.com/golang/protobuf/issues/258  GARBAGE = 0; Student = 1; Administration = 2; Faculty = 3; } string name = 1; int32 id_no = 2; UserType user_type = 4;}message QueryFormat { Book book = 1; User user = 2;}message Response { string action = 1; int32 status = 2; string message = 3; oneof value { Book book = 4; User user_data = 5; }}message Empty {} To compile it, run the following commands -\nprotoc -I/usr/local/include -I. \\ -I$GOPATH/src \\ -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \\ --go_out=plugins=grpc:. \\ api/library.proto protoc -I/usr/local/include -I. \\  -I$GOPATH/src \\  -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \\  --grpc-gateway_out=logtostderr=true:. \\  api/library.proto It will generate corresponding Golang definitions of the messages and services defined in the Proto file. These definitions can be used by the server and client stubs to communicate with each other.\nImplementation of Go service Now we can start implementing the code for our services AddBook(), ListAllBooks() and SearchBook(). It is going to be a very naive implementation of a library system, but it will be sufficient to learn all the concepts.\nMy implementation of the server stub is hosted here. A basic flow diagram of this implementation will look like this -\n    The gRPC server will listen on port :50051, and a REST HTTP server will listen on port :8181. The OPA server is running on port :8182. The REST server is implemented using gRPC-Gateway. There are three methods - AddBook(), ListAllBooks(), and SearchBook(). These methods can be called using either gRPC methods or using the REST endpoints /addBook, /listBooks and /searchBook. By design, the library gRPC service will not implement the authentication part of the service. The main purpose of using gRPC here is to provide a scalable and secure medium where all the communication between client and server is happening in binary format, which is slightly more secure than the traditional mediums. In the current form, this gRPC server will accept requests from everyone and execute the desired functions. That is not desirable. What if a student tries to add a book to the library. Only Admins should be allowed to execute such functions. What if someone who is not a student of the University tries to access the service. How to stop them?\nThere are two steps to solve this issue -\n  Authentication - It mainly deals with the question - who are you? It is a way to gain access to the system by verifying your identity. In our case, a user will provide its username and password to access the library service. Without this authentication, the user will not be able to access the system. We will not be implementing authentication functionality in our application.\n  Authorization - It deals with the question - which resources are you allowed to use? OPA can be used here to define various rights based on the access levels of the users.\n  If you have noticed, I have defined an access_level field in the proto definition of the Book. This field will tell us what is the minimum access level required for a user to access this book.\nAgain, in the proto definition of the User, I have defined a user_type field. This field will serve as an indicator of the access rights of the user. In the real world, these access rights will be decided after the user has authenticated herself to the system, but here, we will hardcode the access rights.\nSo, only users with access rights equal to Administration will be allowed to add books to the system. Here we do not care who the user is. If the user is supplying the correct access right, she will be allowed to operate. The authentication logic in real-world scenarios will determine the who part.\nThere are some books in the library, which have access rights equal to that of a Faculty. It means that only faculties will be allowed to access those books. The students will not be able to access these books, even while searching for books using ISBN. This kind of mechanism can be implemented using OPA very quickly. We will see the implementation of the OPA part in the next post.\nWhile querying the service, users are required to supply their identity (at least user_type) and the book ISBN if they are searching for some book. The administrators are supposed to provide the name, author, access level, number of copies, and ISBN while adding the books. I have not added the error checking functionality in the code, but it should be easy enough to implement such functionality.\nThe main.go file is the starting point of this service. It will spawn two servers in two Go Routines. Ideally, some synchronization mechanisms should be implemented in the code to avoid race conditions in some cases - for example, what will happen if two or more clients are trying to add the same book simultaneously. Here in our case, nothing serious will happen, as OPA will take only one book per ISBN, and discard all the other books with the same ISBN even if the other metadata is different (I designed the service in this way to keep the code easy enough to understand), but if there are other operations like DeleteBook and IssueBook, then the race conditions can cause issues.\nIn the AddBook() function, the user provided book details will be sent to the OPA server using a REST call. OPA will store this information in its in-memory store at a unique place determined by the ISBN of the book. In actual cases, the data should be stored in some persistent storage, such as a DB. OPA will take the information from the DB. Again, to keep the implementation easy enough to understand, we are not using any such persistent storage. If any other book with different metadata but the same ISBN comes, then OPA will overwrite the existing book with the new one.\nIn the SearchBook() function, the user will provide the ISBN of the desired book. The gRPC service will call the OPA using REST API and find if any such book exists or not.\nThe ListAllBooks() is different in the way that it does not need any ISBN.\nNow, here one problem arises, how to make sure that the search results will not return any book which the user is not authorized to access. We will solve this problem using OPA in the next and last post of this series.\nI hope that this post was helpful. If you have any doubts or want to say anything else, please comment. It will be a great motivation and appreciation for me.\nThanks for reading. Cheers 😄\n"},"name":"Go + gRPC + OPA - A Perfect Union - Part 2","published":"2019-02-17T14:44:56+05:30","summary":"In the last post, we discussed about the structure of our library application. In this post, we will define the data definitions using protobuf, and then we will use these definitions to create a Go service. We will also add a REST interface to the service.","type":"entry","url":"https://yashagarwal.in/posts/2019/02/go-grpc-opa-a-perfect-union-part-2/"},{"content":{"html":"\u003cp\u003e\u003cstrong\u003eTL;DR\u003c/strong\u003e \u0026ndash; In a series of blog posts, I will be implementing a simple library application supporting both gRPC and REST interfaces using Go, gRPC, and\nOPA. My approach might not be the most optimal one, but I am learning these technologies currently. Please give your\nvaluable suggestions and be kind :)\u003c/p\u003e\n\u003cp\u003eI have been learning the basics of microservices and Golang lately. On the work front, I got a chance to work on Go, gRPC, and Open\nPolicy Agent as my first professional project. In this post, I will be demonstrating what I learned in the last few months.\nWe will be implementing a simple gRPC based library service, which will be able to serve\nrequests using both gRPC and REST calls. It will also incorporate the Open Policy Agent (OPA) to provide the authorization\nto users. Let\u0026rsquo;s begin with a quick introduction to gRPC and OPA.\u003c/p\u003e\n\u003ch2 id=\"grpc\"\u003egRPC\u003c/h2\u003e\n\u003cp\u003egRPC is Google\u0026rsquo;s implementation for Remote Procedure Calls(RPC). RPC is mainly used in building scalable distributed systems. While REST has a limited set of verbs, RPC can define any function calls, including synchronous and asynchronous calls.\u003c/p\u003e\n\u003cp\u003eIn gRPC, the client can make procedure calls as if the requests are made to some local function. However, the underlying client\nstub (auto-generated) will send the call to the server. The server will have a similar server stub, which will be able to\nhandle the requests coming from the client. The server will send the response to the client using similar mechanisms\nover the network. All the communication is serialized to binary format, so it is ideal for distributed systems as binary format\ntends to be on the faster side for large amounts of data.\u003c/p\u003e\n\u003cp\u003eFor more info about gRPC, visit the official \u003ca href=\"https://grpc.io/\"\u003ewebsite\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"open-policy-agent-opa\"\u003eOpen Policy Agent (OPA)\u003c/h2\u003e\n\u003cp\u003eOPA gives us the ability to define a fine-grained policy control mechanism. However, I think the most critical benefit of\nusing OPA is that it gives you the ability to decouple your services and the definition of policies from the enforcement\nof it.\u003c/p\u003e\n\u003cp\u003eThere are mainly two parts of OPA -\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eA JSON document store where you can define anything from your users, access roles,\npermission levels, etc.\u003c/li\u003e\n\u003cli\u003eA policy is written in a declarative language. This policy gives you new derivative data from the original JSON document store evaluated by the policy. The declarative language is called Rego, and these policies are also documents that generate results according to the defined policy. The users query these results.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThis info will be sufficient for our use case. More info about it can be found at the official\n\u003ca href=\"https://www.openpolicyagent.org/\"\u003ewebsite\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"the-skeleton-of-our-application\"\u003eThe skeleton of our Application\u003c/h2\u003e\n\u003cp\u003eWe will be building a command-line library application. This application will support adding, deleting, searching, issuing, and returning of\nbooks. There are three types of users \u0026ndash; student, faculties, and staff. Not all users have a similar kind of access level. There are some books which are only reserved for students, and some are exclusively reserved for faculties and so on.\u003c/p\u003e\n\u003cp\u003eI think emulating the \u003ca href=\"https://harrypotter.fandom.com/wiki/Hogwarts_Library\"\u003elibrary\u003c/a\u003e at Hogwarts will be a good idea here. Students and ordinary people were not allowed inside\nthe restricted section of the library. We will emulate that restricted section using the authorization mechanisms\nprovided by OPA.\u003c/p\u003e\n\u003cp\u003eThe gRPC protocol will handle the communications part in our app, but not everyone in Hogwarts is using gRPC. Wizards\nare still in love with REST (not a bad thing, though), so we will provide them alike the REST interface to interact\nwith our service. We do not want to face the wrath of the wizards, after all.\u003c/p\u003e\n\u003cp\u003eOPA can either be used as a standalone application or be embedded in the Go service as well. Both approaches have\ntheir pros and cons. I have decided to use OPA as an independent service, as it will be more comfortable that way for us to push\nauthorization data and policies to it if such a need arises in the future.\u003c/p\u003e\n\u003cp\u003eOne more issue remains - where to store the added books. Shall we persist them? In practical scenarios, persistence is\nalways a good idea, but here I do not want to complicate things too much. We could use any Object storage servers (e.g., Minio) to\nstore the JSON data generated from our gRPC methods, but that will unnecessarily add complexity to our simple scenario.\nWizards do not like complicate stuff, you know!\u003c/p\u003e\n\u003cp\u003eIn the next posts, we will define our gRPC proto file and build the Go service around it. Then we will add a REST\ninterface to our service for simple CRUD operations in our application. Then we will add OPA authorization to restrict\nour users from adding and viewing books which they are not supposed to access.\u003c/p\u003e\n\u003cp\u003eThank you for reading. Cheers 😊\u003c/p\u003e\n","text":"TL;DR \u0026ndash; In a series of blog posts, I will be implementing a simple library application supporting both gRPC and REST interfaces using Go, gRPC, and OPA. My approach might not be the most optimal one, but I am learning these technologies currently. Please give your valuable suggestions and be kind :)\nI have been learning the basics of microservices and Golang lately. On the work front, I got a chance to work on Go, gRPC, and Open Policy Agent as my first professional project. In this post, I will be demonstrating what I learned in the last few months. We will be implementing a simple gRPC based library service, which will be able to serve requests using both gRPC and REST calls. It will also incorporate the Open Policy Agent (OPA) to provide the authorization to users. Let\u0026rsquo;s begin with a quick introduction to gRPC and OPA.\ngRPC gRPC is Google\u0026rsquo;s implementation for Remote Procedure Calls(RPC). RPC is mainly used in building scalable distributed systems. While REST has a limited set of verbs, RPC can define any function calls, including synchronous and asynchronous calls.\nIn gRPC, the client can make procedure calls as if the requests are made to some local function. However, the underlying client stub (auto-generated) will send the call to the server. The server will have a similar server stub, which will be able to handle the requests coming from the client. The server will send the response to the client using similar mechanisms over the network. All the communication is serialized to binary format, so it is ideal for distributed systems as binary format tends to be on the faster side for large amounts of data.\nFor more info about gRPC, visit the official website.\nOpen Policy Agent (OPA) OPA gives us the ability to define a fine-grained policy control mechanism. However, I think the most critical benefit of using OPA is that it gives you the ability to decouple your services and the definition of policies from the enforcement of it.\nThere are mainly two parts of OPA -\n A JSON document store where you can define anything from your users, access roles, permission levels, etc. A policy is written in a declarative language. This policy gives you new derivative data from the original JSON document store evaluated by the policy. The declarative language is called Rego, and these policies are also documents that generate results according to the defined policy. The users query these results.  This info will be sufficient for our use case. More info about it can be found at the official website.\nThe skeleton of our Application We will be building a command-line library application. This application will support adding, deleting, searching, issuing, and returning of books. There are three types of users \u0026ndash; student, faculties, and staff. Not all users have a similar kind of access level. There are some books which are only reserved for students, and some are exclusively reserved for faculties and so on.\nI think emulating the library at Hogwarts will be a good idea here. Students and ordinary people were not allowed inside the restricted section of the library. We will emulate that restricted section using the authorization mechanisms provided by OPA.\nThe gRPC protocol will handle the communications part in our app, but not everyone in Hogwarts is using gRPC. Wizards are still in love with REST (not a bad thing, though), so we will provide them alike the REST interface to interact with our service. We do not want to face the wrath of the wizards, after all.\nOPA can either be used as a standalone application or be embedded in the Go service as well. Both approaches have their pros and cons. I have decided to use OPA as an independent service, as it will be more comfortable that way for us to push authorization data and policies to it if such a need arises in the future.\nOne more issue remains - where to store the added books. Shall we persist them? In practical scenarios, persistence is always a good idea, but here I do not want to complicate things too much. We could use any Object storage servers (e.g., Minio) to store the JSON data generated from our gRPC methods, but that will unnecessarily add complexity to our simple scenario. Wizards do not like complicate stuff, you know!\nIn the next posts, we will define our gRPC proto file and build the Go service around it. Then we will add a REST interface to our service for simple CRUD operations in our application. Then we will add OPA authorization to restrict our users from adding and viewing books which they are not supposed to access.\nThank you for reading. Cheers 😊\n"},"name":"Go + gRPC + OPA - A Perfect Union - Part 1","published":"2019-02-10T14:29:08+05:30","summary":"TL;DR \u0026ndash; In a series of blog posts, I will be implementing a simple library application supporting both gRPC and REST interfaces using Go, gRPC, and OPA. My approach might not be the most optimal one, but I am learning these technologies currently. Please give your valuable suggestions and be kind :)\nI have been learning the basics of microservices and Golang lately. On the work front, I got a chance to work on Go, gRPC, and Open Policy Agent as my first professional project.","type":"entry","url":"https://yashagarwal.in/posts/2019/02/go-grpc-opa-a-perfect-union-part-1/"},{"content":{"html":"\u003cp\u003e\u003cem\u003eThis article was originally published on \u003ca href=\"https://www.zeolearn.com/magazine/proxy-your-requests-to-the-backend-server-with-grunt\"\u003ezeolearn\u003c/a\u003e.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eIf you are working on large projects, it is undoubtedly a good idea to have a build script or some task scripts to help to automate some of the repetitive parts of the development process.\nFor JavaScript projects, \u003ccode\u003eGrunt\u003c/code\u003e serves a similar purpose. It is a JavaScript task/build runner that is written on top of NodeJS. Grunt can help you with automatically minifying your JavaScript or CSS files, or reload your browser on every file change. It can show you a comprehensive list of JavaScript errors, compile your \u003ccode\u003eSASS/LESS\u003c/code\u003e files into CSS files automatically, and many other things.\u003c/p\u003e\n\u003cp\u003eHowever, the most significant advantage of Grunt that I am going to discuss today is its ability to proxy your requests. For example, when you are developing your backend with anything other than JavaScript, you will face difficulty in accessing the backend data in your frontend without having to compile and deploy the code every time you make any changes. It is not possible with a typical web server setup because \u003ca href=\"https://en.wikipedia.org/wiki/XMLHttpRequest\"\u003eXHR\u003c/a\u003e requests are not allowed to be cross-domain by browsers due to \u003ca href=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\"\u003eCross-origin resource sharing\u003c/a\u003e (CORS) limitations.\u003c/p\u003e\n\u003cp\u003eSo, the problem here is as follows,\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eyou are developing the UI of your applications using some frontend JavaScript framework (say Angular) with Grunt as the build runner, and the backend of your application is being designed in some backend framework other than JavaScript/NodeJS (say Laravel), you might face problems accessing the backend while running Grunt server.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eIt happens because the backend Laravel service runs on port 8000, and the front end development server runs on port 8080. The requests from the frontend server to the backend-server will result in \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\"\u003esame-origin policy\u003c/a\u003e errors due to the port difference. To fix this issue, we can set up CORS through a proxy on Grunt. This proxy will stand in front of your frontend server and the backend server and get the required data from the backend and pass it to your frontend while letting your browser think that you are all in the same domain.\u003c/p\u003e\n\u003cp\u003eGrunt has a module \u003ca href=\"https://github.com/drewzboto/grunt-connect-proxy\"\u003egrunt-connect-proxy\u003c/a\u003e that exists to help to solve this issue. It delegates requests that match a given URL to the backend of your choice. So for example, you want to access your backend using the URL \u003ca href=\"http://localhost:8080/api\"\u003ehttp://localhost:8080/api\u003c/a\u003e, you can write a proxy rule so that whenever your user tries to access this URL in a browser, the proxy will get the data from your backend and server it at this particular URL.\u003c/p\u003e\n\u003cp\u003eThe procedure to set up the proxy is simple. First, you will have to add the proxy configuration to your \u003ccode\u003eGruntfile.js\u003c/code\u003e. In this example, I am assuming that the backend server is running on the port 8000, and the Grunt server is running on the port 8080. This configuration will delegate all requests to \u003ca href=\"http://localhost:8080/api\"\u003ehttp://localhost:8080/api\u003c/a\u003e to \u003ca href=\"http://localhost:8000/backend\"\u003ehttp://localhost:8000/backend\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"nx\"\u003econnect\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eserver\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eoptions\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003eport\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e8080\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003ebase\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;public\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003ehostname\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;localhost\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003elivereload\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003emiddleware\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003econnect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eoptions\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003emiddlewares\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003emiddlewares\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eunshift\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003erequire\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;grunt-connect-proxy/lib/utils\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003eproxyRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003emiddlewares\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eproxies\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;/api\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003ehost\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;localhost\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003eport\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e8000\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003ehttps\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003erewrite\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"s1\"\u003e\u0026#39;^/api\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;/backend\u0026#39;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow register your Grunt server task to run the proxy on Grunt execution.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"nx\"\u003egrunt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eregisterTask\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;server\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"nx\"\u003egrunt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etask\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\n       \u003cspan class=\"s1\"\u003e\u0026#39;configureProxies:server\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n       \u003cspan class=\"s1\"\u003e\u0026#39;connect:server\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eLet me explain the above two scripts line by line. In the connect section of your \u003ccode\u003eGruntfile\u003c/code\u003e, we add a new section called \u003ccode\u003eproxies\u003c/code\u003e. The options defined in the proxies section are explained below.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003econtext\u003c/strong\u003e: This is the context against which the incoming requests will be matched. Matching requests will be proxied to the backend server.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ehost\u003c/strong\u003e: The host address where the backend server is running. The incoming requests will be proxied to this host.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eport\u003c/strong\u003e: The port where the backend server is running.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ehttps\u003c/strong\u003e: If your backend server is an https endpoint, then set this value to \u003ccode\u003etrue\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003erewrite\u003c/strong\u003e: This option allows rewriting of URL when proxying. What this means is that when trying to proxy \u003ca href=\"http://localhost:8080/api\"\u003ehttp://localhost:8080/api\u003c/a\u003e to the backend server, the URL will be rewritten as \u003ca href=\"http://localhost:8000/backend\"\u003ehttp://localhost:8000/backend\u003c/a\u003e. The object\u0026rsquo;s key serves as the regex used in the replacement operation, and the object\u0026rsquo;s value is the context of your backend server\u0026rsquo;s service.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eMore options can be found in the \u003ca href=\"https://github.com/drewzboto/grunt-connect-proxy#grunt-connect-proxy\"\u003edocumentation\u003c/a\u003e of \u003ccode\u003egrunt-connect-proxy\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eYou will also need to set up the proxy\u0026rsquo;s middleware in the \u003ccode\u003eoptions\u003c/code\u003e section of the \u003ccode\u003econnect\u003c/code\u003e. The relevant code is as follows.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003cspan class=\"nx\"\u003emiddleware\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003econnect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eoptions\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003emiddlewares\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003emiddlewares\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eunshift\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003erequire\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;grunt-connect-proxy/lib/utils\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003eproxyRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003emiddlewares\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eFinally, include your proxy task in the server task. It is necessary to append the proxy task before the connect task. Also, make sure to specify the connection target in the \u003ccode\u003econfigureProxies\u003c/code\u003e section. In our case, the connect target is \u003ccode\u003eserver\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eNow you can start your Grunt server via this configured proxy by typing \u003ccode\u003eGrunt server\u003c/code\u003e in the command line. You should see something like this in the console.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ grunt server\n...\nRunning \u003cspan class=\"s2\"\u003e\u0026#34;configureProxies:server\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003econfigureProxies\u003cspan class=\"o\"\u003e)\u003c/span\u003e task\nRewrite rule created \u003cspan class=\"k\"\u003efor\u003c/span\u003e: \u003cspan class=\"o\"\u003e[\u003c/span\u003e/^\u003cspan class=\"se\"\u003e\\/\u003c/span\u003eapi/ -\u0026gt; /backend\u003cspan class=\"o\"\u003e]\u003c/span\u003e.\nProxy created \u003cspan class=\"k\"\u003efor\u003c/span\u003e: /api to localhost:8000\n\nRunning \u003cspan class=\"s2\"\u003e\u0026#34;connect:server\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003econnect\u003cspan class=\"o\"\u003e)\u003c/span\u003e task\nStarted connect web server on http://localhost:8080\n...\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe above output confirms that the proxy is working fine.\nSome of the example URLs are:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eGrunt Server\u003c/th\u003e\n\u003cth\u003eBackend Server\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003ehttp://127.0.0.1:8080/api\u003c/td\u003e\n\u003ctd\u003ehttp://127.0.0.1:8000/backend\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ehttp://127.0.0.1:8080/api/x/y\u003c/td\u003e\n\u003ctd\u003ehttp://127.0.0.1:8000/backend/x/y\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThat\u0026rsquo;s all. Now you will not face any problems getting data from any backend of your choice.\u003c/p\u003e\n","text":"This article was originally published on zeolearn.\nIf you are working on large projects, it is undoubtedly a good idea to have a build script or some task scripts to help to automate some of the repetitive parts of the development process. For JavaScript projects, Grunt serves a similar purpose. It is a JavaScript task/build runner that is written on top of NodeJS. Grunt can help you with automatically minifying your JavaScript or CSS files, or reload your browser on every file change. It can show you a comprehensive list of JavaScript errors, compile your SASS/LESS files into CSS files automatically, and many other things.\nHowever, the most significant advantage of Grunt that I am going to discuss today is its ability to proxy your requests. For example, when you are developing your backend with anything other than JavaScript, you will face difficulty in accessing the backend data in your frontend without having to compile and deploy the code every time you make any changes. It is not possible with a typical web server setup because XHR requests are not allowed to be cross-domain by browsers due to Cross-origin resource sharing (CORS) limitations.\nSo, the problem here is as follows,\n you are developing the UI of your applications using some frontend JavaScript framework (say Angular) with Grunt as the build runner, and the backend of your application is being designed in some backend framework other than JavaScript/NodeJS (say Laravel), you might face problems accessing the backend while running Grunt server.\n It happens because the backend Laravel service runs on port 8000, and the front end development server runs on port 8080. The requests from the frontend server to the backend-server will result in same-origin policy errors due to the port difference. To fix this issue, we can set up CORS through a proxy on Grunt. This proxy will stand in front of your frontend server and the backend server and get the required data from the backend and pass it to your frontend while letting your browser think that you are all in the same domain.\nGrunt has a module grunt-connect-proxy that exists to help to solve this issue. It delegates requests that match a given URL to the backend of your choice. So for example, you want to access your backend using the URL http://localhost:8080/api, you can write a proxy rule so that whenever your user tries to access this URL in a browser, the proxy will get the data from your backend and server it at this particular URL.\nThe procedure to set up the proxy is simple. First, you will have to add the proxy configuration to your Gruntfile.js. In this example, I am assuming that the backend server is running on the port 8000, and the Grunt server is running on the port 8080. This configuration will delegate all requests to http://localhost:8080/api to http://localhost:8000/backend.\nconnect: { server: { options: { port: 8080, base: \u0026#39;public\u0026#39;, hostname: \u0026#39;localhost\u0026#39;, livereload: true, middleware: function (connect, options, middlewares) { middlewares.unshift(require(\u0026#39;grunt-connect-proxy/lib/utils\u0026#39;).proxyRequest); return middlewares; } }, proxies: [ { context: \u0026#39;/api\u0026#39;, host: \u0026#39;localhost\u0026#39;, port: 8000, https: false, rewrite: { \u0026#39;^/api\u0026#39;: \u0026#39;/backend\u0026#39; } } ] } }  Now register your Grunt server task to run the proxy on Grunt execution.\ngrunt.registerTask(\u0026#39;server\u0026#39;, function (target) { grunt.task.run([ \u0026#39;configureProxies:server\u0026#39;, \u0026#39;connect:server\u0026#39;, ]); });  Let me explain the above two scripts line by line. In the connect section of your Gruntfile, we add a new section called proxies. The options defined in the proxies section are explained below.\n context: This is the context against which the incoming requests will be matched. Matching requests will be proxied to the backend server. host: The host address where the backend server is running. The incoming requests will be proxied to this host. port: The port where the backend server is running. https: If your backend server is an https endpoint, then set this value to true. rewrite: This option allows rewriting of URL when proxying. What this means is that when trying to proxy http://localhost:8080/api to the backend server, the URL will be rewritten as http://localhost:8000/backend. The object\u0026rsquo;s key serves as the regex used in the replacement operation, and the object\u0026rsquo;s value is the context of your backend server\u0026rsquo;s service.  More options can be found in the documentation of grunt-connect-proxy.\nYou will also need to set up the proxy\u0026rsquo;s middleware in the options section of the connect. The relevant code is as follows.\n... middleware: function (connect, options, middlewares) { middlewares.unshift(require(\u0026#39;grunt-connect-proxy/lib/utils\u0026#39;).proxyRequest); return middlewares; } ...  Finally, include your proxy task in the server task. It is necessary to append the proxy task before the connect task. Also, make sure to specify the connection target in the configureProxies section. In our case, the connect target is server.\nNow you can start your Grunt server via this configured proxy by typing Grunt server in the command line. You should see something like this in the console.\n$ grunt server ... Running \u0026#34;configureProxies:server\u0026#34; (configureProxies) task Rewrite rule created for: [/^\\/api/ -\u0026gt; /backend]. Proxy created for: /api to localhost:8000 Running \u0026#34;connect:server\u0026#34; (connect) task Started connect web server on http://localhost:8080 ... The above output confirms that the proxy is working fine. Some of the example URLs are:\n   Grunt Server Backend Server     http://127.0.0.1:8080/api http://127.0.0.1:8000/backend   http://127.0.0.1:8080/api/x/y http://127.0.0.1:8000/backend/x/y    That\u0026rsquo;s all. Now you will not face any problems getting data from any backend of your choice.\n"},"name":"Proxy Your Requests to the Backend Server With Grunt","published":"2018-05-15T17:14:13+05:30","summary":"This article was originally published on zeolearn.\nIf you are working on large projects, it is undoubtedly a good idea to have a build script or some task scripts to help to automate some of the repetitive parts of the development process. For JavaScript projects, Grunt serves a similar purpose. It is a JavaScript task/build runner that is written on top of NodeJS. Grunt can help you with automatically minifying your JavaScript or CSS files, or reload your browser on every file change.","type":"entry","url":"https://yashagarwal.in/posts/2018/05/proxy-your-requests-to-the-backend-server-with-grunt/"},{"content":{"html":"\u003cp\u003eThis post is a result of my experimentation with Drozer. Drozer is a security testing framework for Android, developed by MWR Labs. According the Drozer\u0026rsquo;s official \u003ca href=\"https://labs.mwrinfosecurity.com/assets/BlogFiles/mwri-drozer-user-guide-2015-03-23.pdf\"\u003edocumentation\u003c/a\u003e:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eDrozer allows you to assume the role of an Android app and interact with other apps. It can do anything that an\ninstalled application can do, such as making use of Android\u0026rsquo;s Inter-Process Communication (IPC) mechanism and\ninteract with the underlying operating system.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eDrozer modules are written in Python. The module performs operations on an Android device with the help of an agent app installed on the device. The agent app, by default, has permission to use the internet connection only. This permission is required so that the agent can open a ServerSocket on port 31415 (default). The agent will listen for the incoming connections on this port. The console will connect to the agent on this port.\u003c/p\u003e\n\u003cp\u003eDrozer modules are inherited Python classes. The parent class is defined in \u003ca href=\"https://github.com/mwrlabs/drozer/blob/develop/src/drozer/modules/base.py\"\u003edrozer.modules.Module\u003c/a\u003e. Drozer console provides commands to create a custom module repository, which is very useful for the local development of modules.\u003c/p\u003e\n\u003cp\u003eYou can read more about the structure of a Drozer module \u003ca href=\"https://github.com/mwrlabs/drozer/wiki/Writing-a-Module\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eI will explain all the critical parts of a Drozer module with the help of a sample module. I will be implementing a module to record and save the sound from the inbuilt mic of an Android device.\u003c/p\u003e\n\u003cp\u003eI initialized a new module repository using the Drozer console using the following command.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003edz\u0026gt; module repository create custom\nInitialised repository at custom.\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eYou will see a new directory \u003ccode\u003ecustom\u003c/code\u003e in your current directory after executing above command. Navigate to this directory and create a new folder with any name. I prefer to name this folder same as my module name. In this folder, create a file \u003ccode\u003e__init__.py\u003c/code\u003e. Drozer identifies the folder as a module directory if \u003ccode\u003e__init__.py\u003c/code\u003e is present in the directory. Now you can implement your module in this directory.\u003c/p\u003e\n\u003cp\u003eTo begin implementing our module, create a new file \u003ccode\u003erecord.py\u003c/code\u003e in the module directory. Drozer has many different utility classes, which we can use to simplify our implementation. To use these utility classes (\u003ca href=\"https://github.com/mwrlabs/drozer/wiki/Using-mixins\"\u003emixins\u003c/a\u003e), our module class must extend \u003cem\u003emixins\u003c/em\u003e using Python\u0026rsquo;s multiple inheritance feature.\u003c/p\u003e\n\u003cp\u003eWe first need to import all the required mixins. The mixins are stored in \u003ccode\u003emodules.common\u003c/code\u003e package in the Drozer source tree. After importing mixins and extending our class, the code will look like this. You can also import any other standard Python module here.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003edrozer.modules\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003ecommon\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eModule\u003c/span\u003e\n\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003eos\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nn\"\u003esubprocess\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"nn\"\u003etime\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eRecord\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eModule\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecommon\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eShell\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecommon\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFileSystem\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecommon\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eClassLoader\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow we will set up the metadata for our module. This information will help Drozer to organize and list our module correctly. We can define the name, description, author, date, license, path, permissions, and examples. Most of the available options are self-explanatory. But \u003cem\u003epath\u003c/em\u003e and \u003cem\u003epermissions\u003c/em\u003e require some explanation.\u003c/p\u003e\n\u003cp\u003eThe \u003cem\u003epath\u003c/em\u003e variable defined here is an array that contains the values for the namespace of the module. Drozer supports separate namespaces for each module. We can combine similar modules in the same namespace using this feature.\u003c/p\u003e\n\u003cp\u003eThe \u003cem\u003epermissions\u003c/em\u003e array variable contains all the permissions that this module will require for proper functioning. For example, our module will need permission to record audio on the device to work correctly. So we define this permission in the permissions array. The agent app on the device is required to have this permission. Otherwise, our module will throw an error.\u003c/p\u003e\n\u003cp\u003eThe following snippet shows the metadata section of our module.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Record sound from the inbuilt mic of an Android device.\u0026#34;\u003c/span\u003e\n\u003cspan class=\"n\"\u003edescription\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Record sound from the inbuilt mic of an Android device. The default save format is 3GPP. Relies on the agent having the RECORD_AUDIO permission.\u0026#34;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eexamples\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u0026#34;\n\u003c/span\u003e\u003cspan class=\"s2\"\u003edz\u0026gt; run custom.record.record\n\u003c/span\u003e\u003cspan class=\"s2\"\u003eSetting up recorder configuration...\n\u003c/span\u003e\u003cspan class=\"s2\"\u003eRecording started\n\u003c/span\u003e\u003cspan class=\"s2\"\u003ePress any key to stop recording\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\n\u003c/span\u003e\u003cspan class=\"s2\"\u003eRecording stopped...downloading recording\n\u003c/span\u003e\u003cspan class=\"s2\"\u003eScreenshot captured. Saved at location /home/yash/work/drozer/1524201166.3gp\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eauthor\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Yash Agarwal\u0026#34;\u003c/span\u003e\n\u003cspan class=\"n\"\u003edate\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;2018-04-14\u0026#34;\u003c/span\u003e\n\u003cspan class=\"n\"\u003elicense\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;BSD (3 clause)\u0026#34;\u003c/span\u003e\n\u003cspan class=\"n\"\u003epath\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;custom\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;record\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"n\"\u003epermissions\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;android.permission.RECORD_AUDIO\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;com.mwr.dz.permissions.GET_CONTEXT\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow we can start implementing the heart of our module, the \u003ccode\u003eexecute()\u003c/code\u003e function. This function will be invoked by Drozer when the module is run. Every action that the module is expected to perform should be implemented in this method.\u003c/p\u003e\n\u003cp\u003eThe implementation of \u003ccode\u003eexecute()\u003c/code\u003e method is slightly tricky and requires an understanding of different classes and methods provided by the Android API. As we are writing a module to record sound, we will look into the documentation of \u003ca href=\"https://developer.android.com/guide/topics/media/mediarecorder.html\"\u003eMediaRecorder\u003c/a\u003e class. Before reading further, go through the documentation about the use of reflection API in Drozer \u003ca href=\"https://github.com/mwrlabs/drozer/wiki/Using-Reflection\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eexecute()\u003c/code\u003e function is given below.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eexecute\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003earguments\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e# unique file names\u003c/span\u003e\n    \u003cspan class=\"n\"\u003efilename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e()))\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;.3gp\u0026#34;\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e# current working directory of Drozer console\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecwd\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eworkingDir\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e# Magic of Reflection API !!!\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erecorder\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;android.media.MediaRecorder\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eAudioSource\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eklass\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;android.media.MediaRecorder$AudioSource\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eOutputFormat\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eklass\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;android.media.MediaRecorder$OutputFormat\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eAudioEncoder\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eklass\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;android.media.MediaRecorder$AudioEncoder\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003erecorder\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esetAudioSource\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eAudioSource\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eMIC\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erecorder\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esetOutputFormat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eOutputFormat\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eTHREE_GPP\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erecorder\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esetAudioEncoder\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eAudioEncoder\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eAMR_NB\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erecorder\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esetOutputFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"si\"\u003e%s\u003c/span\u003e\u003cspan class=\"s2\"\u003e/recording.3gp\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"n\"\u003ecwd\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erecorder\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprepare\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\n    \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estdout\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Recording started\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erecorder\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eraw_input\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Press any key to stop recording\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erecorder\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estop\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estdout\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Recording stopped...\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erecorder\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereset\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n    \u003cspan class=\"n\"\u003erecorder\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003erelease\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e# Download file from device to PC\u003c/span\u003e\n    \u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edownloadFile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"si\"\u003e%s\u003c/span\u003e\u003cspan class=\"s2\"\u003e/recording.3gp\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"n\"\u003ecwd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efilename\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"bp\"\u003eNone\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estdout\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Recording saved\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n        \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estderr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ewrite\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Recording could not be fetched from the device.\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eI followed the sample use case given on \u003ca href=\"https://developer.android.com/reference/android/media/MediaRecorder.html\"\u003ethis\u003c/a\u003e page, to instantiate and use the \u003cem\u003eMediaRecorder\u003c/em\u003e object.\u003c/p\u003e\n\u003cp\u003eAfter the recording is finished, we want to save this recorded media file to our computer. Drozer provides a method, \u003ca href=\"https://github.com/mwrlabs/drozer/blob/c92d74024c653b6dc7de3378a24e51d276ae2c62/src/drozer/modules/common/file_system.py\"\u003edownloadFile\u003c/a\u003e exactly for this purpose. This method returns the length of the data downloaded on success and \u003ccode\u003eNone\u003c/code\u003e otherwise. We can use this information to test the success or failure of the fetching of the recording.\u003c/p\u003e\n\u003cp\u003eThat\u0026rsquo;s all. We have successfully implemented a Drozer module which can record the sound on an Android device without the knowledge of the user. Do you smell something fishy here? The whole idea here depends on that particular \u003ccode\u003eandroid.permission.RECORD_AUDIO\u003c/code\u003e permission that our agent app had. It allowed our module to record without \u003cem\u003euser consent\u003c/em\u003e (actually, the user gave her consent unknowingly while installing agent app). Many apps nowadays ask for arbitrarily random permissions. Those permissions might not be related to the functionality of the app in any way, but because there is no method to install apps without granting these permissions, the users grant all permissions to these apps. That can be exploited very easily. This tutorial tried to show one of such exploitations.\u003c/p\u003e\n\u003cp\u003eHere are some exercises that you should try if you want to learn more about Drozer module development.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA module to initiate a call on a device.\u003c/li\u003e\n\u003cli\u003eA module to get the clipboard values on a device\u003c/li\u003e\n\u003cli\u003eTry finding a public exploit on Android forums such as XDA and implement that exploit as a Drozer module.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSlightly tougher one.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA module to terminate a call without user intervention (I do not know if it is possible to do this programmatically. If you implement this successfully, do let me know in the comments section.)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThanks for reading. Cheers :)\u003c/p\u003e\n","text":"This post is a result of my experimentation with Drozer. Drozer is a security testing framework for Android, developed by MWR Labs. According the Drozer\u0026rsquo;s official documentation:\n Drozer allows you to assume the role of an Android app and interact with other apps. It can do anything that an installed application can do, such as making use of Android\u0026rsquo;s Inter-Process Communication (IPC) mechanism and interact with the underlying operating system.\n Drozer modules are written in Python. The module performs operations on an Android device with the help of an agent app installed on the device. The agent app, by default, has permission to use the internet connection only. This permission is required so that the agent can open a ServerSocket on port 31415 (default). The agent will listen for the incoming connections on this port. The console will connect to the agent on this port.\nDrozer modules are inherited Python classes. The parent class is defined in drozer.modules.Module. Drozer console provides commands to create a custom module repository, which is very useful for the local development of modules.\nYou can read more about the structure of a Drozer module here.\nI will explain all the critical parts of a Drozer module with the help of a sample module. I will be implementing a module to record and save the sound from the inbuilt mic of an Android device.\nI initialized a new module repository using the Drozer console using the following command.\ndz\u0026gt; module repository create custom Initialised repository at custom. You will see a new directory custom in your current directory after executing above command. Navigate to this directory and create a new folder with any name. I prefer to name this folder same as my module name. In this folder, create a file __init__.py. Drozer identifies the folder as a module directory if __init__.py is present in the directory. Now you can implement your module in this directory.\nTo begin implementing our module, create a new file record.py in the module directory. Drozer has many different utility classes, which we can use to simplify our implementation. To use these utility classes (mixins), our module class must extend mixins using Python\u0026rsquo;s multiple inheritance feature.\nWe first need to import all the required mixins. The mixins are stored in modules.common package in the Drozer source tree. After importing mixins and extending our class, the code will look like this. You can also import any other standard Python module here.\nfrom drozer.modules import common, Module import os, subprocess, time class Record(Module, common.Shell, common.FileSystem, common.ClassLoader): Now we will set up the metadata for our module. This information will help Drozer to organize and list our module correctly. We can define the name, description, author, date, license, path, permissions, and examples. Most of the available options are self-explanatory. But path and permissions require some explanation.\nThe path variable defined here is an array that contains the values for the namespace of the module. Drozer supports separate namespaces for each module. We can combine similar modules in the same namespace using this feature.\nThe permissions array variable contains all the permissions that this module will require for proper functioning. For example, our module will need permission to record audio on the device to work correctly. So we define this permission in the permissions array. The agent app on the device is required to have this permission. Otherwise, our module will throw an error.\nThe following snippet shows the metadata section of our module.\nname = \u0026#34;Record sound from the inbuilt mic of an Android device.\u0026#34; description = \u0026#34;Record sound from the inbuilt mic of an Android device. The default save format is 3GPP. Relies on the agent having the RECORD_AUDIO permission.\u0026#34; examples = \u0026#34;\u0026#34;\u0026#34; dz\u0026gt; run custom.record.record Setting up recorder configuration... Recording started Press any key to stop recording Recording stopped...downloading recording Screenshot captured. Saved at location /home/yash/work/drozer/1524201166.3gp \u0026#34;\u0026#34;\u0026#34; author = \u0026#34;Yash Agarwal\u0026#34; date = \u0026#34;2018-04-14\u0026#34; license = \u0026#34;BSD (3 clause)\u0026#34; path = [\u0026#34;custom\u0026#34;, \u0026#34;record\u0026#34;] permissions = [\u0026#34;android.permission.RECORD_AUDIO\u0026#34;, \u0026#34;com.mwr.dz.permissions.GET_CONTEXT\u0026#34;] Now we can start implementing the heart of our module, the execute() function. This function will be invoked by Drozer when the module is run. Every action that the module is expected to perform should be implemented in this method.\nThe implementation of execute() method is slightly tricky and requires an understanding of different classes and methods provided by the Android API. As we are writing a module to record sound, we will look into the documentation of MediaRecorder class. Before reading further, go through the documentation about the use of reflection API in Drozer here.\nThe execute() function is given below.\ndef execute(self, arguments): # unique file names filename = str(int(time.time())) + \u0026#34;.3gp\u0026#34; # current working directory of Drozer console cwd = self.workingDir() # Magic of Reflection API !!! recorder = self.new(\u0026#34;android.media.MediaRecorder\u0026#34;) AudioSource = self.klass(\u0026#34;android.media.MediaRecorder$AudioSource\u0026#34;) OutputFormat = self.klass(\u0026#34;android.media.MediaRecorder$OutputFormat\u0026#34;) AudioEncoder = self.klass(\u0026#34;android.media.MediaRecorder$AudioEncoder\u0026#34;) recorder.setAudioSource(AudioSource.MIC) recorder.setOutputFormat(OutputFormat.THREE_GPP) recorder.setAudioEncoder(AudioEncoder.AMR_NB) recorder.setOutputFile(\u0026#34;%s/recording.3gp\u0026#34; % cwd) recorder.prepare() self.stdout.write(\u0026#34;Recording started\\n\u0026#34;) recorder.start() raw_input(\u0026#34;Press any key to stop recording\\n\u0026#34;) recorder.stop() self.stdout.write(\u0026#34;Recording stopped...\\n\u0026#34;) recorder.reset() recorder.release() # Download file from device to PC length = self.downloadFile(\u0026#34;%s/recording.3gp\u0026#34; % cwd, filename) if length != None: self.stdout.write(\u0026#34;Recording saved\\n\u0026#34;) else: self.stderr.write(\u0026#34;Recording could not be fetched from the device.\\n\u0026#34;) I followed the sample use case given on this page, to instantiate and use the MediaRecorder object.\nAfter the recording is finished, we want to save this recorded media file to our computer. Drozer provides a method, downloadFile exactly for this purpose. This method returns the length of the data downloaded on success and None otherwise. We can use this information to test the success or failure of the fetching of the recording.\nThat\u0026rsquo;s all. We have successfully implemented a Drozer module which can record the sound on an Android device without the knowledge of the user. Do you smell something fishy here? The whole idea here depends on that particular android.permission.RECORD_AUDIO permission that our agent app had. It allowed our module to record without user consent (actually, the user gave her consent unknowingly while installing agent app). Many apps nowadays ask for arbitrarily random permissions. Those permissions might not be related to the functionality of the app in any way, but because there is no method to install apps without granting these permissions, the users grant all permissions to these apps. That can be exploited very easily. This tutorial tried to show one of such exploitations.\nHere are some exercises that you should try if you want to learn more about Drozer module development.\n A module to initiate a call on a device. A module to get the clipboard values on a device Try finding a public exploit on Android forums such as XDA and implement that exploit as a Drozer module.  Slightly tougher one.\n A module to terminate a call without user intervention (I do not know if it is possible to do this programmatically. If you implement this successfully, do let me know in the comments section.)  Thanks for reading. Cheers :)\n"},"name":"Writing Drozer Modules","published":"2018-05-13T17:10:13+05:30","summary":"This post is a result of my experimentation with Drozer. Drozer is a security testing framework for Android, developed by MWR Labs. According the Drozer\u0026rsquo;s official documentation:\n Drozer allows you to assume the role of an Android app and interact with other apps. It can do anything that an installed application can do, such as making use of Android\u0026rsquo;s Inter-Process Communication (IPC) mechanism and interact with the underlying operating system.","type":"entry","url":"https://yashagarwal.in/posts/2018/05/writing-drozer-modules/"},{"content":{"html":"\u003cp\u003e\u003cem\u003eThis article was originally published on \u003ca href=\"https://www.zeolearn.com/magazine/develop-a-theme-for-hugo\"\u003ezeolearn\u003c/a\u003e.\u003c/em\u003e\u003c/p\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this tutorial, I will show you how to create a basic Hugo theme. I assume that you are familiar with basic HTML, and how to write content in markdown. I will be explaining the working of Hugo and how it uses Go templating language and how you can use these templates to organize your content. As this post will be focusing mainly on Hugo\u0026rsquo;s working, I will not be covering CSS here.\u003c/p\u003e\n\u003cp\u003eWe will be starting with some necessary information about the terminology used in Hugo. Then we will create a Hugo site with a very basic template. Then we will add new templates and posts to our site as we delve further into Hugo. With very slight variations to what you will learn here, you will be able to create different types of real-world websites.\u003c/p\u003e\n\u003cp\u003eNow, a short tutorial about the flow of this post. The commands that start with \u003ccode\u003e$\u003c/code\u003e are meant to be run in the terminal or command line. The output of the command will follow immediately. Comments will begin with \u003ccode\u003e#\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"some-terminology\"\u003eSome Terminology\u003c/h2\u003e\n\u003ch3 id=\"configuration-file\"\u003eConfiguration File\u003c/h3\u003e\n\u003cp\u003eHugo uses a configuration file to identify common settings for your site. It is located in the root of your site. This file can be written in TOML, YAML or JSON formats. Hugo identifies this file using the extension.\u003c/p\u003e\n\u003cp\u003eBy default, Hugo expects to find Markdown files in your \u003ccode\u003econtent/\u003c/code\u003e directory and template files in your \u003ccode\u003ethemes/\u003c/code\u003e directory. It will create HTML files in your \u003ccode\u003epublic/\u003c/code\u003e directory. You can change this by specifying alternate locations in the configuration file.\u003c/p\u003e\n\u003ch3 id=\"content\"\u003eContent\u003c/h3\u003e\n\u003cp\u003eThe content files will contain the metadata and text about your posts. A content file can be divided into two sections, the top section being frontmatter and the next section is the markdown that will be converted to HTML by Hugo. The content files reside in \u003ccode\u003e/content\u003c/code\u003e directory.\u003c/p\u003e\n\u003ch3 id=\"frontmatter\"\u003eFrontmatter\u003c/h3\u003e\n\u003cp\u003eThe frontmatter section contains information about your post. It can be written in JSON, TOML or YAML. Hugo identifies the type of frontmatter used with the help of identifying tokens(markers). TOML is surrounded by \u003ccode\u003e+++\u003c/code\u003e, YAML is by \u003ccode\u003e---\u003c/code\u003e and JSON is enclosed in curly braces \u003ccode\u003e{\u003c/code\u003e and \u003ccode\u003e}\u003c/code\u003e. The information in the front matter of a content type will be parsed to be used in the template for that specific content type while converting to HTML.\u003c/p\u003e\n\u003cp\u003eI prefer to use YAML, so you might need to translate your configurations if you are using JSON or TOML.\u003c/p\u003e\n\u003cp\u003eThis is an example of frontmatter written in YAML.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e---\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003edate\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;2018-02-11T11:45:05+05:30\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etitle\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Basic Hugo Theming Tutorial.\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003edescription\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;A primer about theme development for Hugo, a static site generator written in Golang.\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003ecategories\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e- Hugo\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e- Customization\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etags\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e- Theme\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e---\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eYou can read more about different configuration options available for frontmatter \u003ca href=\"https://gohugo.io/content-management/front-matter/#readout\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"markdown\"\u003eMarkdown\u003c/h3\u003e\n\u003cp\u003eThe markdown section is where you will write your actual post. The content written here will automatically be converted to HTML by Hugo with the help of a Markdown engine.\u003c/p\u003e\n\u003ch3 id=\"templates\"\u003eTemplates\u003c/h3\u003e\n\u003cp\u003eIn Hugo, templates govern the way; your content will be rendered to HTML. Each template provides a consistent layout when rendering the markdown content. The templates reside in the \u003ccode\u003e/layouts\u003c/code\u003e directory.\u003c/p\u003e\n\u003cp\u003eThere are three types of templates: \u003cem\u003esingle\u003c/em\u003e, \u003cem\u003elist\u003c/em\u003e and \u003cem\u003epartial\u003c/em\u003e. Each kind of template take some content as input and transform it according to the way defined in the template.\u003c/p\u003e\n\u003ch4 id=\"single-template\"\u003eSingle Template\u003c/h4\u003e\n\u003cp\u003eA single template is used to render a single page. The best example of this is \u003cem\u003eabout\u003c/em\u003e page.\u003c/p\u003e\n\u003ch4 id=\"list-template\"\u003eList Template\u003c/h4\u003e\n\u003cp\u003eA list template renders a group of related content. It can be all recent posts or all posts belonging to a particular category.\u003c/p\u003e\n\u003cp\u003eThe homepage template is a specific type of list template. Hugo assumes that the homepage will serve as a bridge to all the other content on your website.\u003c/p\u003e\n\u003ch3 id=\"partials\"\u003ePartials\u003c/h3\u003e\n\u003cp\u003ePartials are short code snippets that can be injected in any other template type. They are instrumental when you want to repeat some content on every page of your website. The header and footer content are good candidates to be included in separate partials. It is a good practice to use partials liberally in your Hugo site as it adheres to \u003ca href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\"\u003eDRY\u003c/a\u003e principle.\u003c/p\u003e\n\u003ch2 id=\"okay-lets-start\"\u003eOkay, Let\u0026rsquo;s Start\u003c/h2\u003e\n\u003cp\u003eSo now that you have a basic understanding of Hugo, we will create a new site using Hugo. Hugo provides a command to generate new sites. We will use that command to scaffold our site. It will create a basic skeleton of your site and will give you a basic configuration file.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ hugo new site ~/zeo\n$ \u003cspan class=\"nb\"\u003ecd\u003c/span\u003e ~/zeo\n$ ls -l\ntotal \u003cspan class=\"m\"\u003e28\u003c/span\u003e\ndrwxr-xr-x \u003cspan class=\"m\"\u003e2\u003c/span\u003e yash hogwarts \u003cspan class=\"m\"\u003e4096\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 11:13 archetypes\n-rw-r--r-- \u003cspan class=\"m\"\u003e1\u003c/span\u003e yash hogwarts   \u003cspan class=\"m\"\u003e82\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 11:13 config.toml\ndrwxr-xr-x \u003cspan class=\"m\"\u003e2\u003c/span\u003e yash hogwarts \u003cspan class=\"m\"\u003e4096\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 11:13 content\ndrwxr-xr-x \u003cspan class=\"m\"\u003e2\u003c/span\u003e yash hogwarts \u003cspan class=\"m\"\u003e4096\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 11:13 data\ndrwxr-xr-x \u003cspan class=\"m\"\u003e2\u003c/span\u003e yash hogwarts \u003cspan class=\"m\"\u003e4096\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 11:13 layouts\ndrwxr-xr-x \u003cspan class=\"m\"\u003e2\u003c/span\u003e yash hogwarts \u003cspan class=\"m\"\u003e4096\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 11:13 static\ndrwxr-xr-x \u003cspan class=\"m\"\u003e2\u003c/span\u003e yash hogwarts \u003cspan class=\"m\"\u003e4096\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 11:13 themes\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e I will use YAML format for the config file. Hugo, By default, uses TOML format.\u003c/p\u003e\n\u003cp\u003eA small description of this directory structure:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003earchetypes\u003c/strong\u003e: The archetypes contains predefined frontmatter format for your website\u0026rsquo;s content types. It facilitates consistent metadata format across all the content of your site.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003econtent\u003c/strong\u003e: The content directory contains the markdown files that will be converted to HTML and served to the user.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003edata\u003c/strong\u003e: From Hugo documentation\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThe data folder is where you can store additional data for Hugo to use when generating your site. Data files are not used to generate standalone pages; rather, they are meant to be supplemental to content files. This feature can extend the content in case your front matter fields grow out of control. Or perhaps you want to show a larger dataset in a template (see example below). In both cases, it is a good idea to outsource the data in their files.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003elayouts\u003c/strong\u003e: The layouts folder stores all the templates files which form the presentation of the content files.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003estatic\u003c/strong\u003e: The static folder will contain all the static assets such as \u003ccode\u003eCSS\u003c/code\u003e, \u003ccode\u003eJS\u003c/code\u003e and \u003ccode\u003eimage\u003c/code\u003e files.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003ethemes\u003c/strong\u003e: The themes folder is where we will be storing our theme.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWe will edit the \u003ccode\u003econfig.yaml\u003c/code\u003e file to edit some basic configuration of the site.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ vim config.yaml\nbaseURL: /\ntitle: \u003cspan class=\"s2\"\u003e\u0026#34;My First Blog\u0026#34;\u003c/span\u003e\ndefaultContentLanguage: en\nlanguages:\n  en:\n    lang: en\n    languageName: English\n    weight: \u003cspan class=\"m\"\u003e1\u003c/span\u003e\nMetaDataFormat: \u003cspan class=\"s2\"\u003e\u0026#34;yaml\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eNow when you run your site, Hugo will show some errors. It is normal because our layouts and themes directories are still empty.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ hugo --verbose\nINFO 2018/02/11 11:20:59 Using config file: /home/yash/zeo/config.yaml\nBuilding sites … INFO 2018/02/11 11:20:59 syncing static files to /home/yash/zeo/public/\nWARN 2018/02/11 11:20:59 No translation bundle found \u003cspan class=\"k\"\u003efor\u003c/span\u003e default language \u003cspan class=\"s2\"\u003e\u0026#34;en\u0026#34;\u003c/span\u003e\nWARN 2018/02/11 11:20:59 Translation func \u003cspan class=\"k\"\u003efor\u003c/span\u003e language en not found, use default.\nWARN 2018/02/11 11:20:59 i18n not initialized, check that you have language file \u003cspan class=\"o\"\u003e(\u003c/span\u003ein i18n\u003cspan class=\"o\"\u003e)\u003c/span\u003e that matches the site language or the default language.\nWARN 2018/02/11 11:20:59 \u003cspan class=\"o\"\u003e[\u003c/span\u003een\u003cspan class=\"o\"\u003e]\u003c/span\u003e Unable to locate layout \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;taxonomyTerm\u0026#34;\u003c/span\u003e:\n...\n...\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eThis command will also create a new directory called \u003ccode\u003epublic/\u003c/code\u003e. This is the directory where Hugo will save all the generated HTML files related to your site. It also stores all static data in this folder.\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s have a look at the \u003ccode\u003epublic\u003c/code\u003e folder.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ ls -l public/\ntotal \u003cspan class=\"m\"\u003e16\u003c/span\u003e\ndrwxr-xr-x \u003cspan class=\"m\"\u003e2\u003c/span\u003e yash hogwarts \u003cspan class=\"m\"\u003e4096\u003c/span\u003e Feb  \u003cspan class=\"m\"\u003e11\u003c/span\u003e 11:22 categories\n-rw-r--r-- \u003cspan class=\"m\"\u003e1\u003c/span\u003e yash hogwarts  \u003cspan class=\"m\"\u003e400\u003c/span\u003e Feb  \u003cspan class=\"m\"\u003e11\u003c/span\u003e 11:25 index.xml\n-rw-r--r-- \u003cspan class=\"m\"\u003e1\u003c/span\u003e yash hogwarts  \u003cspan class=\"m\"\u003e383\u003c/span\u003e Feb  \u003cspan class=\"m\"\u003e11\u003c/span\u003e 11:25 sitemap.xml\ndrwxr-xr-x \u003cspan class=\"m\"\u003e2\u003c/span\u003e yash hogwarts \u003cspan class=\"m\"\u003e4096\u003c/span\u003e Feb  \u003cspan class=\"m\"\u003e11\u003c/span\u003e 11:22 tags\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eHugo generated some XML files, but there are no HTML files. It is because we have not created any content in our content directory yet.\u003c/p\u003e\n\u003cp\u003eAt this point, you have a working site with you. All that is left is to add some content and a theme to your site.\u003c/p\u003e\n\u003ch3 id=\"create-a-new-theme\"\u003eCreate a new theme\u003c/h3\u003e\n\u003cp\u003eHugo doesn\u0026rsquo;t ship with a default theme. There are a lot of themes available on Hugo website. Hugo also ships with a command to create new themes.\u003c/p\u003e\n\u003cp\u003eIn this tutorial, we will be creating a theme called \u003ccode\u003ezeo\u003c/code\u003e. As mentioned earlier, my aim is to show you how to use Hugo\u0026rsquo;s features to fill out your HTML files from the markdown content, I will not be focusing on CSS. So the theme will be ugly but functional.\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s create a basic skeleton of the theme. It will create the directory structure of the theme and place empty files for you to fill in.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"c1\"\u003e# run it from the root of your site\u003c/span\u003e\n$ hugo new theme zeo\n$ ls -l themes/zeo/\ntotal \u003cspan class=\"m\"\u003e20\u003c/span\u003e\ndrwxr-xr-x \u003cspan class=\"m\"\u003e2\u003c/span\u003e yash hogwarts \u003cspan class=\"m\"\u003e4096\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 11:30 archetypes\ndrwxr-xr-x \u003cspan class=\"m\"\u003e4\u003c/span\u003e yash hogwarts \u003cspan class=\"m\"\u003e4096\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 11:30 layouts\n-rw-r--r-- \u003cspan class=\"m\"\u003e1\u003c/span\u003e yash hogwarts \u003cspan class=\"m\"\u003e1081\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 11:30 LICENSE.md\ndrwxr-xr-x \u003cspan class=\"m\"\u003e4\u003c/span\u003e yash hogwarts \u003cspan class=\"m\"\u003e4096\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 11:30 static\n-rw-r--r-- \u003cspan class=\"m\"\u003e1\u003c/span\u003e yash hogwarts  \u003cspan class=\"m\"\u003e432\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 11:30 theme.toml\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\nFill out \u003ccode\u003eLICENSE.md\u003c/code\u003e and \u003ccode\u003etheme.toml\u003c/code\u003e file if you plan to distribute your theme to outside world.\u003c/p\u003e\n\u003cp\u003eNow we will edit our \u003ccode\u003econfig.yaml\u003c/code\u003e file to use this theme.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ vim config.yaml\ntheme: \u003cspan class=\"s2\"\u003e\u0026#34;zeo\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eNow that we have an empty theme, let\u0026rsquo;s build the site.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ hugo --verbose\nINFO 2018/02/11 11:34:14 Using config file: /home/yash/zeo/config.yaml\nBuilding sites … INFO 2018/02/11 11:34:14 syncing static files to /home/yash/zeo/public/\nWARN 2018/02/11 11:34:14 No translation bundle found \u003cspan class=\"k\"\u003efor\u003c/span\u003e default language \u003cspan class=\"s2\"\u003e\u0026#34;en\u0026#34;\u003c/span\u003e\nWARN 2018/02/11 11:34:14 Translation func \u003cspan class=\"k\"\u003efor\u003c/span\u003e language en not found, use default.\nWARN 2018/02/11 11:34:14 i18n not initialized, check that you have language file \u003cspan class=\"o\"\u003e(\u003c/span\u003ein i18n\u003cspan class=\"o\"\u003e)\u003c/span\u003e that matches the site language or the default language.\n\n                   \u003cspan class=\"p\"\u003e|\u003c/span\u003e EN\n+------------------+----+\n  Pages            \u003cspan class=\"p\"\u003e|\u003c/span\u003e  \u003cspan class=\"m\"\u003e3\u003c/span\u003e\n  Paginator pages  \u003cspan class=\"p\"\u003e|\u003c/span\u003e  \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n  Non-page files   \u003cspan class=\"p\"\u003e|\u003c/span\u003e  \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n  Static files     \u003cspan class=\"p\"\u003e|\u003c/span\u003e  \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n  Processed images \u003cspan class=\"p\"\u003e|\u003c/span\u003e  \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n  Aliases          \u003cspan class=\"p\"\u003e|\u003c/span\u003e  \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n  Sitemaps         \u003cspan class=\"p\"\u003e|\u003c/span\u003e  \u003cspan class=\"m\"\u003e1\u003c/span\u003e\n  Cleaned          \u003cspan class=\"p\"\u003e|\u003c/span\u003e  \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n\nTotal in \u003cspan class=\"m\"\u003e12\u003c/span\u003e ms\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\nThese warnings are harmless in our case, as we are developing our site in English only.\u003c/p\u003e\n\u003cp\u003eHugo does two things while generating your website. It transforms all the content files to HTML using the defined templates, and its copies static files into the site. Static files are not transformed by Hugo. They are copied exactly as they are.\u003c/p\u003e\n\u003ch3 id=\"the-cycle\"\u003eThe Cycle\u003c/h3\u003e\n\u003cp\u003eThe usual development cycle when developing themes for Hugo is:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDelete the \u003ccode\u003e/public\u003c/code\u003e folder\u003c/li\u003e\n\u003cli\u003eRun the built-in web server and open your site in the browser\u003c/li\u003e\n\u003cli\u003eMake changes to your theme files\u003c/li\u003e\n\u003cli\u003eView your changes in browser\u003c/li\u003e\n\u003cli\u003eRepeat step 3\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIt is necessary to delete the \u003ccode\u003epublic\u003c/code\u003e directory because Hugo does not try to remove any outdated files from this folder. So the old data might interfere with your workflow.\u003c/p\u003e\n\u003cp\u003eIt is also a good idea to track changes in your theme with the help of a version control software. I prefer Git for this. You can use others according to your preference.\u003c/p\u003e\n\u003ch3 id=\"run-your-site-in-the-browser\"\u003eRun your site in the browser\u003c/h3\u003e\n\u003cp\u003eHugo has a built-in web server which helps considerably while developing themes for Hugo. It also has a \u003cem\u003elive reload\u003c/em\u003e and \u003cem\u003ewatch\u003c/em\u003e feature which watches for changes in your files and reloads the web page accordingly.\u003c/p\u003e\n\u003cp\u003eRun it with \u003ccode\u003ehugo server\u003c/code\u003e command.\u003c/p\u003e\n\u003cp\u003eNow open \u003ca href=\"http://localhost:1313\"\u003ehttp://localhost:1313\u003c/a\u003e in your browser. By default, Hugo will not show anything, because it cannot find any HTML file in the public directory.\u003c/p\u003e\n\u003cp\u003eThe command to load web server with \u003ccode\u003e--watch\u003c/code\u003e option is:\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ hugo server --watch --verbose\n...\n...\n                   \u003cspan class=\"p\"\u003e|\u003c/span\u003e EN\n+------------------+----+\n  Pages            \u003cspan class=\"p\"\u003e|\u003c/span\u003e  \u003cspan class=\"m\"\u003e4\u003c/span\u003e\n  Paginator pages  \u003cspan class=\"p\"\u003e|\u003c/span\u003e  \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n  Non-page files   \u003cspan class=\"p\"\u003e|\u003c/span\u003e  \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n  Static files     \u003cspan class=\"p\"\u003e|\u003c/span\u003e  \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n  Processed images \u003cspan class=\"p\"\u003e|\u003c/span\u003e  \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n  Aliases          \u003cspan class=\"p\"\u003e|\u003c/span\u003e  \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n  Sitemaps         \u003cspan class=\"p\"\u003e|\u003c/span\u003e  \u003cspan class=\"m\"\u003e1\u003c/span\u003e\n  Cleaned          \u003cspan class=\"p\"\u003e|\u003c/span\u003e  \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n\nTotal in \u003cspan class=\"m\"\u003e11\u003c/span\u003e ms\n...\n...\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003ch3 id=\"update-the-home-page-template\"\u003eUpdate the Home page template\u003c/h3\u003e\n\u003cp\u003eHugo looks for following directories in theme\u0026rsquo;s \u003ccode\u003e/layout\u003c/code\u003e folder to search for \u003ccode\u003eindex.html\u003c/code\u003e page.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eindex.html\u003c/li\u003e\n\u003cli\u003e_default/list.html\u003c/li\u003e\n\u003cli\u003e_default/single.html\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIt is always desirable to update the most specific template related to the content type. It is not a hard and fast rule, but a good generalization to follow.\u003c/p\u003e\n\u003cp\u003eWe will first make a static page to see if our \u003ccode\u003eindex.html\u003c/code\u003e page is rendered correctly.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e$ vim themes/zeo/layouts/index.html\n\u003cspan class=\"cp\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003eHello World!\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBuild the site and verify the results. You should see \u003cem\u003eHello World!\u003c/em\u003e when you open \u003ca href=\"http://localhost:1313\"\u003ehttp://localhost:1313\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"building-a-functional-home-page\"\u003eBuilding a functional Home Page\u003c/h3\u003e\n\u003cp\u003eNow we will create a home page which will reflect the content of our site every time we build it.\u003c/p\u003e\n\u003cp\u003eFor that, we will first create some new posts. We will display these posts as a list on the home page and on their pages, too.\u003c/p\u003e\n\u003cp\u003eHugo has a command for generating skeleton of posts, just like it did for sites and themes.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ hugo --verbose new post/first.md\nINFO 2018/02/11 11:40:58 Using config file: /home/yash/zeo/config.yaml\nINFO 2018/02/11 11:40:58 attempting to create \u003cspan class=\"s2\"\u003e\u0026#34;post/first.md\u0026#34;\u003c/span\u003e of \u003cspan class=\"s2\"\u003e\u0026#34;post\u0026#34;\u003c/span\u003e of ext \u003cspan class=\"s2\"\u003e\u0026#34;.md\u0026#34;\u003c/span\u003e\nINFO 2018/02/11 11:40:58 curpath: /home/yash/zeo/archetypes/default.md\n...\n...\n/home/yash/zeo/content/post/first.md created\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003enew\u003c/code\u003e command uses an archetype to generate the frontmatter for new posts. When we created our site, hugo created a default archetype in the \u003ccode\u003e/archetype\u003c/code\u003e folder.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ cat archetypes/default.md\n---\ntitle: \u003cspan class=\"s2\"\u003e\u0026#34;{{ replace .Name \u0026#34;\u003c/span\u003e-\u003cspan class=\"s2\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34; | title }}\u0026#34;\u003c/span\u003e\ndate: \u003cspan class=\"o\"\u003e{{\u003c/span\u003e .Date \u003cspan class=\"o\"\u003e}}\u003c/span\u003e\n\n---\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eIt is a good idea to create a default archetype in the themes folder also so that users can override the theme\u0026rsquo;s archetype with their archetype whenever they want.\u003c/p\u003e\n\u003cp\u003eWe will create a new archetype for our posts\u0026rsquo; frontmatter and delete the default \u003ccode\u003earchetype/default.md\u003c/code\u003e.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ rm -rf archetype/default.md\n$ vim themes/zeo/archetypes/post.md\n---\ntitle: \u003cspan class=\"s2\"\u003e\u0026#34;{{ replace .Name \u0026#34;\u003c/span\u003e-\u003cspan class=\"s2\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34; | title }}\u0026#34;\u003c/span\u003e\ndate: \u003cspan class=\"o\"\u003e{{\u003c/span\u003e .Date \u003cspan class=\"o\"\u003e}}\u003c/span\u003e\nDescription: \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\nTags: \u003cspan class=\"o\"\u003e[]\u003c/span\u003e\nCategories: \u003cspan class=\"o\"\u003e[]\u003c/span\u003e\n\n---\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eCreate one more post in \u003ccode\u003econtent/post\u003c/code\u003e directory.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ hugo --verbose new post/second.md\nINFO 2018/02/11 12:13:56 Using config file: /home/yash/zeo/config.yaml\nINFO 2018/02/11 12:13:56 attempting to create \u003cspan class=\"s2\"\u003e\u0026#34;post/second.md\u0026#34;\u003c/span\u003e of \u003cspan class=\"s2\"\u003e\u0026#34;post\u0026#34;\u003c/span\u003e of ext \u003cspan class=\"s2\"\u003e\u0026#34;.md\u0026#34;\u003c/span\u003e\nINFO 2018/02/11 12:13:56 curpath: /home/yash/zeo/themes/zeo/archetypes/post.md\n...\n...\n/home/yash/zeo/content/post/second.md created\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eSee the difference. Hugo used the theme\u0026rsquo;s archetype for generating the frontmatter this time.\u003c/p\u003e\n\u003cp\u003eBy default, Hugo does not generate posts with an empty content section. So you will need to add some content before you try to build the site.\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s look at the \u003ccode\u003econtent/post/first.md\u003c/code\u003e file, after adding content to it.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-markdown\" data-lang=\"markdown\"\u003e$ cat content/post/first.md\n---\ntitle: \u0026#34;First\u0026#34;\ndate: 2018-02-11T11:35:58+05:30\ndraft: true\nTags: [\u0026#34;first\u0026#34;]\nCategories: [\u0026#34;Hugo\u0026#34;]\n\n---\n\nHi there. My first Hugo post\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eNow that our posts are ready, we need to create templates to show them in a list on the home page and to show their content on separate pages for each post.\u003c/p\u003e\n\u003cp\u003eWe will first edit the template for the home page that we created previously. We will then modify \u0026ldquo;single\u0026rdquo; templates which are used to generate output for a single content file. We also have \u0026ldquo;list\u0026rdquo; templates which are used to group similar type of content and render them as a list.\nThe home page will show a list of last ten posts that we have created. Let\u0026rsquo;s update its template to add this logic.\u003c/p\u003e\n\u003ch3 id=\"update-your-home-page-to-show-your-content\"\u003eUpdate your home page to show your content\u003c/h3\u003e\n\u003cp\u003eNow add your template code to \u003ccode\u003ethemes/zeo/layouts/index.html\u003c/code\u003e.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e$ vim themes/zeo/layouts/index.html\n$ cat !$\ncat themes/zeo/layouts/index.html\n\u003cspan class=\"cp\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  {{ range first 10 .Data.Pages }}\n    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e{{ .Title }}\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  {{ end }}\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eHugo uses Go Template Engine. This engine scans the templates for commands that are enclosed between \u003ccode\u003e{{\u003c/code\u003e and \u003ccode\u003e}}\u003c/code\u003e. In this template, the commands are \u003ccode\u003erange\u003c/code\u003e, \u003ccode\u003efirst\u003c/code\u003e, \u003ccode\u003e.Data.Pages\u003c/code\u003e, \u003ccode\u003e.Title\u003c/code\u003e and \u003ccode\u003eend\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe template implies that we are going to get first 10 latest pages from our content folder and render their title as \u003ccode\u003eh1\u003c/code\u003e heading.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003erange\u003c/code\u003e is an iterator function. Hugo treats every HTML file created as a page, so \u003ccode\u003erange\u003c/code\u003e will loop through all the pages created. Here we are instructing \u003ccode\u003erange\u003c/code\u003e to stop after first ten pages.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eend\u003c/code\u003e command signals the end of the \u003cem\u003erange\u003c/em\u003e iterator. The engine loops back to the next iteration as soon as it encounters the \u003cem\u003eend\u003c/em\u003e command. Everything between \u003cem\u003erange\u003c/em\u003e and \u003cem\u003eend\u003c/em\u003e will be evaluated for each iteration of the loop.\u003c/p\u003e\n\u003cp\u003eBuild the website and see the changes. The homepage now shows our two posts. However, you cannot click on the posts and read their content. Let\u0026rsquo;s change that too.\u003c/p\u003e\n\u003ch3 id=\"linking-your-posts-on-home-page\"\u003eLinking your posts on Home Page\u003c/h3\u003e\n\u003cp\u003eLet\u0026rsquo;s add a link to the post\u0026rsquo;s page from home page.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e$ vim themes/zeo/layouts/index.html\n\u003cspan class=\"cp\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  {{ range first 10 .Data.Pages }}\n    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ea\u003c/span\u003e \u003cspan class=\"na\"\u003ehref\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;{{ .Permalink }}\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e{{ .Title }}\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  {{ end }}\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eBuild your site and see the result. The titles are now links, but when you click on them, it takes you to a page which says \u003ccode\u003e404 page not found\u003c/code\u003e. That is expected because we have not created any template for the single pages where the content can be rendered. So Hugo could not find any template, and it did not output any HTML file. We will change that in a minute.\u003c/p\u003e\n\u003cp\u003eWe want to render the posts, which are in \u003ccode\u003econtent/post\u003c/code\u003e directory. That means that their section is post and their type is also post.\u003c/p\u003e\n\u003cp\u003eHugo uses section and type information to identify the template file for each piece of content. It will first look for a template file which matches the section or type of the content. If it could not find it, then it will use \u003ccode\u003e_default/single.html\u003c/code\u003e file.\u003c/p\u003e\n\u003cp\u003eSince we do not have any other content type yet, we will just start by updating the \u003ccode\u003e_default/single.html\u003c/code\u003e file.\u003c/p\u003e\n\u003cp\u003eRemember that Hugo will use this file for every content type for which we have not created a template. However, for now, we will accept that cost as we do not have any other content type with us. We will refactor our templates to accommodate more content types, as we add more content.\u003c/p\u003e\n\u003cp\u003eUpdate the template file.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e$ vim themes/zeo/layouts/_default/single.html\n\u003cspan class=\"cp\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003etitle\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e{{ .Title }}\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003etitle\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e{{ .Title }}\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  {{ .Content }}\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eBuild the site and verify the results. You will see that on clicking on \u003ccode\u003efirst\u003c/code\u003e, you get the usual result, but clicking on \u003ccode\u003esecond\u003c/code\u003e still produces the \u003ccode\u003e404 page not found\u003c/code\u003e error. It is because Hugo does not generate pages with empty content. Remember I mentioned it earlier.\u003c/p\u003e\n\u003cp\u003eNow that we have our home page and posts page ready, we will build a page to list all the posts, not just the recent ten posts. This page will be accessible at \u003ca href=\"http://localhost:1313/post\"\u003ehttp://localhost:1313/post\u003c/a\u003e. Currently, this page is blank because there is no template defined for it.\u003c/p\u003e\n\u003cp\u003eThis page will show the listings of all the posts, so the type of this page will be a list. We will again use the default \u003ccode\u003e_default/list.html\u003c/code\u003e as we do not have any other content type with us.\u003c/p\u003e\n\u003cp\u003eUpdate the list file.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e$ vim themes/zeo/layouts/_default/list.html\n\u003cspan class=\"cp\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  {{ range .Data.Pages }}\n    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ea\u003c/span\u003e \u003cspan class=\"na\"\u003ehref\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;{{ .Permalink }}\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e{{ .Title }}\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  {{ end }}\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3 id=\"add-date-published-to-the-posts\"\u003eAdd \u0026ldquo;Date Published\u0026rdquo; to the posts\u003c/h3\u003e\n\u003cp\u003eIt is a standard practice to add the date on which the post was published on the blog. The front matter of our posts has a variable named \u003ccode\u003edate\u003c/code\u003e. We will use that variable to fetch the date. Our posts are using the default \u003cem\u003esingle\u003c/em\u003e template, so we will edit that file.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e$ vim themes/zeo/layouts/_default/single.html\n\u003cspan class=\"cp\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003etitle\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e{{ .Title }}\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003etitle\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e{{ .Title }}\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eh2\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e{{ .Date.Format \u0026#34;Sun, Feb 11, 2018\u0026#34; }}\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eh2\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  {{ .Content }}\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003chr\u003e\n\u003ch2 id=\"adding-top-level-pages\"\u003eAdding top-level Pages\u003c/h2\u003e\n\u003cp\u003eOkay, so now that we have our homepage, post-list page and post content pages in place, we will add a new \u003cem\u003eabout\u003c/em\u003e page at the top level of our blog, not at a sublevel like we did for posts.\u003c/p\u003e\n\u003cp\u003eHugo uses the directory structure of the content directory to identify the structure of the blog. Let\u0026rsquo;s verify that and create a new \u003ccode\u003eabout\u003c/code\u003e page in the content directory.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e$ vim content/about.md\n---\ntitle: \u0026#34;about\u0026#34;\ndescription: \u0026#34;about this blog\u0026#34;\ndate: \u0026#34;2018-02-11\u0026#34;\n---\n\n### about me\n\nHi there, you just reached my blog.\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eLet\u0026rsquo;s generate the site and view the results.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ hugo --verbose\n$ ls -l public/\ntotal \u003cspan class=\"m\"\u003e36\u003c/span\u003e\ndrwxr-xr-x \u003cspan class=\"m\"\u003e2\u003c/span\u003e yash hogwarts \u003cspan class=\"m\"\u003e4096\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 12:43 about\ndrwxr-xr-x \u003cspan class=\"m\"\u003e3\u003c/span\u003e yash hogwarts \u003cspan class=\"m\"\u003e4096\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 12:43 categories\ndrwxr-xr-x \u003cspan class=\"m\"\u003e2\u003c/span\u003e yash hogwarts \u003cspan class=\"m\"\u003e4096\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 11:20 css\n-rw-r--r-- \u003cspan class=\"m\"\u003e1\u003c/span\u003e yash hogwarts  \u003cspan class=\"m\"\u003e187\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 12:43 index.html\n-rw-r--r-- \u003cspan class=\"m\"\u003e1\u003c/span\u003e yash hogwarts \u003cspan class=\"m\"\u003e1183\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 12:43 index.xml\ndrwxr-xr-x \u003cspan class=\"m\"\u003e2\u003c/span\u003e yash hogwarts \u003cspan class=\"m\"\u003e4096\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 11:20 js\ndrwxr-xr-x \u003cspan class=\"m\"\u003e4\u003c/span\u003e yash hogwarts \u003cspan class=\"m\"\u003e4096\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 12:43 post\n-rw-r--r-- \u003cspan class=\"m\"\u003e1\u003c/span\u003e yash hogwarts \u003cspan class=\"m\"\u003e1139\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 12:43 sitemap.xml\ndrwxr-xr-x \u003cspan class=\"m\"\u003e3\u003c/span\u003e yash hogwarts \u003cspan class=\"m\"\u003e4096\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 12:43 tags\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNotice that Hugo created a new directory \u003ccode\u003eabout\u003c/code\u003e. This directory contains only one file \u003ccode\u003eindex.html\u003c/code\u003e. The about page will be rendered from \u003ccode\u003eabout/index.html\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIf you look carefully, the \u003ccode\u003eabout\u003c/code\u003e page is listed with the posts on the homepage. It is not desirable, so let\u0026rsquo;s change that first.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e$ vim themes/zeo/layouts/index.html\n\u003cspan class=\"cp\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003eposts\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  {{ range first 10 .Data.Pages }}\n    {{ if eq .Type \u0026#34;post\u0026#34;}}\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eh2\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ea\u003c/span\u003e \u003cspan class=\"na\"\u003ehref\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;{{ .Permalink }}\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e{{ .Title }}\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eh2\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n    {{ end }}\n  {{ end }}\n\n  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003epages\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  {{ range .Data.Pages }}\n    {{ if eq .Type \u0026#34;page\u0026#34; }}\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eh2\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ea\u003c/span\u003e \u003cspan class=\"na\"\u003ehref\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;{{ .Permalink }}\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e{{ .Title }}\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eh2\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n    {{ end }}\n  {{ end }}\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow build the site and verify the results. The homepage now has two sections, one for posts and other for the pages. Click on the \u003cem\u003eabout\u003c/em\u003e page. You will see the page for \u003cem\u003eabout\u003c/em\u003e. Remember, I mentioned that Hugo would use the \u003cem\u003esingle\u003c/em\u003e template for each page, for which it cannot find a template file. There is still one issue. The \u003cem\u003eabout\u003c/em\u003e page shows the date also. We do not want to show the date on the \u003cem\u003eabout\u003c/em\u003e page.\u003c/p\u003e\n\u003cp\u003eThere are a couple of ways to fix this. We can add an if-else statement to detect the type of the content and display date only if it is a post. However, let\u0026rsquo;s use the feature provided by Hugo and create a new template type for the posts. Before we do that, let\u0026rsquo;s learn to use one more template type which is \u003cem\u003epartials\u003c/em\u003e.\u003c/p\u003e\n\u003ch2 id=\"partials-1\"\u003ePartials\u003c/h2\u003e\n\u003cp\u003eIn Hugo, partials are used to store the shared piece of code which repeats in more than one templates. Partials are kept in \u003ccode\u003ethemes/zeo/layouts/partials\u003c/code\u003e directory. Partials can be used to override the themes presentation. End users can use them to change the default behavior of a theme. It is always a good idea to use partials as much as possible.\u003c/p\u003e\n\u003ch3 id=\"header-and-footer-partials\"\u003eHeader and Footer partials\u003c/h3\u003e\n\u003cp\u003eHeader and footer of most of the posts and pages will follow a similar pattern. So they form an excellent example to be defined as a partial.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e$ vim themes/zeo/layouts/partials/header.html\n\u003cspan class=\"cp\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003etitle\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e{{ .Title }}\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003etitle\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\n$ vim themes/zeo/layouts/partials/footer.html\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eWe can call a partial by including this path in the template\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"p\"\u003e{{\u003c/span\u003e \u003cspan class=\"nx\"\u003epartial\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;header.html\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e \u003cspan class=\"p\"\u003e}}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003ch2 id=\"update-the-homepage-template\"\u003eUpdate the Homepage template\u003c/h2\u003e\n\u003cp\u003eLet\u0026rsquo;s update our homepage template to use these partials.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e$ vim themes/zeo/layouts/index.html\n{{ partial \u0026#34;header.html\u0026#34; . }}\n\n  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003eposts\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  {{ range first 10 .Data.Pages }}\n    {{ if eq .Type \u0026#34;post\u0026#34;}}\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eh2\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ea\u003c/span\u003e \u003cspan class=\"na\"\u003ehref\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;{{ .Permalink }}\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e{{ .Title }}\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eh2\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n    {{ end }}\n  {{ end }}\n\n  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003epages\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  {{ range .Data.Pages }}\n    {{ if or (eq .Type \u0026#34;page\u0026#34;) (eq .Type \u0026#34;about\u0026#34;) }}\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eh2\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ea\u003c/span\u003e \u003cspan class=\"na\"\u003ehref\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;{{ .Permalink }}\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eh2\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n    {{ end }}\n  {{ end }}\n\n{{ partial \u0026#34;footer.html\u0026#34; . }}\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003ch2 id=\"update-the-single-template\"\u003eUpdate the single template\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e$ vim themes/zeo/layouts/_default/single.html\n{{ partial \u0026#34;header.html\u0026#34; . }}\n\n  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e{{ .Title }}\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eh2\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e{{ .Date.Format \u0026#34;Sun, Feb 11, 2018\u0026#34; }}\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eh2\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  {{ .Content }}\n\n{{ partial \u0026#34;footer.html\u0026#34; . }}\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBuild the website and verify the results. The title on the posts and the about page should both reflect the value from the markdown file.\u003c/p\u003e\n\u003ch2 id=\"fixing-the-date-shown-on-about-page\"\u003eFixing the date shown on About page\u003c/h2\u003e\n\u003cp\u003eRemember, we had the issue that the date was showing on the \u003cem\u003eabout\u003c/em\u003e page also. We discussed one method to solve this issue. Now I will discuss a more \u003cem\u003ehugoic\u003c/em\u003e way of solving this issue.\u003c/p\u003e\n\u003cp\u003eWe will create a new section template to fix this issue.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e$ mkdir themes/zeo/layouts/post\n$ vim themes/zeo/layouts/post/single.html\n{{ partial \u0026#34;header.html\u0026#34; . }}\n\n  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e{{ .Title }}\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eh2\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eh2\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  {{ .Content }}\n\n{{ partial \u0026#34;footer.html\u0026#34; . }}\n\n\n$ vim themes/zeo/layouts/_default/single.html\n\u003cspan class=\"cp\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003etitle\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e{{ .Title }}\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003etitle\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e{{ .Title }}\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  {{ .Content }}\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNote that we have changed the default \u003cem\u003esingle\u003c/em\u003e template and added that logic in post\u0026rsquo;s \u003cem\u003esingle\u003c/em\u003e template.\u003c/p\u003e\n\u003cp\u003eBuild the website and verify the results. The \u003cem\u003eabout\u003c/em\u003e page does not show the date now, but the posts page still show the date. We can also move the list template\u0026rsquo;s logic to the \u003ccode\u003eindex.html\u003c/code\u003e file of post section template.\u003c/p\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eWe have learnt, how Hugo harnesses the powerful yet simple Go template engine to create the static site generator. We also learnt about partials and their excellent utilization by Hugo in the spirit of \u003cem\u003eDon\u0026rsquo;t Repeat Yourself\u003c/em\u003e principle. Now that you know how to make themes in Hugo, go ahead and start creating new beautiful themes. Best of luck for your endaevour.\u003c/p\u003e\n","text":"This article was originally published on zeolearn.\nIntroduction In this tutorial, I will show you how to create a basic Hugo theme. I assume that you are familiar with basic HTML, and how to write content in markdown. I will be explaining the working of Hugo and how it uses Go templating language and how you can use these templates to organize your content. As this post will be focusing mainly on Hugo\u0026rsquo;s working, I will not be covering CSS here.\nWe will be starting with some necessary information about the terminology used in Hugo. Then we will create a Hugo site with a very basic template. Then we will add new templates and posts to our site as we delve further into Hugo. With very slight variations to what you will learn here, you will be able to create different types of real-world websites.\nNow, a short tutorial about the flow of this post. The commands that start with $ are meant to be run in the terminal or command line. The output of the command will follow immediately. Comments will begin with #.\nSome Terminology Configuration File Hugo uses a configuration file to identify common settings for your site. It is located in the root of your site. This file can be written in TOML, YAML or JSON formats. Hugo identifies this file using the extension.\nBy default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file.\nContent The content files will contain the metadata and text about your posts. A content file can be divided into two sections, the top section being frontmatter and the next section is the markdown that will be converted to HTML by Hugo. The content files reside in /content directory.\nFrontmatter The frontmatter section contains information about your post. It can be written in JSON, TOML or YAML. Hugo identifies the type of frontmatter used with the help of identifying tokens(markers). TOML is surrounded by +++, YAML is by --- and JSON is enclosed in curly braces { and }. The information in the front matter of a content type will be parsed to be used in the template for that specific content type while converting to HTML.\nI prefer to use YAML, so you might need to translate your configurations if you are using JSON or TOML.\nThis is an example of frontmatter written in YAML. ---date:\u0026#34;2018-02-11T11:45:05+05:30\u0026#34;title:\u0026#34;Basic Hugo Theming Tutorial.\u0026#34;description:\u0026#34;A primer about theme development for Hugo, a static site generator written in Golang.\u0026#34;categories:- Hugo- Customizationtags:- Theme---\nYou can read more about different configuration options available for frontmatter here.\nMarkdown The markdown section is where you will write your actual post. The content written here will automatically be converted to HTML by Hugo with the help of a Markdown engine.\nTemplates In Hugo, templates govern the way; your content will be rendered to HTML. Each template provides a consistent layout when rendering the markdown content. The templates reside in the /layouts directory.\nThere are three types of templates: single, list and partial. Each kind of template take some content as input and transform it according to the way defined in the template.\nSingle Template A single template is used to render a single page. The best example of this is about page.\nList Template A list template renders a group of related content. It can be all recent posts or all posts belonging to a particular category.\nThe homepage template is a specific type of list template. Hugo assumes that the homepage will serve as a bridge to all the other content on your website.\nPartials Partials are short code snippets that can be injected in any other template type. They are instrumental when you want to repeat some content on every page of your website. The header and footer content are good candidates to be included in separate partials. It is a good practice to use partials liberally in your Hugo site as it adheres to DRY principle.\nOkay, Let\u0026rsquo;s Start So now that you have a basic understanding of Hugo, we will create a new site using Hugo. Hugo provides a command to generate new sites. We will use that command to scaffold our site. It will create a basic skeleton of your site and will give you a basic configuration file. $ hugo new site ~/zeo $ cd ~/zeo $ ls -l total 28 drwxr-xr-x 2 yash hogwarts 4096 Feb 11 11:13 archetypes -rw-r--r-- 1 yash hogwarts 82 Feb 11 11:13 config.toml drwxr-xr-x 2 yash hogwarts 4096 Feb 11 11:13 content drwxr-xr-x 2 yash hogwarts 4096 Feb 11 11:13 data drwxr-xr-x 2 yash hogwarts 4096 Feb 11 11:13 layouts drwxr-xr-x 2 yash hogwarts 4096 Feb 11 11:13 static drwxr-xr-x 2 yash hogwarts 4096 Feb 11 11:13 themes\nNote: I will use YAML format for the config file. Hugo, By default, uses TOML format.\nA small description of this directory structure:\n  archetypes: The archetypes contains predefined frontmatter format for your website\u0026rsquo;s content types. It facilitates consistent metadata format across all the content of your site.\n  content: The content directory contains the markdown files that will be converted to HTML and served to the user.\n  data: From Hugo documentation\n The data folder is where you can store additional data for Hugo to use when generating your site. Data files are not used to generate standalone pages; rather, they are meant to be supplemental to content files. This feature can extend the content in case your front matter fields grow out of control. Or perhaps you want to show a larger dataset in a template (see example below). In both cases, it is a good idea to outsource the data in their files.\n   layouts: The layouts folder stores all the templates files which form the presentation of the content files.\n  static: The static folder will contain all the static assets such as CSS, JS and image files.\n  themes: The themes folder is where we will be storing our theme.\n  We will edit the config.yaml file to edit some basic configuration of the site. $ vim config.yaml baseURL: / title: \u0026#34;My First Blog\u0026#34; defaultContentLanguage: en languages: en: lang: en languageName: English weight: 1 MetaDataFormat: \u0026#34;yaml\u0026#34;\nNow when you run your site, Hugo will show some errors. It is normal because our layouts and themes directories are still empty. $ hugo --verbose INFO 2018/02/11 11:20:59 Using config file: /home/yash/zeo/config.yaml Building sites … INFO 2018/02/11 11:20:59 syncing static files to /home/yash/zeo/public/ WARN 2018/02/11 11:20:59 No translation bundle found for default language \u0026#34;en\u0026#34; WARN 2018/02/11 11:20:59 Translation func for language en not found, use default. WARN 2018/02/11 11:20:59 i18n not initialized, check that you have language file (in i18n) that matches the site language or the default language. WARN 2018/02/11 11:20:59 [en] Unable to locate layout for \u0026#34;taxonomyTerm\u0026#34;: ... ...\nThis command will also create a new directory called public/. This is the directory where Hugo will save all the generated HTML files related to your site. It also stores all static data in this folder.\nLet\u0026rsquo;s have a look at the public folder. $ ls -l public/ total 16 drwxr-xr-x 2 yash hogwarts 4096 Feb 11 11:22 categories -rw-r--r-- 1 yash hogwarts 400 Feb 11 11:25 index.xml -rw-r--r-- 1 yash hogwarts 383 Feb 11 11:25 sitemap.xml drwxr-xr-x 2 yash hogwarts 4096 Feb 11 11:22 tags\nHugo generated some XML files, but there are no HTML files. It is because we have not created any content in our content directory yet.\nAt this point, you have a working site with you. All that is left is to add some content and a theme to your site.\nCreate a new theme Hugo doesn\u0026rsquo;t ship with a default theme. There are a lot of themes available on Hugo website. Hugo also ships with a command to create new themes.\nIn this tutorial, we will be creating a theme called zeo. As mentioned earlier, my aim is to show you how to use Hugo\u0026rsquo;s features to fill out your HTML files from the markdown content, I will not be focusing on CSS. So the theme will be ugly but functional.\nLet\u0026rsquo;s create a basic skeleton of the theme. It will create the directory structure of the theme and place empty files for you to fill in. # run it from the root of your site $ hugo new theme zeo $ ls -l themes/zeo/ total 20 drwxr-xr-x 2 yash hogwarts 4096 Feb 11 11:30 archetypes drwxr-xr-x 4 yash hogwarts 4096 Feb 11 11:30 layouts -rw-r--r-- 1 yash hogwarts 1081 Feb 11 11:30 LICENSE.md drwxr-xr-x 4 yash hogwarts 4096 Feb 11 11:30 static -rw-r--r-- 1 yash hogwarts 432 Feb 11 11:30 theme.toml Fill out LICENSE.md and theme.toml file if you plan to distribute your theme to outside world.\nNow we will edit our config.yaml file to use this theme. $ vim config.yaml theme: \u0026#34;zeo\u0026#34;\nNow that we have an empty theme, let\u0026rsquo;s build the site. $ hugo --verbose INFO 2018/02/11 11:34:14 Using config file: /home/yash/zeo/config.yaml Building sites … INFO 2018/02/11 11:34:14 syncing static files to /home/yash/zeo/public/ WARN 2018/02/11 11:34:14 No translation bundle found for default language \u0026#34;en\u0026#34; WARN 2018/02/11 11:34:14 Translation func for language en not found, use default. WARN 2018/02/11 11:34:14 i18n not initialized, check that you have language file (in i18n) that matches the site language or the default language. | EN +------------------+----+ Pages | 3 Paginator pages | 0 Non-page files | 0 Static files | 0 Processed images | 0 Aliases | 0 Sitemaps | 1 Cleaned | 0 Total in 12 ms These warnings are harmless in our case, as we are developing our site in English only.\nHugo does two things while generating your website. It transforms all the content files to HTML using the defined templates, and its copies static files into the site. Static files are not transformed by Hugo. They are copied exactly as they are.\nThe Cycle The usual development cycle when developing themes for Hugo is:\n Delete the /public folder Run the built-in web server and open your site in the browser Make changes to your theme files View your changes in browser Repeat step 3  It is necessary to delete the public directory because Hugo does not try to remove any outdated files from this folder. So the old data might interfere with your workflow.\nIt is also a good idea to track changes in your theme with the help of a version control software. I prefer Git for this. You can use others according to your preference.\nRun your site in the browser Hugo has a built-in web server which helps considerably while developing themes for Hugo. It also has a live reload and watch feature which watches for changes in your files and reloads the web page accordingly.\nRun it with hugo server command.\nNow open http://localhost:1313 in your browser. By default, Hugo will not show anything, because it cannot find any HTML file in the public directory.\nThe command to load web server with --watch option is: $ hugo server --watch --verbose ... ... | EN +------------------+----+ Pages | 4 Paginator pages | 0 Non-page files | 0 Static files | 0 Processed images | 0 Aliases | 0 Sitemaps | 1 Cleaned | 0 Total in 11 ms ... ...\nUpdate the Home page template Hugo looks for following directories in theme\u0026rsquo;s /layout folder to search for index.html page.\n index.html _default/list.html _default/single.html  It is always desirable to update the most specific template related to the content type. It is not a hard and fast rule, but a good generalization to follow.\nWe will first make a static page to see if our index.html page is rendered correctly.\n$ vim themes/zeo/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Hello World!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Build the site and verify the results. You should see Hello World! when you open http://localhost:1313.\nBuilding a functional Home Page Now we will create a home page which will reflect the content of our site every time we build it.\nFor that, we will first create some new posts. We will display these posts as a list on the home page and on their pages, too.\nHugo has a command for generating skeleton of posts, just like it did for sites and themes. $ hugo --verbose new post/first.md INFO 2018/02/11 11:40:58 Using config file: /home/yash/zeo/config.yaml INFO 2018/02/11 11:40:58 attempting to create \u0026#34;post/first.md\u0026#34; of \u0026#34;post\u0026#34; of ext \u0026#34;.md\u0026#34; INFO 2018/02/11 11:40:58 curpath: /home/yash/zeo/archetypes/default.md ... ... /home/yash/zeo/content/post/first.md created\nThe new command uses an archetype to generate the frontmatter for new posts. When we created our site, hugo created a default archetype in the /archetype folder. $ cat archetypes/default.md --- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date: {{ .Date }} ---\nIt is a good idea to create a default archetype in the themes folder also so that users can override the theme\u0026rsquo;s archetype with their archetype whenever they want.\nWe will create a new archetype for our posts\u0026rsquo; frontmatter and delete the default archetype/default.md. $ rm -rf archetype/default.md $ vim themes/zeo/archetypes/post.md --- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date: {{ .Date }} Description: \u0026#34;\u0026#34; Tags: [] Categories: [] ---\nCreate one more post in content/post directory. $ hugo --verbose new post/second.md INFO 2018/02/11 12:13:56 Using config file: /home/yash/zeo/config.yaml INFO 2018/02/11 12:13:56 attempting to create \u0026#34;post/second.md\u0026#34; of \u0026#34;post\u0026#34; of ext \u0026#34;.md\u0026#34; INFO 2018/02/11 12:13:56 curpath: /home/yash/zeo/themes/zeo/archetypes/post.md ... ... /home/yash/zeo/content/post/second.md created\nSee the difference. Hugo used the theme\u0026rsquo;s archetype for generating the frontmatter this time.\nBy default, Hugo does not generate posts with an empty content section. So you will need to add some content before you try to build the site.\nLet\u0026rsquo;s look at the content/post/first.md file, after adding content to it. $ cat content/post/first.md --- title: \u0026#34;First\u0026#34; date: 2018-02-11T11:35:58+05:30 draft: true Tags: [\u0026#34;first\u0026#34;] Categories: [\u0026#34;Hugo\u0026#34;] --- Hi there. My first Hugo post\nNow that our posts are ready, we need to create templates to show them in a list on the home page and to show their content on separate pages for each post.\nWe will first edit the template for the home page that we created previously. We will then modify \u0026ldquo;single\u0026rdquo; templates which are used to generate output for a single content file. We also have \u0026ldquo;list\u0026rdquo; templates which are used to group similar type of content and render them as a list. The home page will show a list of last ten posts that we have created. Let\u0026rsquo;s update its template to add this logic.\nUpdate your home page to show your content Now add your template code to themes/zeo/layouts/index.html. $ vim themes/zeo/layouts/index.html $ cat !$ cat themes/zeo/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;\nHugo uses Go Template Engine. This engine scans the templates for commands that are enclosed between {{ and }}. In this template, the commands are range, first, .Data.Pages, .Title and end.\nThe template implies that we are going to get first 10 latest pages from our content folder and render their title as h1 heading.\nrange is an iterator function. Hugo treats every HTML file created as a page, so range will loop through all the pages created. Here we are instructing range to stop after first ten pages.\nThe end command signals the end of the range iterator. The engine loops back to the next iteration as soon as it encounters the end command. Everything between range and end will be evaluated for each iteration of the loop.\nBuild the website and see the changes. The homepage now shows our two posts. However, you cannot click on the posts and read their content. Let\u0026rsquo;s change that too.\nLinking your posts on Home Page Let\u0026rsquo;s add a link to the post\u0026rsquo;s page from home page. $ vim themes/zeo/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt; \u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt; \u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;\nBuild your site and see the result. The titles are now links, but when you click on them, it takes you to a page which says 404 page not found. That is expected because we have not created any template for the single pages where the content can be rendered. So Hugo could not find any template, and it did not output any HTML file. We will change that in a minute.\nWe want to render the posts, which are in content/post directory. That means that their section is post and their type is also post.\nHugo uses section and type information to identify the template file for each piece of content. It will first look for a template file which matches the section or type of the content. If it could not find it, then it will use _default/single.html file.\nSince we do not have any other content type yet, we will just start by updating the _default/single.html file.\nRemember that Hugo will use this file for every content type for which we have not created a template. However, for now, we will accept that cost as we do not have any other content type with us. We will refactor our templates to accommodate more content types, as we add more content.\nUpdate the template file. $ vim themes/zeo/layouts/_default/single.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;\nBuild the site and verify the results. You will see that on clicking on first, you get the usual result, but clicking on second still produces the 404 page not found error. It is because Hugo does not generate pages with empty content. Remember I mentioned it earlier.\nNow that we have our home page and posts page ready, we will build a page to list all the posts, not just the recent ten posts. This page will be accessible at http://localhost:1313/post. Currently, this page is blank because there is no template defined for it.\nThis page will show the listings of all the posts, so the type of this page will be a list. We will again use the default _default/list.html as we do not have any other content type with us.\nUpdate the list file.\n$ vim themes/zeo/layouts/_default/list.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range .Data.Pages }} \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Add \u0026ldquo;Date Published\u0026rdquo; to the posts It is a standard practice to add the date on which the post was published on the blog. The front matter of our posts has a variable named date. We will use that variable to fetch the date. Our posts are using the default single template, so we will edit that file.\n$ vim themes/zeo/layouts/_default/single.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Sun, Feb 11, 2018\u0026#34; }}\u0026lt;/h2\u0026gt; {{ .Content }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Adding top-level Pages Okay, so now that we have our homepage, post-list page and post content pages in place, we will add a new about page at the top level of our blog, not at a sublevel like we did for posts.\nHugo uses the directory structure of the content directory to identify the structure of the blog. Let\u0026rsquo;s verify that and create a new about page in the content directory.\n$ vim content/about.md --- title: \u0026#34;about\u0026#34; description: \u0026#34;about this blog\u0026#34; date: \u0026#34;2018-02-11\u0026#34; --- ### about me Hi there, you just reached my blog. Let\u0026rsquo;s generate the site and view the results.\n$ hugo --verbose $ ls -l public/ total 36 drwxr-xr-x 2 yash hogwarts 4096 Feb 11 12:43 about drwxr-xr-x 3 yash hogwarts 4096 Feb 11 12:43 categories drwxr-xr-x 2 yash hogwarts 4096 Feb 11 11:20 css -rw-r--r-- 1 yash hogwarts 187 Feb 11 12:43 index.html -rw-r--r-- 1 yash hogwarts 1183 Feb 11 12:43 index.xml drwxr-xr-x 2 yash hogwarts 4096 Feb 11 11:20 js drwxr-xr-x 4 yash hogwarts 4096 Feb 11 12:43 post -rw-r--r-- 1 yash hogwarts 1139 Feb 11 12:43 sitemap.xml drwxr-xr-x 3 yash hogwarts 4096 Feb 11 12:43 tags Notice that Hugo created a new directory about. This directory contains only one file index.html. The about page will be rendered from about/index.html.\nIf you look carefully, the about page is listed with the posts on the homepage. It is not desirable, so let\u0026rsquo;s change that first.\n$ vim themes/zeo/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026#34;post\u0026#34;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if eq .Type \u0026#34;page\u0026#34; }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Now build the site and verify the results. The homepage now has two sections, one for posts and other for the pages. Click on the about page. You will see the page for about. Remember, I mentioned that Hugo would use the single template for each page, for which it cannot find a template file. There is still one issue. The about page shows the date also. We do not want to show the date on the about page.\nThere are a couple of ways to fix this. We can add an if-else statement to detect the type of the content and display date only if it is a post. However, let\u0026rsquo;s use the feature provided by Hugo and create a new template type for the posts. Before we do that, let\u0026rsquo;s learn to use one more template type which is partials.\nPartials In Hugo, partials are used to store the shared piece of code which repeats in more than one templates. Partials are kept in themes/zeo/layouts/partials directory. Partials can be used to override the themes presentation. End users can use them to change the default behavior of a theme. It is always a good idea to use partials as much as possible.\nHeader and Footer partials Header and footer of most of the posts and pages will follow a similar pattern. So they form an excellent example to be defined as a partial. $ vim themes/zeo/layouts/partials/header.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; $ vim themes/zeo/layouts/partials/footer.html \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;\nWe can call a partial by including this path in the template {{ partial \u0026#34;header.html\u0026#34; . }}\nUpdate the Homepage template Let\u0026rsquo;s update our homepage template to use these partials. $ vim themes/zeo/layouts/index.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026#34;post\u0026#34;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if or (eq .Type \u0026#34;page\u0026#34;) (eq .Type \u0026#34;about\u0026#34;) }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} {{ partial \u0026#34;footer.html\u0026#34; . }}\nUpdate the single template $ vim themes/zeo/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Sun, Feb 11, 2018\u0026#34; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} Build the website and verify the results. The title on the posts and the about page should both reflect the value from the markdown file.\nFixing the date shown on About page Remember, we had the issue that the date was showing on the about page also. We discussed one method to solve this issue. Now I will discuss a more hugoic way of solving this issue.\nWe will create a new section template to fix this issue.\n$ mkdir themes/zeo/layouts/post $ vim themes/zeo/layouts/post/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} $ vim themes/zeo/layouts/_default/single.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Note that we have changed the default single template and added that logic in post\u0026rsquo;s single template.\nBuild the website and verify the results. The about page does not show the date now, but the posts page still show the date. We can also move the list template\u0026rsquo;s logic to the index.html file of post section template.\nConclusion We have learnt, how Hugo harnesses the powerful yet simple Go template engine to create the static site generator. We also learnt about partials and their excellent utilization by Hugo in the spirit of Don\u0026rsquo;t Repeat Yourself principle. Now that you know how to make themes in Hugo, go ahead and start creating new beautiful themes. Best of luck for your endaevour.\n"},"name":"Develop a Theme for Hugo","published":"2018-03-02T11:27:05+05:30","summary":"This article was originally published on zeolearn.\nIntroduction In this tutorial, I will show you how to create a basic Hugo theme. I assume that you are familiar with basic HTML, and how to write content in markdown. I will be explaining the working of Hugo and how it uses Go templating language and how you can use these templates to organize your content. As this post will be focusing mainly on Hugo\u0026rsquo;s working, I will not be covering CSS here.","type":"entry","url":"https://yashagarwal.in/posts/2018/03/develop-a-theme-for-hugo/"},{"content":{"html":"\u003cp\u003eI have been using Linux since I was in my second year of undergraduate. My experiments with the dotfiles (configuration files) also started at the same time. For the uninformed, in Linux, it is common to configure a lot of settings and configurations within dotfiles. Dotfiles are files in a Linux user\u0026rsquo;s home directory that begin with a dot or a full-stop character. This dot indicates to the operating system that these files are used to store the settings of programs like \u003ccode\u003evim\u003c/code\u003e or shells like \u003ccode\u003ebash\u003c/code\u003e or \u003ccode\u003efish\u003c/code\u003e to name a few.\u003c/p\u003e\n\u003cp\u003eIn the beginning, I was keeping a manual backup of my dotfiles by copying them to a folder from time to time. But the list soon started getting huge, that it became complicated for me to keep track of the changes. Then I moved to symlinks. I started symlinking all the dotfiles from my folder to their usual locations. This setup worked perfectly fine, but as my collection of dotfiles grew, It became very cumbersome for me to symlink every dotfile manually.\u003c/p\u003e\n\u003cp\u003eI also tried a few tools built for this particular purpose. Some of them are \u003ccode\u003evcsh\u003c/code\u003e, \u003ccode\u003emr\u003c/code\u003e, and \u003ccode\u003estow\u003c/code\u003e. These tools work just fine, but I was not willing to learn new tools just for maintaining my dotfiles. At last, I decided to write my tool to solve this problem. This way, there will not be any external dependency, and this tool will also become part of my dotfiles.\u003c/p\u003e\n\u003ch2 id=\"design\"\u003eDesign\u003c/h2\u003e\n\u003cp\u003eThe tool, in itself, is inspired by the \u003ca href=\"https://en.wikipedia.org/wiki/Configuration_file#UNIX/Linux\"\u003eUNIX tradition\u003c/a\u003e of keeping configuration files for the settings of the programs. This configuration system uses a JSON formatted dotfile.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/yashhere/ConMan\"\u003eHere\u003c/a\u003e is the source code for the configuration system. Let\u0026rsquo;s have a look at the file structure of the repository.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e|-- .backups\n|   |-- 08-01-2018-15:47\n|   |-- 08-01-2018-19:30\n|   |-- ......\n|-- configure.py\n|-- current_status\n|-- dotfiles\n|   |-- dunst\n|   |-- gtk-3.0\n|   |-- i3\n|   |-- ......\n|-- dotfiles.json\n|-- LICENSE\n`-- README.md\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eDuring the initial setup, you need to edit the \u003ccode\u003edotfiles.json\u003c/code\u003e file to suit your setup. A relevant section of the JSON file is given below.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;pre\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;cloning repository\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;command\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;git\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;subcommand\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;clone\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;argument\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://github.com/yashhere/dotfiles.git\u0026#34;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;linking\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;bashrc\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;src\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;dotfiles/.bashrc\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;dest\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;.bashrc\u0026#34;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;bash_profile\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;src\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;dotfiles/.bash_profile\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;dest\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;.bash_profile\u0026#34;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;profile\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;src\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;dotfiles/.profile\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;dest\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;.profile\u0026#34;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;i3\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;src\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;dotfiles/i3\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;dest\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;.config/i3\u0026#34;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eAs can be seen, the JSON file has an array variable \u003ccode\u003elinking\u003c/code\u003e, which can be used to set the paths for each configuration file and folder. The \u003ccode\u003econfigure.py\u003c/code\u003e script also requires a \u003ccode\u003edotfiles\u003c/code\u003e folder to be present in the current directory. The folder can be created manually, or if it is already version controlled on GitHub, then the script can clone it. For that, you can edit the \u003ccode\u003epre\u003c/code\u003e section in the \u003ccode\u003edotfiles.json\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eYour dotfiles and config folders go inside the \u003ccode\u003edotfiles\u003c/code\u003e folder. You need to copy all your current configurations to this folder to get started.\u003c/p\u003e\n\u003cp\u003eSo, how does the script know where a file or folder will be linked? Simple, you need to edit the \u003ccode\u003edotfiles.json\u003c/code\u003e file and add source and destination locations. For example, if you want to set up configurations of \u003ccode\u003ei3\u003c/code\u003e to its original location (which is, \u003ccode\u003e$HOME/.config/i3\u003c/code\u003e), then you need to create a new JSON object in the \u003ccode\u003elinking\u003c/code\u003e array, like this.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;i3\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;src\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;dotfiles/i3\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;dest\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;.config/i3\u0026#34;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eHere the \u003ccode\u003ename\u003c/code\u003e is used to identify the configuration file, the \u003ccode\u003esrc\u003c/code\u003e parameter is the location of your config file/folder in the dotfiles directory, and the \u003ccode\u003edest\u003c/code\u003e parameter is the final destination of the file/folder. Keen observers would notice that I have not used \u003ccode\u003e$HOME\u003c/code\u003e anywhere. It is understood that the configuration will go to the current user\u0026rsquo;s home directory. So the \u003ccode\u003edest\u003c/code\u003e is relative to the user\u0026rsquo;s home directory, and \u003ccode\u003esrc\u003c/code\u003e is relative to the directory from which the \u003ccode\u003econfigure.py\u003c/code\u003e script is executed.\u003c/p\u003e\n\u003cp\u003eAnd you are done! Now, run \u003ccode\u003econfigure.py\u003c/code\u003e, and all your dotfiles and folders will be symlinked to their correct place.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003ecurrent_status\u003c/code\u003e file saves all the symlink locations that are being managed by the script, for your easy reference and to debug any error.\u003c/p\u003e\n\u003ch2 id=\"behind-the-scenes\"\u003eBehind the Scenes\u003c/h2\u003e\n\u003cp\u003eA lot to cool things happen behind the scenes. The script will check if any previous symlink exists at the given \u003ccode\u003edest\u003c/code\u003e location. It removes any symlinks to avoid redundancy. If the dest already has any dotfile or folder, then it backs it up in the \u003ccode\u003e.backups\u003c/code\u003e under today\u0026rsquo;s date and time before replacing it with a symlink to avoid any potential data loss.\u003c/p\u003e\n\u003cp\u003eI hope the article was useful. Cheers 😄\u003c/p\u003e\n","text":"I have been using Linux since I was in my second year of undergraduate. My experiments with the dotfiles (configuration files) also started at the same time. For the uninformed, in Linux, it is common to configure a lot of settings and configurations within dotfiles. Dotfiles are files in a Linux user\u0026rsquo;s home directory that begin with a dot or a full-stop character. This dot indicates to the operating system that these files are used to store the settings of programs like vim or shells like bash or fish to name a few.\nIn the beginning, I was keeping a manual backup of my dotfiles by copying them to a folder from time to time. But the list soon started getting huge, that it became complicated for me to keep track of the changes. Then I moved to symlinks. I started symlinking all the dotfiles from my folder to their usual locations. This setup worked perfectly fine, but as my collection of dotfiles grew, It became very cumbersome for me to symlink every dotfile manually.\nI also tried a few tools built for this particular purpose. Some of them are vcsh, mr, and stow. These tools work just fine, but I was not willing to learn new tools just for maintaining my dotfiles. At last, I decided to write my tool to solve this problem. This way, there will not be any external dependency, and this tool will also become part of my dotfiles.\nDesign The tool, in itself, is inspired by the UNIX tradition of keeping configuration files for the settings of the programs. This configuration system uses a JSON formatted dotfile.\nHere is the source code for the configuration system. Let\u0026rsquo;s have a look at the file structure of the repository. |-- .backups | |-- 08-01-2018-15:47 | |-- 08-01-2018-19:30 | |-- ...... |-- configure.py |-- current_status |-- dotfiles | |-- dunst | |-- gtk-3.0 | |-- i3 | |-- ...... |-- dotfiles.json |-- LICENSE `-- README.md\nDuring the initial setup, you need to edit the dotfiles.json file to suit your setup. A relevant section of the JSON file is given below. { \u0026#34;pre\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;cloning repository\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;git\u0026#34;, \u0026#34;subcommand\u0026#34;: \u0026#34;clone\u0026#34;, \u0026#34;argument\u0026#34;: \u0026#34;https://github.com/yashhere/dotfiles.git\u0026#34; } ], \u0026#34;linking\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;bashrc\u0026#34;, \u0026#34;src\u0026#34;: \u0026#34;dotfiles/.bashrc\u0026#34;, \u0026#34;dest\u0026#34;: \u0026#34;.bashrc\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;bash_profile\u0026#34;, \u0026#34;src\u0026#34;: \u0026#34;dotfiles/.bash_profile\u0026#34;, \u0026#34;dest\u0026#34;: \u0026#34;.bash_profile\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;profile\u0026#34;, \u0026#34;src\u0026#34;: \u0026#34;dotfiles/.profile\u0026#34;, \u0026#34;dest\u0026#34;: \u0026#34;.profile\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;i3\u0026#34;, \u0026#34;src\u0026#34;: \u0026#34;dotfiles/i3\u0026#34;, \u0026#34;dest\u0026#34;: \u0026#34;.config/i3\u0026#34; }, ] }\nAs can be seen, the JSON file has an array variable linking, which can be used to set the paths for each configuration file and folder. The configure.py script also requires a dotfiles folder to be present in the current directory. The folder can be created manually, or if it is already version controlled on GitHub, then the script can clone it. For that, you can edit the pre section in the dotfiles.json.\nYour dotfiles and config folders go inside the dotfiles folder. You need to copy all your current configurations to this folder to get started.\nSo, how does the script know where a file or folder will be linked? Simple, you need to edit the dotfiles.json file and add source and destination locations. For example, if you want to set up configurations of i3 to its original location (which is, $HOME/.config/i3), then you need to create a new JSON object in the linking array, like this. { \u0026#34;name\u0026#34;: \u0026#34;i3\u0026#34;, \u0026#34;src\u0026#34;: \u0026#34;dotfiles/i3\u0026#34;, \u0026#34;dest\u0026#34;: \u0026#34;.config/i3\u0026#34; }\nHere the name is used to identify the configuration file, the src parameter is the location of your config file/folder in the dotfiles directory, and the dest parameter is the final destination of the file/folder. Keen observers would notice that I have not used $HOME anywhere. It is understood that the configuration will go to the current user\u0026rsquo;s home directory. So the dest is relative to the user\u0026rsquo;s home directory, and src is relative to the directory from which the configure.py script is executed.\nAnd you are done! Now, run configure.py, and all your dotfiles and folders will be symlinked to their correct place.\nThe current_status file saves all the symlink locations that are being managed by the script, for your easy reference and to debug any error.\nBehind the Scenes A lot to cool things happen behind the scenes. The script will check if any previous symlink exists at the given dest location. It removes any symlinks to avoid redundancy. If the dest already has any dotfile or folder, then it backs it up in the .backups under today\u0026rsquo;s date and time before replacing it with a symlink to avoid any potential data loss.\nI hope the article was useful. Cheers 😄\n"},"name":"My Own Configuration Manager","published":"2018-01-21T11:23:23+05:30","summary":"I have been using Linux since I was in my second year of undergraduate. My experiments with the dotfiles (configuration files) also started at the same time. For the uninformed, in Linux, it is common to configure a lot of settings and configurations within dotfiles. Dotfiles are files in a Linux user\u0026rsquo;s home directory that begin with a dot or a full-stop character. This dot indicates to the operating system that these files are used to store the settings of programs like vim or shells like bash or fish to name a few.","type":"entry","url":"https://yashagarwal.in/posts/2018/01/my-own-configuration-manager/"},{"content":{"html":"\u003cp\u003eRecently, I got a chance to set up ALM Octane on one of my university servers for a course project. From the support page of ALM Octane:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eALM Octane is a web-based application lifecycle management platform that enables teams to collaborate easily, manage the product delivery pipeline, and visualize the impact of changes.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"precursor\"\u003ePrecursor\u003c/h2\u003e\n\u003cp\u003eMy \u003ca href=\"http://cse.nitc.ac.in\"\u003edepartment\u003c/a\u003e insists on using open-source software (a plus point, indeed!). But ALM Octane has Oracle DB/MSSQL as a dependency. My professor was not very enthusiastic about installing a proprietary database on the server. So I came up with a different approach. I set up this database (\u003ca href=\"http://www.oracle.com/technetwork/database/database-technologies/express-edition/overview/index.html\"\u003efree version\u003c/a\u003e of Oracle DB, the Oracle Database 11g Express Edition) in a Docker container. ALM Octane has three components \u0026ndash; Oracle DB, Elastic Search, and the Octane Server itself. The problem was to handle the condition that these three components should be installed on different machines. I decided to use three separate Docker containers for this isolation and then configured them to communicate with each other with docker-compose.\u003c/p\u003e\n\u003ch3 id=\"wait--docker-compose\"\u003eWait \u0026hellip; Docker Compose?\u003c/h3\u003e\n\u003cp\u003e(Skip this if already know about Docker and Compose)\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eDocker-compose is a tool to define and run multi-container Docker applications. Compose uses a compose file to configure the services used by the applications. Then all the services and the application can be run by using a single command.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eSo before reading this article any further, if you do not know about docker-compose, go and read about it.\u003c/p\u003e\n\u003ch2 id=\"the-problem\"\u003eThe Problem\u003c/h2\u003e\n\u003cp\u003eThree primary services are required for the proper functioning of the Octane Server \u0026ndash; Octane, Oracle DB and Elastic Search. The difficulty was to set up adequate configuration options for these services and the appropriate setup for communication between them. I searched on Docker Hub for any pre-built images. Fortunately, I found some pre-built Docker images for my purpose. So I started writing my config file.\u003c/p\u003e\n\u003ch2 id=\"the-solution\"\u003eThe Solution\u003c/h2\u003e\n\u003cp\u003eHere is my config file for easy reference.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan class=\"k\"\u003eversion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;2\u0026#39;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eservices\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"k\"\u003eoctane_oracle\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003eimage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003ealexeiled/docker-oracle-xe-11g\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003eshm_size\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e2g\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003emem_limit\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e4g\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"k\"\u003eoctane_es\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003eimage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003eelasticsearch\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"m\"\u003e2.4\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003eenvironment\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e- ES_HEAP_SIZE=4G\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003emem_limit\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e4g\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"k\"\u003eoctane\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003eimage\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003ehpsoftware/almoctane\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003eports\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e- \u003cspan class=\"s2\"\u003e\u0026#34;8080:8080\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003evolumes\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e- /opt/octane/conf\u003cspan class=\"p\"\u003e:\u003c/span\u003e/opt/octane/conf\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e- /opt/octane/log\u003cspan class=\"p\"\u003e:\u003c/span\u003e/opt/octane/log\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e- /opt/octane/repo\u003cspan class=\"p\"\u003e:\u003c/span\u003e/opt/octane/repo\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003elinks\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e- octane_oracle\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e- octane_es\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003emem_limit\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e4g\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"k\"\u003eenv_file\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e- ./octane.env\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eThe configuration options in the code are for a system with RAM of 8GB. The options must be tuned for the best performance before deploying on the production server.\u003c/p\u003e\n\u003cp\u003eIn the code, I have exposed port \u003ccode\u003e8080\u003c/code\u003e of the Octane Docker container to the port 8080 of the host machine. It will make sure that we can access the Octane application on \u003ccode\u003elocalhost:8080\u003c/code\u003e. The \u003ccode\u003eoctane.env\u003c/code\u003e file contains three variables for easy site management.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003eSERVER_DOMAIN=\u003cspan class=\"s2\"\u003e\u0026#34;your domain name\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003eADMIN_PASSWORD=\u003cspan class=\"s2\"\u003e\u0026#34;your password\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"c\"\u003e#This disables the minimum memory check to enable to run on smaller machines.\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003eDISABLE_VALIDATOR_MEMORY=\u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow, if you try to run the container with \u003ccode\u003edocker-compose up\u003c/code\u003e, you will encounter various validation errors. It is because, before starting the server, you need to adjust some settings. If you noticed in the config file, there is a section to define volumes. These volumes are persistent and are used to keep changes saved between two docker-compose runs. I have mapped three volumes from the Docker container to the host machine. So you can now edit the files in the \u003ccode\u003e/opt/octane/\u003c/code\u003e folder on the host machine, and changes will reflect in the Docker container. The file where you will have to make changes is \u003ccode\u003e/opt/octane/conf/setup.xml\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eYou can read the documentation of ALM Octane to find out which settings to be changed. Once you do the necessary changes, fire up the command \u003ccode\u003edocker-compose up\u003c/code\u003e and wait for some time. Docker Compose will finish processing, and the server can be accessed on \u003ca href=\"http://localhost:8080\"\u003ehttp://localhost:8080\u003c/a\u003e on the host machine. While deploying it on the production server, make sure that your network administrator has opened the port 8080 for your server. Otherwise, the site will not be accessible. Also, the docker-compose can be run in the background by issuing command \u003ccode\u003edocker-compose up -d\u003c/code\u003e.\u003c/p\u003e\n","text":"Recently, I got a chance to set up ALM Octane on one of my university servers for a course project. From the support page of ALM Octane:\n ALM Octane is a web-based application lifecycle management platform that enables teams to collaborate easily, manage the product delivery pipeline, and visualize the impact of changes.\n Precursor My department insists on using open-source software (a plus point, indeed!). But ALM Octane has Oracle DB/MSSQL as a dependency. My professor was not very enthusiastic about installing a proprietary database on the server. So I came up with a different approach. I set up this database (free version of Oracle DB, the Oracle Database 11g Express Edition) in a Docker container. ALM Octane has three components \u0026ndash; Oracle DB, Elastic Search, and the Octane Server itself. The problem was to handle the condition that these three components should be installed on different machines. I decided to use three separate Docker containers for this isolation and then configured them to communicate with each other with docker-compose.\nWait \u0026hellip; Docker Compose? (Skip this if already know about Docker and Compose)\n Docker-compose is a tool to define and run multi-container Docker applications. Compose uses a compose file to configure the services used by the applications. Then all the services and the application can be run by using a single command.\n So before reading this article any further, if you do not know about docker-compose, go and read about it.\nThe Problem Three primary services are required for the proper functioning of the Octane Server \u0026ndash; Octane, Oracle DB and Elastic Search. The difficulty was to set up adequate configuration options for these services and the appropriate setup for communication between them. I searched on Docker Hub for any pre-built images. Fortunately, I found some pre-built Docker images for my purpose. So I started writing my config file.\nThe Solution Here is my config file for easy reference. version:\u0026#39;2\u0026#39;services:octane_oracle:image:alexeiled/docker-oracle-xe-11gshm_size:2gmem_limit:4goctane_es:image:elasticsearch:2.4environment:- ES_HEAP_SIZE=4Gmem_limit:4goctane:image:hpsoftware/almoctaneports:- \u0026#34;8080:8080\u0026#34;volumes:- /opt/octane/conf:/opt/octane/conf- /opt/octane/log:/opt/octane/log- /opt/octane/repo:/opt/octane/repolinks:- octane_oracle- octane_esmem_limit:4genv_file:- ./octane.env\nThe configuration options in the code are for a system with RAM of 8GB. The options must be tuned for the best performance before deploying on the production server.\nIn the code, I have exposed port 8080 of the Octane Docker container to the port 8080 of the host machine. It will make sure that we can access the Octane application on localhost:8080. The octane.env file contains three variables for easy site management.\nSERVER_DOMAIN=\u0026#34;your domain name\u0026#34;ADMIN_PASSWORD=\u0026#34;your password\u0026#34;#This disables the minimum memory check to enable to run on smaller machines.DISABLE_VALIDATOR_MEMORY=true Now, if you try to run the container with docker-compose up, you will encounter various validation errors. It is because, before starting the server, you need to adjust some settings. If you noticed in the config file, there is a section to define volumes. These volumes are persistent and are used to keep changes saved between two docker-compose runs. I have mapped three volumes from the Docker container to the host machine. So you can now edit the files in the /opt/octane/ folder on the host machine, and changes will reflect in the Docker container. The file where you will have to make changes is /opt/octane/conf/setup.xml.\nYou can read the documentation of ALM Octane to find out which settings to be changed. Once you do the necessary changes, fire up the command docker-compose up and wait for some time. Docker Compose will finish processing, and the server can be accessed on http://localhost:8080 on the host machine. While deploying it on the production server, make sure that your network administrator has opened the port 8080 for your server. Otherwise, the site will not be accessible. Also, the docker-compose can be run in the background by issuing command docker-compose up -d.\n"},"name":"Setting up ALM Octane with Docker Compose","published":"2017-12-26T20:53:35+05:30","summary":"Recently, I got a chance to set up ALM Octane on one of my university servers for a course project. From the support page of ALM Octane:\n ALM Octane is a web-based application lifecycle management platform that enables teams to collaborate easily, manage the product delivery pipeline, and visualize the impact of changes.\n Precursor My department insists on using open-source software (a plus point, indeed!). But ALM Octane has Oracle DB/MSSQL as a dependency.","type":"entry","url":"https://yashagarwal.in/posts/2017/12/setting-up-alm-octane-with-docker-compose/"},{"content":{"html":"\n\n\n\n    \n\n    \n    \n\n    \n    \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe.min.css\" integrity=\"sha256-sCl5PUOGMLfFYctzDW3MtRib0ctyUvI9Qsmq2wXOeBY=\" crossorigin=\"anonymous\" /\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/default-skin/default-skin.min.css\" integrity=\"sha256-BFeI1V+Vh1Rk37wswuOYn5lsTcaU96hGaI7OUVCLjPc=\" crossorigin=\"anonymous\" /\u003e\n\n    \n    \u003clink rel=\"stylesheet\" href=\"/css/photoswipe.min.d780348a887d97b4d6cc664301a2941706e4a02aeb1533524fcce3b7b9b64b4f.css\"\u003e\n\n    \n\n    \n    \u003cdiv class=\"pswp\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\"\u003e\n        \n        \u003cdiv class=\"pswp__bg\"\u003e\u003c/div\u003e\n        \n        \u003cdiv class=\"pswp__scroll-wrap\"\u003e\n            \n            \u003cdiv class=\"pswp__container\"\u003e\n                \u003cdiv class=\"pswp__item\"\u003e\u003c/div\u003e\n                \u003cdiv class=\"pswp__item\"\u003e\u003c/div\u003e\n                \u003cdiv class=\"pswp__item\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n            \n            \u003cdiv class=\"pswp__ui pswp__ui--hidden\"\u003e\n                \u003cdiv class=\"pswp__top-bar\"\u003e\n                    \n                    \u003cdiv class=\"pswp__counter\"\u003e\u003c/div\u003e\n                    \u003cbutton class=\"pswp__button pswp__button--close\" title=\"Close (Esc)\"\u003e\u003c/button\u003e\n                    \u003cbutton class=\"pswp__button pswp__button--share\" title=\"Share\"\u003e\u003c/button\u003e\n                    \u003cbutton class=\"pswp__button pswp__button--fs\" title=\"Toggle fullscreen\"\u003e\u003c/button\u003e\n                    \u003cbutton class=\"pswp__button pswp__button--zoom\" title=\"Zoom in/out\"\u003e\u003c/button\u003e\n                    \n                    \n                    \u003cdiv class=\"pswp__preloader\"\u003e\n                        \u003cdiv class=\"pswp__preloader__icn\"\u003e\n                            \u003cdiv class=\"pswp__preloader__cut\"\u003e\n                                \u003cdiv class=\"pswp__preloader__donut\"\u003e\u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"pswp__share-modal pswp__share-modal--hidden pswp__single-tap\"\u003e\n                    \u003cdiv class=\"pswp__share-tooltip\"\u003e\u003c/div\u003e\n                \u003c/div\u003e\n                \u003cbutton class=\"pswp__button pswp__button--arrow--left\" title=\"Previous (arrow left)\"\u003e\n                \u003c/button\u003e\n                \u003cbutton class=\"pswp__button pswp__button--arrow--right\" title=\"Next (arrow right)\"\u003e\n                \u003c/button\u003e\n                \u003cdiv class=\"pswp__caption\"\u003e\n                    \u003cdiv class=\"pswp__caption__center\"\u003e\u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n\u003cp\u003eRecently, I again migrated my blog from Pelican to Hugo. So till now, I have experimented with Wordpress, Jekyll, Pelican, and Hugo. Without any doubt, Hugo is the simplest to set up. This time, I have setup Hugo in Windows, as I think, in my system, I reinstall Windows OS much less frequently than the Linux. So that way, it will be less painful for me to set up the blog again.\u003c/p\u003e\n\u003cp\u003eIn this post, I will list all the process which I used to set up automatic deployment of Hugo generated site to Github pages using Wercker. In the beginning, I was trying to use Travis-CI, but then I read about Wercker somewhere. I was impressed with the integration of Wercker with Hugo and the availability of many its community-generated “steps” for the build and deploy process.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://gohugo.io/overview/introduction/\"\u003eHugo Docs\u003c/a\u003e already have a fantastic \u003ca href=\"https://gohugo.io/tutorials/automated-deployments/\"\u003edocumentation\u003c/a\u003e for setting up Hugo with Wercker, but it is outdated. Other documentations available on-line is also obsolete. Wercker has changed many functionalities in its platform, which made it difficult for me to set up things correctly. But after hours of trial and error cycle, I was able to build and deploy my static files successfully.\u003c/p\u003e\n\u003cp\u003eHere I would like to share the issues I encountered and the tweaks I’ve made. The source codes of this site can be found \u003ca href=\"https://github.com/yash2696/yash2696.github.io\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"project-pages-or-user-pages\"\u003eProject Pages or User Pages\u003c/h2\u003e\n\u003cp\u003eTwo types of sites are supported on Github Pages, User Site, and Project Site. User Sites will serve the files stored in the master branch of the repository \u003ccode\u003ehttps://github.com/user_name/user_name.github.io\u003c/code\u003e at the address \u003ccode\u003ehttps://user_name.github.io.\u003c/code\u003e For the Project sites, everything under the gh-pages will be served at the address \u003ccode\u003ehttps://repo_name.github.io\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eMy site is a User site, so I wanted all the static files to be saved in the master branch. As Hugo generates all the static files under \u003ccode\u003epublic\u003c/code\u003e directory, I needed another branch to store my source files. So my made a new branch \u003ccode\u003esource\u003c/code\u003e, which will save all the source files for my blog. Don’t forget to remove the \u003ccode\u003e.git\u003c/code\u003e folder from the theme folder. Otherwise, the build will fail at a later stage. You can try using the git submodule feature to avoid this issue. I created a repository \u003ccode\u003eyash2696.github.io\u003c/code\u003e in Github also.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003egit init                       \u003cspan class=\"c1\"\u003e#initialized git repository in site root\u003c/span\u003e\r\ngit checkout -b \u003cspan class=\"nb\"\u003esource\u003c/span\u003e         \u003cspan class=\"c1\"\u003e#created new branch source\u003c/span\u003e\r\ngit remote add origin https://github.com/yash2696/yash2696.github.io\r\ngit add .\r\ngit commit -m \u003cspan class=\"s2\"\u003e\u0026#34;Initial Commit\u0026#34;\u003c/span\u003e\r\ngit push origin source\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThen I initialized my master branch as a orphan branch.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003egit checkout --orphan master\r\ngit rm -rf .\r\nrm -f \u003cspan class=\"s1\"\u003e\u0026#39;.gitignore\u0026#39;\u003c/span\u003e\r\n\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;#Your repository name\u0026#34;\u003c/span\u003e \u0026gt; README.md\r\ngit add README.md\r\ngit commit -a -m \u003cspan class=\"s2\"\u003e\u0026#34;Initial Commit\u0026#34;\u003c/span\u003e\r\ngit push origin master\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003ch2 id=\"automatic-deployment-using-wrecker\"\u003eAutomatic deployment using Wrecker\u003c/h2\u003e\n\u003cp\u003eIt is straightforward to build a Hugo site. Invoke \u003ccode\u003ehugo\u003c/code\u003e command under your root directory, Hugo will create a public folder which will contain all your content, static files, etc. Then push this directory to Github, and voila, your site is up!\u003c/p\u003e\n\u003cp\u003eWhat if a single push to \u003ccode\u003esource\u003c/code\u003e branch can trigger all the process for you automatically. Here the magic of continuous integration(CI) comes into the picture. A free Wercker account can be easily created and hooked to the Github account and a new application from a chosen repository. After setting up everything, a push to the development branch will automatically trigger the Wercker. One of the most significant advantages of using Wercker is its extensive collection of user-made and well documented \u0026ldquo;steps\u0026rdquo;. In this post, I will use two steps, \u003ccode\u003ebuild hugo\u003c/code\u003e and \u003ccode\u003edeploy to Github\u003c/code\u003e.\u003c/p\u003e\n\n\n\n    \u003clink rel=\"stylesheet\" href=\"/css/hugo-easy-gallery.css\"\u003e\n    \n\n\n\u003cdiv class=\"box fancy-figure caption-position-bottom caption-effect-appear\"  itemscope itemtype=\"http://schema.org/ImageGallery\"\u003e\n    \u003cfigure  itemprop=\"associatedMedia\" itemscope itemtype=\"http://schema.org/ImageObject\"\u003e\n        \u003cdiv class=\"img\"\u003e\n            \u003cimg itemprop=\"thumbnail\" src=\"/images/posts/2017-02-22/wercker-steps.png\" alt=\"Wercker → Registry → steps\"/\u003e\n        \u003c/div\u003e\n        \u003ca href=\"/images/posts/2017-02-22/wercker-steps.png\" itemprop=\"contentUrl\"\u003e\u003c/a\u003e\n            \u003cfigcaption\u003e\n                    \u003cp\u003eWercker → Registry → steps\u003c/p\u003e\n            \u003c/figcaption\u003e\n    \u003c/figure\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThe first task is to create a \u003ccode\u003ewercker.yml\u003c/code\u003e file. It will tell Wercker which all actions, it should perform. Here is my \u003ca href=\"https://raw.githubusercontent.com/yash2696/yash2696.github.io/source/wercker.yml\"\u003ewercker.yml\u003c/a\u003e for reference. In this, I have used two pipelines, \u003cem\u003ebuild\u003c/em\u003e and \u003cem\u003edeploy\u003c/em\u003e. Please follow the official docs for the more detailed steps. I will list all the problems which I face while setting up things properly.\u003c/p\u003e\n\u003ch3 id=\"build\"\u003eBuild\u003c/h3\u003e\n\u003cp\u003eFollowing the official guide, I used this \u003ca href=\"https://github.com/ArjenSchwarz/wercker-step-hugo-build\"\u003estep\u003c/a\u003e to trigger Hugo to build HTML pages. I had already removed git repository information from the theme folder, so this step finished successfully. If you haven’t, you may add the following piece of code in your build step.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e- script:\r\n    name: install git\r\n    code: \u003cspan class=\"p\"\u003e|\u003c/span\u003e\r\n        apt-get update\r\n        apt-get install git -y\r\n    - script:\r\n        name: initialize git submodules\r\n        code: \u003cspan class=\"p\"\u003e|\u003c/span\u003e\r\n            git submodule update --init --recursive\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003ch3 id=\"deploy\"\u003eDeploy\u003c/h3\u003e\n\u003cp\u003eThere is no concept named \u0026ldquo;Add Deploy Target\u0026rdquo; in Wercker as of now. Most of the on-line tutorials follow this process which is outdated. Now Wercker uses a concept called \u0026ldquo;Workflows in Pipelines\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eFor new interface, even if you add a deploy stage in the \u003ccode\u003ewercker.yml\u003c/code\u003e, you will have to create a new pipeline \u003ccode\u003edeploy\u003c/code\u003e under the Workflows tab. After creating the pipeline, the \u0026ldquo;YML Pipeline name\u0026rdquo; must be set to the deploy stage name, which in this case is \u003ccode\u003edeploy\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIn \u003ccode\u003edeploy\u003c/code\u003e stage, I used this \u003ca href=\"https://app.wercker.com/applications/55af22c5f32b86a9290ec706/tab/details/\"\u003estep\u003c/a\u003e to deploy the built site to Github. Each pipeline starts from scratch, so for the deploy pipeline, the git package needs to be installed again. One also has to set up the environment variable \u003ccode\u003e$GIT_TOKEN\u003c/code\u003e to each pipeline, acquired from Github setting.\u003c/p\u003e\n\n\n\n\u003cdiv class=\"box fancy-figure caption-position-bottom caption-effect-appear\"  itemscope itemtype=\"http://schema.org/ImageGallery\"\u003e\n    \u003cfigure  itemprop=\"associatedMedia\" itemscope itemtype=\"http://schema.org/ImageObject\"\u003e\n        \u003cdiv class=\"img\"\u003e\n            \u003cimg itemprop=\"thumbnail\" src=\"/images/posts/2017-02-22/wercker-pipeline.png\" alt=\"Wercker Pipeline\"/\u003e\n        \u003c/div\u003e\n        \u003ca href=\"/images/posts/2017-02-22/wercker-pipeline.png\" itemprop=\"contentUrl\"\u003e\u003c/a\u003e\n            \u003cfigcaption\u003e\n                    \u003cp\u003eWercker Pipeline\u003c/p\u003e\n            \u003c/figcaption\u003e\n    \u003c/figure\u003e\n\u003c/div\u003e\n\n\u003cp\u003eYou need to generate a new access token for your deploy stage from Github settings.\n\n\n\n\u003cdiv class=\"box fancy-figure caption-position-bottom caption-effect-appear\"  itemscope itemtype=\"http://schema.org/ImageGallery\"\u003e\n    \u003cfigure  itemprop=\"associatedMedia\" itemscope itemtype=\"http://schema.org/ImageObject\"\u003e\n        \u003cdiv class=\"img\"\u003e\n            \u003cimg itemprop=\"thumbnail\" src=\"/images/posts/2017-02-22/wercker-access-token.png\" alt=\"Github Access Token\"/\u003e\n        \u003c/div\u003e\n        \u003ca href=\"/images/posts/2017-02-22/wercker-access-token.png\" itemprop=\"contentUrl\"\u003e\u003c/a\u003e\n            \u003cfigcaption\u003e\n                    \u003cp\u003eGithub Access Token\u003c/p\u003e\n            \u003c/figcaption\u003e\n    \u003c/figure\u003e\n\u003c/div\u003e\n\u003c/p\u003e\n\u003cp\u003eAfter adding the deploy stage, add the token you obtained from the Github to Environmental Variables in deploy pipeline.\u003c/p\u003e\n\n\n\n\u003cdiv class=\"box fancy-figure caption-position-bottom caption-effect-appear\"  itemscope itemtype=\"http://schema.org/ImageGallery\"\u003e\n    \u003cfigure  itemprop=\"associatedMedia\" itemscope itemtype=\"http://schema.org/ImageObject\"\u003e\n        \u003cdiv class=\"img\"\u003e\n            \u003cimg itemprop=\"thumbnail\" src=\"/images/posts/2017-02-22/wercker-token.png\" alt=\"Wercker Token\"/\u003e\n        \u003c/div\u003e\n        \u003ca href=\"/images/posts/2017-02-22/wercker-token.png\" itemprop=\"contentUrl\"\u003e\u003c/a\u003e\n            \u003cfigcaption\u003e\n                    \u003cp\u003eWercker Token\u003c/p\u003e\n            \u003c/figcaption\u003e\n    \u003c/figure\u003e\n\u003c/div\u003e\n\n\u003cp\u003eOn the next push to your development branch, Wercker will automatically build the site and deploy it on Github Pages.\u003c/p\u003e\n","text":"                         Recently, I again migrated my blog from Pelican to Hugo. So till now, I have experimented with Wordpress, Jekyll, Pelican, and Hugo. Without any doubt, Hugo is the simplest to set up. This time, I have setup Hugo in Windows, as I think, in my system, I reinstall Windows OS much less frequently than the Linux. So that way, it will be less painful for me to set up the blog again.\nIn this post, I will list all the process which I used to set up automatic deployment of Hugo generated site to Github pages using Wercker. In the beginning, I was trying to use Travis-CI, but then I read about Wercker somewhere. I was impressed with the integration of Wercker with Hugo and the availability of many its community-generated “steps” for the build and deploy process.\nHugo Docs already have a fantastic documentation for setting up Hugo with Wercker, but it is outdated. Other documentations available on-line is also obsolete. Wercker has changed many functionalities in its platform, which made it difficult for me to set up things correctly. But after hours of trial and error cycle, I was able to build and deploy my static files successfully.\nHere I would like to share the issues I encountered and the tweaks I’ve made. The source codes of this site can be found here.\nProject Pages or User Pages Two types of sites are supported on Github Pages, User Site, and Project Site. User Sites will serve the files stored in the master branch of the repository https://github.com/user_name/user_name.github.io at the address https://user_name.github.io. For the Project sites, everything under the gh-pages will be served at the address https://repo_name.github.io.\nMy site is a User site, so I wanted all the static files to be saved in the master branch. As Hugo generates all the static files under public directory, I needed another branch to store my source files. So my made a new branch source, which will save all the source files for my blog. Don’t forget to remove the .git folder from the theme folder. Otherwise, the build will fail at a later stage. You can try using the git submodule feature to avoid this issue. I created a repository yash2696.github.io in Github also.\ngit init #initialized git repository in site root\rgit checkout -b source #created new branch source\rgit remote add origin https://github.com/yash2696/yash2696.github.io\rgit add .\rgit commit -m \u0026#34;Initial Commit\u0026#34;\rgit push origin source Then I initialized my master branch as a orphan branch. git checkout --orphan master\rgit rm -rf .\rrm -f \u0026#39;.gitignore\u0026#39;\recho \u0026#34;#Your repository name\u0026#34; \u0026gt; README.md\rgit add README.md\rgit commit -a -m \u0026#34;Initial Commit\u0026#34;\rgit push origin master\nAutomatic deployment using Wrecker It is straightforward to build a Hugo site. Invoke hugo command under your root directory, Hugo will create a public folder which will contain all your content, static files, etc. Then push this directory to Github, and voila, your site is up!\nWhat if a single push to source branch can trigger all the process for you automatically. Here the magic of continuous integration(CI) comes into the picture. A free Wercker account can be easily created and hooked to the Github account and a new application from a chosen repository. After setting up everything, a push to the development branch will automatically trigger the Wercker. One of the most significant advantages of using Wercker is its extensive collection of user-made and well documented \u0026ldquo;steps\u0026rdquo;. In this post, I will use two steps, build hugo and deploy to Github.\n   Wercker → Registry → steps\n   The first task is to create a wercker.yml file. It will tell Wercker which all actions, it should perform. Here is my wercker.yml for reference. In this, I have used two pipelines, build and deploy. Please follow the official docs for the more detailed steps. I will list all the problems which I face while setting up things properly.\nBuild Following the official guide, I used this step to trigger Hugo to build HTML pages. I had already removed git repository information from the theme folder, so this step finished successfully. If you haven’t, you may add the following piece of code in your build step. - script:\rname: install git\rcode: |\rapt-get update\rapt-get install git -y\r- script:\rname: initialize git submodules\rcode: |\rgit submodule update --init --recursive\nDeploy There is no concept named \u0026ldquo;Add Deploy Target\u0026rdquo; in Wercker as of now. Most of the on-line tutorials follow this process which is outdated. Now Wercker uses a concept called \u0026ldquo;Workflows in Pipelines\u0026rdquo;.\nFor new interface, even if you add a deploy stage in the wercker.yml, you will have to create a new pipeline deploy under the Workflows tab. After creating the pipeline, the \u0026ldquo;YML Pipeline name\u0026rdquo; must be set to the deploy stage name, which in this case is deploy.\nIn deploy stage, I used this step to deploy the built site to Github. Each pipeline starts from scratch, so for the deploy pipeline, the git package needs to be installed again. One also has to set up the environment variable $GIT_TOKEN to each pipeline, acquired from Github setting.\n   Wercker Pipeline\n   You need to generate a new access token for your deploy stage from Github settings.    Github Access Token\n   After adding the deploy stage, add the token you obtained from the Github to Environmental Variables in deploy pipeline.\n   Wercker Token\n   On the next push to your development branch, Wercker will automatically build the site and deploy it on Github Pages.\n"},"name":"Setting up Hugo automatic deployment to Github with Wercker","published":"2017-02-22T13:37:56+05:30","summary":"Recently, I again migrated my blog from Pelican to Hugo. So till now, I have experimented with Wordpress, Jekyll, Pelican, and Hugo. Without any doubt, Hugo is the simplest to set up. This time, I have setup Hugo in Windows, as I think, in my system, I reinstall Windows OS much less frequently than the Linux.","type":"entry","url":"https://yashagarwal.in/posts/2017/02/setting-up-hugo-automatic-deployment-to-github-with-wercker/"},{"content":{"html":"\u003cp\u003eRecently I was searching for Python projects on Github for contribution. Every single project I found, had a thing common among them. In every project\u0026rsquo;s contribution guide, it was asked to set up the virtual environment for the project. What the heck is this virtual environment and how does it work?\u003c/p\u003e\n\u003cp\u003eAs a beginner to open source projects, the problem I faced, in the beginning, was how to set up the development environments for the projects I was looking at. I searched the Internet, I found some articles, but they were not complete. So I decided to write this guide, which will be useful for me in future also.\u003c/p\u003e\n\u003cp\u003ePython uses \u003ccode\u003epip\u003c/code\u003e for package management.\u003c/p\u003e\n\u003ch2 id=\"installing-pip\"\u003eInstalling pip\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003epip\u003c/code\u003e depends on setuptools library, which is in official Ubuntu repositories. To install it for python2 -\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo apt-get install python-setuptools\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThen install \u003ccode\u003epip\u003c/code\u003e using -\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo apt-get install python-pip\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eand for python3 -\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo apt-get install python3-setuptools\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eThen install \u003ccode\u003epip\u003c/code\u003e using -\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo apt-get install python3-pip\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eIt should install \u003ccode\u003epip\u003c/code\u003e on your system for both python versions. \u003ccode\u003epip\u003c/code\u003e is very easy to use. It will take care of every single package you may require for your project.\u003c/p\u003e\n\u003ch3 id=\"installing-a-package-using-pip\"\u003eInstalling a package using pip\u003c/h3\u003e\n\u003cp\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"c1\"\u003e# it will search and install [package]\u003c/span\u003e\r\npip install \u003cspan class=\"o\"\u003e[\u003c/span\u003epackage\u003cspan class=\"o\"\u003e]\u003c/span\u003e\r\npip install django\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\nIf you are using python3, then don\u0026rsquo;t forget to use \u003ccode\u003epip3\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003epip\u003c/code\u003e can be used to install a specific version of package also.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"c1\"\u003e# it will search and install [package] with [version]\u003c/span\u003e\r\npip install \u003cspan class=\"o\"\u003e[\u003c/span\u003epackage\u003cspan class=\"o\"\u003e]==[\u003c/span\u003eversion\u003cspan class=\"o\"\u003e]\u003c/span\u003e\r\npip install \u003cspan class=\"nv\"\u003edjango\u003c/span\u003e\u003cspan class=\"o\"\u003e==\u003c/span\u003e1.6.5\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003ch3 id=\"uninstalling-a-package-using-pip\"\u003eUninstalling a package using pip\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"c1\"\u003e# it will search and uninstall [package]\u003c/span\u003e\r\npip uninstall \u003cspan class=\"o\"\u003e[\u003c/span\u003epackage\u003cspan class=\"o\"\u003e]\u003c/span\u003e\r\npip uninstall django\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3 id=\"upgrading-a-package-using-pip\"\u003eupgrading a package using pip\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"c1\"\u003e# it will upgrade [package] to latest version\u003c/span\u003e\r\npip install --upgrade \u003cspan class=\"o\"\u003e[\u003c/span\u003epackage\u003cspan class=\"o\"\u003e]\u003c/span\u003e\r\npip install --upgrade django\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3 id=\"creating-list-of-all-packages-with-pip\"\u003eCreating list of all packages with pip\u003c/h3\u003e\n\u003cp\u003eIt is one of most used and most useful feature of \u003ccode\u003epip\u003c/code\u003e. It allows you to make a list of all the dependencies of your project.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"c1\"\u003e# it will output the file to current directory\u003c/span\u003e\r\npip freeze \u0026gt; \u003cspan class=\"o\"\u003e[\u003c/span\u003efile_name.txt\u003cspan class=\"o\"\u003e]\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eAll these commands above will install the packages globally. But that\u0026rsquo;s not what is desired. \u003ccode\u003evirtualenv\u003c/code\u003e comes to our rescue here.\u003c/p\u003e\n\u003ch2 id=\"virtualenv\"\u003eVirtualenv\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003evirtualenv\u003c/code\u003e solves a very particular problem; it allows multiple python projects that have different and often conflicting dependencies, to coexist on the same system.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003evirtualenv\u003c/code\u003e solves this problem by creating different isolated development environments for your projects. An environment is a folder which contains everything; your project needs to work properly.\u003c/p\u003e\n\u003ch3 id=\"installing-virtualenv\"\u003eInstalling virtualenv\u003c/h3\u003e\n\u003cp\u003eBy default, if you install \u003ccode\u003evirtualenv\u003c/code\u003e using \u003ccode\u003epip\u003c/code\u003e, it will use system\u0026rsquo;s default python to create virtual environments. To overcome this problem, we will install \u003ccode\u003evirtualenv\u003c/code\u003e using ubuntu package manager.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo apt-get install python-virtualenv\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003ch3 id=\"installing-virtualenvwrapper\"\u003eInstalling virtualenvwrapper\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003evirtualenvwrapper\u003c/code\u003e provides some set of commands which makes working with virtual environments much easier.\u003c/p\u003e\n\u003cp\u003eTo install it -\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo pip install virtualenvwrapper\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003epip\u003c/code\u003e, \u003ccode\u003evirtualenv\u003c/code\u003e and \u003ccode\u003evirtualenvwrapper\u003c/code\u003e are the only packages which you will need to install globally. All other per project packages will be installed in respective virtual environments.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003evirtualenvwrapper\u003c/code\u003e also places all your virtual environments in one place. It makes working with projects very easy.\u003c/p\u003e\n\u003cp\u003eNow open your \u003ccode\u003e.bashrc\u003c/code\u003e and add these two lines to the end -\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"c1\"\u003e# All your projects will be saved in python-dev folder\u003c/span\u003e\r\n\u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003ePROJECT_HOME\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e~/python-dev\r\n\r\n\u003cspan class=\"c1\"\u003e# ~/python-dev/virtualenvs will contains python interpreters for each project.\u003c/span\u003e\r\n\u003cspan class=\"nb\"\u003eexport\u003c/span\u003e \u003cspan class=\"nv\"\u003eWORKON_HOME\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e~/python-dev/virtualenvs\r\n\r\n\u003cspan class=\"c1\"\u003e# source the virtualenvwrapper script\u003c/span\u003e\r\n\u003cspan class=\"nb\"\u003esource\u003c/span\u003e /usr/local/bin/virtualenvwrapper.sh\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eYou can change \u003ccode\u003epython-dev\u003c/code\u003e to any name you wish. Your virtual environments will be created at that location.\u003c/p\u003e\n\u003cp\u003eNow restart your terminal to source the \u003ccode\u003e.bashrc\u003c/code\u003e or use -\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"nb\"\u003esource\u003c/span\u003e .bashrc\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003ch3 id=\"basic-usage\"\u003eBasic Usage\u003c/h3\u003e\n\u003cp\u003eCreate a virtual environment -\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003emkvirtualenv myproject\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eIt will create \u003ccode\u003emyproject\u003c/code\u003e folder in the python-dev directory. To activate this project -\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eworkon myproject\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eAlternatively you can create project using \u003ccode\u003emkproject\u003c/code\u003e command. It will create a virtual environment as well as a project directory in the \u003ccode\u003e$PROJECT_HOME\u003c/code\u003e, which is \u003ccode\u003ecd\u003c/code\u003e-ed into when you \u003ccode\u003eworkon\u003c/code\u003e myproject.\u003c/p\u003e\n\u003cp\u003eDon\u0026rsquo;t forget to deactivate current project when you switch between different projects.\u003c/p\u003e\n\u003cp\u003eTo deactivate a project -\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003edeactivate\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eTo delete a virtual environment -\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ermvirtualenv myproject\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eList all environments -\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003elsvirtualenv\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eit will also list all virtual environments -\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eworkon\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003ePlease refer to virtualenvwrapper documentation for \u003ca href=\"https://virtualenvwrapper.readthedocs.io/en/latest/command_ref.html\"\u003efull list of virtualenvwrapper commands\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003evirtualenvwrapper also provides the tab-completion feature which is very handy when you have a lot of projects to work with.\u003c/p\u003e\n\u003cp\u003eThat\u0026rsquo;s it. Hope you liked the post. 😄\u003c/p\u003e\n","text":"Recently I was searching for Python projects on Github for contribution. Every single project I found, had a thing common among them. In every project\u0026rsquo;s contribution guide, it was asked to set up the virtual environment for the project. What the heck is this virtual environment and how does it work?\nAs a beginner to open source projects, the problem I faced, in the beginning, was how to set up the development environments for the projects I was looking at. I searched the Internet, I found some articles, but they were not complete. So I decided to write this guide, which will be useful for me in future also.\nPython uses pip for package management.\nInstalling pip pip depends on setuptools library, which is in official Ubuntu repositories. To install it for python2 -\nsudo apt-get install python-setuptools Then install pip using - sudo apt-get install python-pip\nand for python3 - sudo apt-get install python3-setuptools\nThen install pip using - sudo apt-get install python3-pip\nIt should install pip on your system for both python versions. pip is very easy to use. It will take care of every single package you may require for your project.\nInstalling a package using pip # it will search and install [package]\rpip install [package]\rpip install django If you are using python3, then don\u0026rsquo;t forget to use pip3.\npip can be used to install a specific version of package also. # it will search and install [package] with [version]\rpip install [package]==[version]\rpip install django==1.6.5\nUninstalling a package using pip # it will search and uninstall [package]\rpip uninstall [package]\rpip uninstall django upgrading a package using pip # it will upgrade [package] to latest version\rpip install --upgrade [package]\rpip install --upgrade django Creating list of all packages with pip It is one of most used and most useful feature of pip. It allows you to make a list of all the dependencies of your project. # it will output the file to current directory\rpip freeze \u0026gt; [file_name.txt]\nAll these commands above will install the packages globally. But that\u0026rsquo;s not what is desired. virtualenv comes to our rescue here.\nVirtualenv virtualenv solves a very particular problem; it allows multiple python projects that have different and often conflicting dependencies, to coexist on the same system.\nvirtualenv solves this problem by creating different isolated development environments for your projects. An environment is a folder which contains everything; your project needs to work properly.\nInstalling virtualenv By default, if you install virtualenv using pip, it will use system\u0026rsquo;s default python to create virtual environments. To overcome this problem, we will install virtualenv using ubuntu package manager. sudo apt-get install python-virtualenv\nInstalling virtualenvwrapper virtualenvwrapper provides some set of commands which makes working with virtual environments much easier.\nTo install it - sudo pip install virtualenvwrapper\npip, virtualenv and virtualenvwrapper are the only packages which you will need to install globally. All other per project packages will be installed in respective virtual environments.\nvirtualenvwrapper also places all your virtual environments in one place. It makes working with projects very easy.\nNow open your .bashrc and add these two lines to the end - # All your projects will be saved in python-dev folder\rexport PROJECT_HOME=~/python-dev\r# ~/python-dev/virtualenvs will contains python interpreters for each project.\rexport WORKON_HOME=~/python-dev/virtualenvs\r# source the virtualenvwrapper script\rsource /usr/local/bin/virtualenvwrapper.sh\nYou can change python-dev to any name you wish. Your virtual environments will be created at that location.\nNow restart your terminal to source the .bashrc or use - source .bashrc\nBasic Usage Create a virtual environment - mkvirtualenv myproject\nIt will create myproject folder in the python-dev directory. To activate this project - workon myproject\nAlternatively you can create project using mkproject command. It will create a virtual environment as well as a project directory in the $PROJECT_HOME, which is cd-ed into when you workon myproject.\nDon\u0026rsquo;t forget to deactivate current project when you switch between different projects.\nTo deactivate a project - deactivate\nTo delete a virtual environment - rmvirtualenv myproject\nList all environments - lsvirtualenv\nit will also list all virtual environments - workon\nPlease refer to virtualenvwrapper documentation for full list of virtualenvwrapper commands.\nvirtualenvwrapper also provides the tab-completion feature which is very handy when you have a lot of projects to work with.\nThat\u0026rsquo;s it. Hope you liked the post. 😄\n"},"name":"Setting up Python Development Environments","published":"2016-10-09T00:00:00Z","summary":"Recently I was searching for Python projects on Github for contribution. Every single project I found, had a thing common among them. In every project\u0026rsquo;s contribution guide, it was asked to set up the virtual environment for the project. What the heck is this virtual environment and how does it work?\nAs a beginner to open source projects, the problem I faced, in the beginning, was how to set up the development environments for the projects I was looking at.","type":"entry","url":"https://yashagarwal.in/posts/2016/10/setting-up-python-development-environments/"},{"content":{"html":"\n\n\n\n    \n\n    \n    \n\n    \n    \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe.min.css\" integrity=\"sha256-sCl5PUOGMLfFYctzDW3MtRib0ctyUvI9Qsmq2wXOeBY=\" crossorigin=\"anonymous\" /\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/default-skin/default-skin.min.css\" integrity=\"sha256-BFeI1V+Vh1Rk37wswuOYn5lsTcaU96hGaI7OUVCLjPc=\" crossorigin=\"anonymous\" /\u003e\n\n    \n    \u003clink rel=\"stylesheet\" href=\"/css/photoswipe.min.d780348a887d97b4d6cc664301a2941706e4a02aeb1533524fcce3b7b9b64b4f.css\"\u003e\n\n    \n\n    \n    \u003cdiv class=\"pswp\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\"\u003e\n        \n        \u003cdiv class=\"pswp__bg\"\u003e\u003c/div\u003e\n        \n        \u003cdiv class=\"pswp__scroll-wrap\"\u003e\n            \n            \u003cdiv class=\"pswp__container\"\u003e\n                \u003cdiv class=\"pswp__item\"\u003e\u003c/div\u003e\n                \u003cdiv class=\"pswp__item\"\u003e\u003c/div\u003e\n                \u003cdiv class=\"pswp__item\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n            \n            \u003cdiv class=\"pswp__ui pswp__ui--hidden\"\u003e\n                \u003cdiv class=\"pswp__top-bar\"\u003e\n                    \n                    \u003cdiv class=\"pswp__counter\"\u003e\u003c/div\u003e\n                    \u003cbutton class=\"pswp__button pswp__button--close\" title=\"Close (Esc)\"\u003e\u003c/button\u003e\n                    \u003cbutton class=\"pswp__button pswp__button--share\" title=\"Share\"\u003e\u003c/button\u003e\n                    \u003cbutton class=\"pswp__button pswp__button--fs\" title=\"Toggle fullscreen\"\u003e\u003c/button\u003e\n                    \u003cbutton class=\"pswp__button pswp__button--zoom\" title=\"Zoom in/out\"\u003e\u003c/button\u003e\n                    \n                    \n                    \u003cdiv class=\"pswp__preloader\"\u003e\n                        \u003cdiv class=\"pswp__preloader__icn\"\u003e\n                            \u003cdiv class=\"pswp__preloader__cut\"\u003e\n                                \u003cdiv class=\"pswp__preloader__donut\"\u003e\u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"pswp__share-modal pswp__share-modal--hidden pswp__single-tap\"\u003e\n                    \u003cdiv class=\"pswp__share-tooltip\"\u003e\u003c/div\u003e\n                \u003c/div\u003e\n                \u003cbutton class=\"pswp__button pswp__button--arrow--left\" title=\"Previous (arrow left)\"\u003e\n                \u003c/button\u003e\n                \u003cbutton class=\"pswp__button pswp__button--arrow--right\" title=\"Next (arrow right)\"\u003e\n                \u003c/button\u003e\n                \u003cdiv class=\"pswp__caption\"\u003e\n                    \u003cdiv class=\"pswp__caption__center\"\u003e\u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n\u003cp\u003eAfter my summer vacation started, I bought a new laptop, and the first thing I did was to install Arch Linux on it. After a standard arch installation procedure, I started putting together my desktop environment, beginning with ArchLinux and Openbox, and then piecing all pieces together to build a proper desktop environment. Building a desktop this way follows the Unix Methodology; have software that each does one thing well, and when you put them together, you get something amazing.\u003c/p\u003e\n\u003cp\u003eWhen I first installed Arch, I had several choices. I tried \u003ccode\u003exfce\u003c/code\u003e and \u003ccode\u003egnome\u003c/code\u003e as my desktop environments. While both of them have their pros and cons, I ended up liking none. The sole reason was the dependencies; these two software bring with them. My only intention of installing Arch was to have something, which I control, not like Ubuntu, where you are forced to use the preinstalled software and when you try to uninstall something, you fear of breaking some other program.\u003c/p\u003e\n\u003cp\u003eSo I end up going the route of building something up from scratch using Openbox as a base. At this point, I have a fast, lightweight desktop that is exceptionally stable and is genuinely my desktop as I have built it from the ground up, choosing every application.\u003c/p\u003e\n\n\n\n    \u003clink rel=\"stylesheet\" href=\"/css/hugo-easy-gallery.css\"\u003e\n    \n\n\n\u003cdiv class=\"box fancy-figure caption-position-none\"  itemscope itemtype=\"http://schema.org/ImageGallery\"\u003e\n    \u003cfigure  itemprop=\"associatedMedia\" itemscope itemtype=\"http://schema.org/ImageObject\"\u003e\n        \u003cdiv class=\"img\"\u003e\n            \u003cimg itemprop=\"thumbnail\" src=\"/images/posts/2016-06-09/desktop.jpg\" alt=\"Openbox on ArchLinux\"/\u003e\n        \u003c/div\u003e\n        \u003ca href=\"/images/posts/2016-06-09/desktop.jpg\" itemprop=\"contentUrl\"\u003e\u003c/a\u003e\n            \u003cfigcaption\u003e\n                    \u003cp\u003eOpenbox on ArchLinux\u003c/p\u003e\n            \u003c/figcaption\u003e\n    \u003c/figure\u003e\n\u003c/div\u003e\n\n\u003ch2 id=\"window-manager\"\u003eWindow Manager\u003c/h2\u003e\n\u003cp\u003eAfter the installation of Arch, the first thing I did was to install \u003ccode\u003eopenbox\u003c/code\u003e, a tiling window manager. You may also try other window managers like \u003ccode\u003eawesome\u003c/code\u003e, \u003ccode\u003ei3\u003c/code\u003e, and \u003ccode\u003efluxbox\u003c/code\u003e, etc. but I chose Openbox because it is used everywhere. Thus there is a plethora of information out there about customizing it.\u003c/p\u003e\n\u003cp\u003eFor our window manager to show up, it needs to be added either in a login manager or user\u0026rsquo;s \u003ccode\u003e~/.xinitrx\u003c/code\u003e file. There is a default version of this file that contain some code which we may want to retain, so rather than making this file from scratch, copy the default version of the file to the user\u0026rsquo;s home directory.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ecp /etc/X11/xinit/xinitrc ~/.xinitrc\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow add the command \u003ccode\u003eexec Openbox-session\u003c/code\u003e to the end of the file. Remember that the system will ignore the lines following this command. An Openbox session should be able to be started by entering the command \u003ccode\u003estartx\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eAn openbox session can be started automatically upon login using shell\u0026rsquo;s startup script. Add following to the shell\u0026rsquo;s startup script, \u003ccode\u003e~/.bash_profile\u003c/code\u003e for bash and \u003ccode\u003e~/.zprofile\u003c/code\u003e for zsh.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"o\"\u003e[[\u003c/span\u003e -z \u003cspan class=\"nv\"\u003e$DISPLAY\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$XDG_VTNR\u003c/span\u003e -eq \u003cspan class=\"m\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e]]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nb\"\u003eexec\u003c/span\u003e startx\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"configuring-openbox\"\u003eConfiguring Openbox\u003c/h2\u003e\n\u003cp\u003eSetting up openbox is quite simple. Four files make the basis of openbox configuration. They are \u003ccode\u003erc.xml\u003c/code\u003e, \u003ccode\u003eautostart\u003c/code\u003e,  \u003ccode\u003emenu.xml\u003c/code\u003e and \u003ccode\u003eenvironment\u003c/code\u003e. These files controls everything about the window manager.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003erc.xml\u003c/strong\u003e: Determine the behavior and settings of overall Openbox session\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eautostart\u003c/strong\u003e: Contains a list of applications to be launched with the window manager\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003emenu.xml\u003c/strong\u003e: It makes the right-click context menu of the desktop\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eenvironment\u003c/strong\u003e: Can be used to export and set relevant environmental variables\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor the configuration of Openbox, it is necessary to create a local Openbox profile in the user\u0026rsquo;s home directory. A global configuration file can be found in \u003ccode\u003e/etc/xdg/openbox\u003c/code\u003e, which is well documented, and copying the global configuration to the user\u0026rsquo;s directory will give a good starting point to start customizing.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ecp -R /etc/xdg/openbox ~/.config/\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThese files can be edited by hand, although some graphical tools are also available, use of these may be desired.\u003c/p\u003e\n\u003ch2 id=\"themes-and-appearance\"\u003eThemes and Appearance\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://www.archlinux.org/packages/community/x86_64/obconf\"\u003eobconf\u003c/a\u003e and \u003ca href=\"https://www.archlinux.org/packages/community/x86_64/lxappearance-obconf/\"\u003elxappearance-obconf\u003c/a\u003e can be used to configure appearance and theme of openbox session. There are quite a few themes available in \u003ca href=\"https://www.archlinux.org/packages/community/any/openbox-themes/\"\u003eopenbox-themes\u003c/a\u003e package. My personal favorite is \u003ca href=\"https://www.archlinux.org/packages/community/any/numix-themes/\"\u003eNumix-themes\u003c/a\u003e and \u003ca href=\"https://aur.archlinux.org/packages/numix-icon-theme-git/\"\u003eNumix-icon-theme-git (AUR)\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eTo see changes after editing a configuration file, the Openbox needs to be refreshed. It can be done with the \u003ccode\u003ereconfigure\u003c/code\u003e command.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eopenbox --reconfigure\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"menus\"\u003eMenus\u003c/h2\u003e\n\u003cp\u003eThe type and behavior of Openbox menus, accessible by right-clicking the background, can be changed using \u003ccode\u003e~/.config/openbox/menu.xml\u003c/code\u003e file. Openbox provides two kinds of menus, \u003ccode\u003eStatic\u003c/code\u003e, and \u003ccode\u003eDynamic\u003c/code\u003e menus (Piped and Generators)\u003c/p\u003e\n\u003cp\u003eStatic menus are hardcoded in XML and is stored in the \u003ccode\u003emenu.xml\u003c/code\u003e file. Whenever you install a new application, you will have to update the XML file to update the menu manually. It is a viable solution if the apps are not installed on a day to day basis.\u003c/p\u003e\n\u003cp\u003ePipe menus are the sections of the Openbox menu that Openbox creates on the fly by running a generic script and using its plain text output as menu entries. This scheme can be used in different ways, like adding a mail checker in the menu or adding a weather forecast menu. You can check \u003ca href=\"http://openbox.org/wiki/Openbox:Pipemenus\"\u003eopenbox pipe menu page\u003c/a\u003e for more information.\u003c/p\u003e\n\u003cp\u003eGenerators are the most convenient type of menus. These can be found in most desktop environments where applications show up in the menu automatically. If applications are being installed regularly, then this will probably be the preferred choice.\u003c/p\u003e\n\u003ch3 id=\"static-menus\"\u003eStatic Menus\u003c/h3\u003e\n\u003cp\u003eThe process of making these menus can be automated by static menu generator like \u003ca href=\"https://www.archlinux.org/packages/?name=obmenu\"\u003eobmenu\u003c/a\u003e. It will generate static menus from installed applications by looking into certain directories. Others available tools are \u003ca href=\"https://www.archlinux.org/packages/?name=menumaker\"\u003emenumaker\u003c/a\u003e, \u003ca href=\"https://www.archlinux.org/packages/?name=obmenu\"\u003eobmenu\u003c/a\u003e and \u003ca href=\"https://www.archlinux.org/packages/?name=archlinux-xdg-menu\"\u003exdg-menu\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"dynamic-menus\"\u003eDynamic Menus\u003c/h3\u003e\n\u003cp\u003eDynamic menus give the same kind of functionality most people are used to. So it was my preferred choice. They can be used to generate full, complex menus on the fly. One of the most popular application for generating dynamic menus is \u003ca href=\"https://aur.archlinux.org/packages/obmenu-generator/\"\u003eobmenu-generator (AUR)\u003c/a\u003e. Though it is not officially connected to Openbox, it is widely used.\u003c/p\u003e\n\u003cp\u003eIn order to have \u003ca href=\"https://aur.archlinux.org/packages/obmenu-generator/\"\u003eobmenu-generator (AUR)\u003c/a\u003e make a menu on demand, the \u003ccode\u003emenu.xml\u003c/code\u003e file should contain the following code as the only entry.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u0026lt;?xml \u003cspan class=\"nv\"\u003eversion\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;1.0\u0026#34;\u003c/span\u003e \u003cspan class=\"nv\"\u003eencoding\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;UTF-8\u0026#34;\u003c/span\u003e?\u0026gt;\r\n\u0026lt;openbox_menu\u0026gt;\r\n    \u0026lt;menu \u003cspan class=\"nv\"\u003eid\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;root-menu\u0026#34;\u003c/span\u003e \u003cspan class=\"nv\"\u003elabel\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;OpenBox 3\u0026#34;\u003c/span\u003e \u003cspan class=\"nv\"\u003eexecute\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;/usr/bin/obmenu-generator\u0026#34;\u003c/span\u003e\u0026gt;\u0026lt;/menu\u0026gt;\r\n\u0026lt;/openbox_menu\u0026gt;\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"panels-and-taskbars\"\u003ePanels and Taskbars\u003c/h2\u003e\n\u003cp\u003eYou can get any panel like \u003ca href=\"https://www.archlinux.org/packages/extra/i686/xfce4-panel/\"\u003exfce4-panel\u003c/a\u003e or the simple and customizable \u003ca href=\"https://www.archlinux.org/packages/?name=tint2\"\u003etint2\u003c/a\u003e. I chose tint2 because it very closely follows the openbox spirit of having easy customization with plain configuration files. tint2 package also containg a graphical tool \u003ccode\u003etint2conf\u003c/code\u003e for customizing panel and you can obviously go right to the tint2 configuration file and edit it there. This also means it is easy to pick up your configuration file and move it to another computer, or restore an old configuration since it is as simple as pasting a text document in the right place. tint2 can also have sections for each individual desktop and has various small widget like programs that can be used with it such as a calendar, \u003ca href=\"https://www.archlinux.org/packages/community/x86_64/gsimplecal/\"\u003egsimplecal\u003c/a\u003e, a volume application, \u003ca href=\"https://www.archlinux.org/packages/?name=volumeicon\"\u003evolumeicon\u003c/a\u003e, a battery indicator, \u003ca href=\"https://www.archlinux.org/packages/?name=cbatticon\"\u003ecbatticon\u003c/a\u003e, a network indicator like \u003ca href=\"https://www.archlinux.org/packages/extra/any/wicd/\"\u003ewicd\u003c/a\u003e which also have a system tray icon and a mini task tray. To start tint2 with openbox, you need to add \u003ccode\u003etint2 \u0026amp;\u003c/code\u003e to the \u003ccode\u003eautostart\u003c/code\u003e file.\u003c/p\u003e\n\u003ch2 id=\"file-manager\"\u003eFile Manager\u003c/h2\u003e\n\u003cp\u003eSome file managers deeply integrate into desktop environments, and when installed with Openbox, they end up pulling multiple dependencies, which is certainly not desired. Our aim behind building an Openbox set up was to have minimum dependencies so that we can get a lightweight desktop. However, there are several file managers available that fit into the Openbox very well. In my choice, \u003ca href=\"https://www.archlinux.org/packages/?name=pcmanfm\"\u003epcmanfm\u003c/a\u003e is the best choice here. pcmanfm is a lightweight and fast file manager with network and thrash support. pcmanfm can also manage desktop icons and wallpaper setting, although if you plan to use conky in your system, then you may not want pcmanfm to manage desktop for you. The reason is that pcmanfm treats desktop as a window, so when you switch to desktop, the conky hides behind the desktop window. To get the icons and wallpaper, you can use other standalone tools such as \u003ca href=\"https://www.archlinux.org/packages/community/x86_64/idesk/\"\u003e\u003ccode\u003eidesk\u003c/code\u003e\u003c/a\u003e and \u003ca href=\"https://www.archlinux.org/packages/extra/x86_64/feh/\"\u003e\u003ccode\u003efeh\u003c/code\u003e\u003c/a\u003e or \u003ca href=\"https://www.archlinux.org/packages/extra/x86_64/nitrogen/\"\u003e\u003ccode\u003enitrogen\u003c/code\u003e\u003c/a\u003e.\nTo start pcmanfm is the desktop mode, add the following to the autostart file.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003epcmanfm --desktop \u003cspan class=\"p\"\u003e\u0026amp;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eand to stop it for managing desktop\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003epcmanfm --desktop-off \u003cspan class=\"p\"\u003e\u0026amp;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eMany functions present in modern file managers require the installation of a few additional programs. \u003ca href=\"https://www.archlinux.org/packages/?name=gvfs\"\u003e\u003ccode\u003egvfs\u003c/code\u003e\u003c/a\u003e gives you the ability to mount volumes and have trash control. It is not mandatory to have, but it allows on-demand mounting completely from within the file manager, as opposed to having to drop down to the command line. A disk-volume manager such as \u003ca href=\"https://www.archlinux.org/packages/?name=udisks2\"\u003e\u003ccode\u003eudisks2\u003c/code\u003e\u003c/a\u003e will also be wanted, and for auto-mounting removable disks, \u003ca href=\"https://www.archlinux.org/packages/community/any/udiskie/\"\u003e\u003ccode\u003eudiskie\u003c/code\u003e\u003c/a\u003e works well with Openbox. udiskie can be added to Openbox\u0026rsquo;s autostart file like any other application.\u003c/p\u003e\n\u003ch2 id=\"composition\"\u003eComposition\u003c/h2\u003e\n\u003cp\u003eOpenbox does not provide native support for composition, although having a compositor may prevent screen flickering and other distortion in applications like \u003ca href=\"https://www.archlinux.org/packages/community/any/oblogout/\"\u003e\u003ccode\u003eoblogout\u003c/code\u003e\u003c/a\u003e. Some options work great with Openbox. The one which I am using and quite happy with is \u003ca href=\"https://wiki.archlinux.org/index.php/Compton\"\u003e\u003ccode\u003ecompton\u003c/code\u003e\u003c/a\u003e. It can be used with or without any initial configuration, although there are a lot of different configuration options if you decide to customize the setup. To start compton in background with shadows, use this in \u003ccode\u003eautostart\u003c/code\u003e file.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ecompton -b -c \u003cspan class=\"p\"\u003e\u0026amp;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"wrapping-up\"\u003eWrapping up\u003c/h2\u003e\n\u003cp\u003eWhile setting up my desktop using Openbox ended up being much more work than I could have with typical desktop environments. But now I have a much more stable desktop, about which I know, what is running in my system, and that my system is not cluttered with any software that I never use.\u003c/p\u003e\n\u003cp\u003eWhile it might not be for everybody having to configure every little bit of the desktop, I genuinely feel I have ended up with excellent user experience, and a system that is customized precisely to fit my needs.\u003c/p\u003e\n\u003ch2 id=\"references\"\u003eReferences\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://wiki.archlinux.org/\"\u003eArch Linux Wiki\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","text":"                         After my summer vacation started, I bought a new laptop, and the first thing I did was to install Arch Linux on it. After a standard arch installation procedure, I started putting together my desktop environment, beginning with ArchLinux and Openbox, and then piecing all pieces together to build a proper desktop environment. Building a desktop this way follows the Unix Methodology; have software that each does one thing well, and when you put them together, you get something amazing.\nWhen I first installed Arch, I had several choices. I tried xfce and gnome as my desktop environments. While both of them have their pros and cons, I ended up liking none. The sole reason was the dependencies; these two software bring with them. My only intention of installing Arch was to have something, which I control, not like Ubuntu, where you are forced to use the preinstalled software and when you try to uninstall something, you fear of breaking some other program.\nSo I end up going the route of building something up from scratch using Openbox as a base. At this point, I have a fast, lightweight desktop that is exceptionally stable and is genuinely my desktop as I have built it from the ground up, choosing every application.\n   Openbox on ArchLinux\n   Window Manager After the installation of Arch, the first thing I did was to install openbox, a tiling window manager. You may also try other window managers like awesome, i3, and fluxbox, etc. but I chose Openbox because it is used everywhere. Thus there is a plethora of information out there about customizing it.\nFor our window manager to show up, it needs to be added either in a login manager or user\u0026rsquo;s ~/.xinitrx file. There is a default version of this file that contain some code which we may want to retain, so rather than making this file from scratch, copy the default version of the file to the user\u0026rsquo;s home directory.\ncp /etc/X11/xinit/xinitrc ~/.xinitrc Now add the command exec Openbox-session to the end of the file. Remember that the system will ignore the lines following this command. An Openbox session should be able to be started by entering the command startx.\nAn openbox session can be started automatically upon login using shell\u0026rsquo;s startup script. Add following to the shell\u0026rsquo;s startup script, ~/.bash_profile for bash and ~/.zprofile for zsh.\n[[ -z $DISPLAY \u0026amp;\u0026amp; $XDG_VTNR -eq 1 ]] \u0026amp;\u0026amp; exec startx Configuring Openbox Setting up openbox is quite simple. Four files make the basis of openbox configuration. They are rc.xml, autostart, menu.xml and environment. These files controls everything about the window manager.\n rc.xml: Determine the behavior and settings of overall Openbox session autostart: Contains a list of applications to be launched with the window manager menu.xml: It makes the right-click context menu of the desktop environment: Can be used to export and set relevant environmental variables  For the configuration of Openbox, it is necessary to create a local Openbox profile in the user\u0026rsquo;s home directory. A global configuration file can be found in /etc/xdg/openbox, which is well documented, and copying the global configuration to the user\u0026rsquo;s directory will give a good starting point to start customizing.\ncp -R /etc/xdg/openbox ~/.config/ These files can be edited by hand, although some graphical tools are also available, use of these may be desired.\nThemes and Appearance obconf and lxappearance-obconf can be used to configure appearance and theme of openbox session. There are quite a few themes available in openbox-themes package. My personal favorite is Numix-themes and Numix-icon-theme-git (AUR).\nTo see changes after editing a configuration file, the Openbox needs to be refreshed. It can be done with the reconfigure command.\nopenbox --reconfigure Menus The type and behavior of Openbox menus, accessible by right-clicking the background, can be changed using ~/.config/openbox/menu.xml file. Openbox provides two kinds of menus, Static, and Dynamic menus (Piped and Generators)\nStatic menus are hardcoded in XML and is stored in the menu.xml file. Whenever you install a new application, you will have to update the XML file to update the menu manually. It is a viable solution if the apps are not installed on a day to day basis.\nPipe menus are the sections of the Openbox menu that Openbox creates on the fly by running a generic script and using its plain text output as menu entries. This scheme can be used in different ways, like adding a mail checker in the menu or adding a weather forecast menu. You can check openbox pipe menu page for more information.\nGenerators are the most convenient type of menus. These can be found in most desktop environments where applications show up in the menu automatically. If applications are being installed regularly, then this will probably be the preferred choice.\nStatic Menus The process of making these menus can be automated by static menu generator like obmenu. It will generate static menus from installed applications by looking into certain directories. Others available tools are menumaker, obmenu and xdg-menu.\nDynamic Menus Dynamic menus give the same kind of functionality most people are used to. So it was my preferred choice. They can be used to generate full, complex menus on the fly. One of the most popular application for generating dynamic menus is obmenu-generator (AUR). Though it is not officially connected to Openbox, it is widely used.\nIn order to have obmenu-generator (AUR) make a menu on demand, the menu.xml file should contain the following code as the only entry.\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt;\r\u0026lt;openbox_menu\u0026gt;\r\u0026lt;menu id=\u0026#34;root-menu\u0026#34; label=\u0026#34;OpenBox 3\u0026#34; execute=\u0026#34;/usr/bin/obmenu-generator\u0026#34;\u0026gt;\u0026lt;/menu\u0026gt;\r\u0026lt;/openbox_menu\u0026gt; Panels and Taskbars You can get any panel like xfce4-panel or the simple and customizable tint2. I chose tint2 because it very closely follows the openbox spirit of having easy customization with plain configuration files. tint2 package also containg a graphical tool tint2conf for customizing panel and you can obviously go right to the tint2 configuration file and edit it there. This also means it is easy to pick up your configuration file and move it to another computer, or restore an old configuration since it is as simple as pasting a text document in the right place. tint2 can also have sections for each individual desktop and has various small widget like programs that can be used with it such as a calendar, gsimplecal, a volume application, volumeicon, a battery indicator, cbatticon, a network indicator like wicd which also have a system tray icon and a mini task tray. To start tint2 with openbox, you need to add tint2 \u0026amp; to the autostart file.\nFile Manager Some file managers deeply integrate into desktop environments, and when installed with Openbox, they end up pulling multiple dependencies, which is certainly not desired. Our aim behind building an Openbox set up was to have minimum dependencies so that we can get a lightweight desktop. However, there are several file managers available that fit into the Openbox very well. In my choice, pcmanfm is the best choice here. pcmanfm is a lightweight and fast file manager with network and thrash support. pcmanfm can also manage desktop icons and wallpaper setting, although if you plan to use conky in your system, then you may not want pcmanfm to manage desktop for you. The reason is that pcmanfm treats desktop as a window, so when you switch to desktop, the conky hides behind the desktop window. To get the icons and wallpaper, you can use other standalone tools such as idesk and feh or nitrogen. To start pcmanfm is the desktop mode, add the following to the autostart file.\npcmanfm --desktop \u0026amp; and to stop it for managing desktop\npcmanfm --desktop-off \u0026amp; Many functions present in modern file managers require the installation of a few additional programs. gvfs gives you the ability to mount volumes and have trash control. It is not mandatory to have, but it allows on-demand mounting completely from within the file manager, as opposed to having to drop down to the command line. A disk-volume manager such as udisks2 will also be wanted, and for auto-mounting removable disks, udiskie works well with Openbox. udiskie can be added to Openbox\u0026rsquo;s autostart file like any other application.\nComposition Openbox does not provide native support for composition, although having a compositor may prevent screen flickering and other distortion in applications like oblogout. Some options work great with Openbox. The one which I am using and quite happy with is compton. It can be used with or without any initial configuration, although there are a lot of different configuration options if you decide to customize the setup. To start compton in background with shadows, use this in autostart file.\ncompton -b -c \u0026amp; Wrapping up While setting up my desktop using Openbox ended up being much more work than I could have with typical desktop environments. But now I have a much more stable desktop, about which I know, what is running in my system, and that my system is not cluttered with any software that I never use.\nWhile it might not be for everybody having to configure every little bit of the desktop, I genuinely feel I have ended up with excellent user experience, and a system that is customized precisely to fit my needs.\nReferences  Arch Linux Wiki  "},"name":"Custom Arch Linux setup with Openbox","published":"2016-06-09T10:20:36Z","summary":"After my summer vacation started, I bought a new laptop, and the first thing I did was to install Arch Linux on it. After a standard arch installation procedure, I started putting together my desktop environment, beginning with ArchLinux and Openbox, and then piecing all pieces together to build a proper desktop environment.","type":"entry","url":"https://yashagarwal.in/posts/2016/06/custom-arch-linux-setup-with-openbox/"},{"content":{"html":"\u003cp\u003eSo, after a hectic day, good news finally came. I have been selected as a Lab Administrator for the \u003ca href=\"https://www.facebook.com/sslnitc/\"\u003eSoftware Systems Lab\u003c/a\u003e of my college. Cheers!!!\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s come to our today\u0026rsquo;s topic on configuring Sublime Text Settings.\u003c/p\u003e\n\u003cp\u003eThere is just one rule you must follow while designing your own editor preference configuration.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eDon\u0026rsquo;t put any lines in your configuration that you don\u0026rsquo;t understand.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eYou will find tons of online tutorials that contains all kinds of awesome hacks to make your sublime text experience better but the worst way to make your development environment better is just to borrow the configuration from someone else.\u003c/p\u003e\n\u003cp\u003eSpending your time in actually understand what is happening behind the scenes in the construction of your editor is immensely invaluable. It is similar to the increased information retention that you experience when you copy something from the board.\u003c/p\u003e\n\u003cp\u003eSo first, take some background of what we are going to do today. I am using Sublime Text 3 \u0026ndash; dev version, but most of the instructions are similar for Sublime Text 2 also.\u003c/p\u003e\n\u003cp\u003eOkay, first open the sublime text, then go to \u003ccode\u003ePreference → Settings → User\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eSo this is your configuration file where you can put all your custom preferences. There are other configuration files also, which can be found in Preferences.\u003c/p\u003e\n\u003cp\u003eYou can also find all settings for reference in \u003ccode\u003eSettings → Default\u003c/code\u003e file.\u003c/p\u003e\n\u003cp\u003eHere is my \u003ccode\u003eSettings → User\u003c/code\u003e file. Feel free to take insiparation from it, and make your sublime text experience unmatchable. I have commented every setting which is self-understandable.\u003c/p\u003e\n\u003cscript type=\"application/javascript\" src=\"https://gist.github.com/yashhere/dea6728f88865666c20ff1c35e90bd0e.js\"\u003e\u003c/script\u003e\n\n\u003ch2 id=\"wrapping-it-up\"\u003eWrapping It Up\u003c/h2\u003e\n\u003cp\u003eI still stand by my platitude that\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eDon\u0026rsquo;t put anything in your configuration file you don\u0026rsquo;t understand!\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThat\u0026rsquo;s all for today. Thanks for reading.\u003c/p\u003e\n","text":"So, after a hectic day, good news finally came. I have been selected as a Lab Administrator for the Software Systems Lab of my college. Cheers!!!\nLet\u0026rsquo;s come to our today\u0026rsquo;s topic on configuring Sublime Text Settings.\nThere is just one rule you must follow while designing your own editor preference configuration.\n Don\u0026rsquo;t put any lines in your configuration that you don\u0026rsquo;t understand.\n You will find tons of online tutorials that contains all kinds of awesome hacks to make your sublime text experience better but the worst way to make your development environment better is just to borrow the configuration from someone else.\nSpending your time in actually understand what is happening behind the scenes in the construction of your editor is immensely invaluable. It is similar to the increased information retention that you experience when you copy something from the board.\nSo first, take some background of what we are going to do today. I am using Sublime Text 3 \u0026ndash; dev version, but most of the instructions are similar for Sublime Text 2 also.\nOkay, first open the sublime text, then go to Preference → Settings → User.\nSo this is your configuration file where you can put all your custom preferences. There are other configuration files also, which can be found in Preferences.\nYou can also find all settings for reference in Settings → Default file.\nHere is my Settings → User file. Feel free to take insiparation from it, and make your sublime text experience unmatchable. I have commented every setting which is self-understandable.\n Wrapping It Up I still stand by my platitude that\n Don\u0026rsquo;t put anything in your configuration file you don\u0026rsquo;t understand!\n That\u0026rsquo;s all for today. Thanks for reading.\n"},"name":"A good Sublime Text setup","published":"2016-04-14T10:55:35Z","summary":"So, after a hectic day, good news finally came. I have been selected as a Lab Administrator for the Software Systems Lab of my college. Cheers!!!\nLet\u0026rsquo;s come to our today\u0026rsquo;s topic on configuring Sublime Text Settings.\nThere is just one rule you must follow while designing your own editor preference configuration.\n Don\u0026rsquo;t put any lines in your configuration that you don\u0026rsquo;t understand.\n You will find tons of online tutorials that contains all kinds of awesome hacks to make your sublime text experience better but the worst way to make your development environment better is just to borrow the configuration from someone else.","type":"entry","url":"https://yashagarwal.in/posts/2016/04/a-good-sublime-text-setup/"}],"name":"Technical","type":"feed","url":"https://yashagarwal.in/categories/technical/"}