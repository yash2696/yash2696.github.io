<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>
            
                    Technical on
                
            
            /dev/yash/notes</title>
        <link>https://yashagarwal.in/categories/technical/</link>
        <description>Recent content  in Technical
            on /dev/yash/notes</description>
        <language>en-us</language>
        
                <managingEditor>yashagarwaljpr@gmail.com (Yash Agarwal)</managingEditor>
                <webMaster>yashagarwaljpr@gmail.com (Yash Agarwal)</webMaster><lastBuildDate>Fri, 03 Apr 2020 06:50:28 +0000</lastBuildDate>
        <generator>Hugo -- gohugo.io</generator>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
            <atom:link href="https://yashagarwal.in/categories/technical/index.xml" rel="self" type="application/rss&#43;xml" />
        
            
            <item>
                <title>Automatic HTTPS Certs Using GoDaddy and Gitlab APIs</title>
                <link>https://yashagarwal.in/posts/2019/07/automatic-https-certs-using-godaddy-and-gitlab-apis/</link>
                
                
                <description>&lt;p&gt;Before I start, here is some technical information about my website -&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hosted on Gitlab and usage its CD for automatic deployment, which is triggered on a git commit.&lt;/li&gt;
&lt;li&gt;The domain name registrar is GoDaddy.&lt;/li&gt;
&lt;li&gt;Let&amp;rsquo;s Encrypt as the TLS certificate provider for my domain name.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s Encrypt provides certificates for 90 days only, so I was forced to set up the &lt;code&gt;certbot&lt;/code&gt; every three months, then generate the certificate and &lt;em&gt;manually&lt;/em&gt; deploy the certificates to GitLab. It was frustrating because in three months, my shell probably will not remember the command I used last time, and I was too lazy to document the process somewhere.&lt;/p&gt;
&lt;p&gt;Then I came across a &lt;a href=&#34;https://github.com/pallavagarwal07/NamesiloCert&#34;&gt;project&lt;/a&gt;, which was trying to do a similar thing with other domain name registrar. I thought that this is an excellent setup to adapt and modify it to suit my needs. So I decided to write my module for automatic deployment of Let&amp;rsquo;s Encrypt certificates to GitLab.&lt;/p&gt;
&lt;h2 id=&#34;how-does-lets-encrypt-work&#34;&gt;How does Let&amp;rsquo;s Encrypt work?&lt;/h2&gt;
&lt;p&gt;Before Let&amp;rsquo;s Encrypt can generate the certificate for the domain, it requires the user to prove domain ownership. Let&amp;rsquo;s Encrypt provides two &lt;a href=&#34;https://letsencrypt.org/docs/challenge-types/&#34;&gt;methods&lt;/a&gt; to do this task -&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Updating the DNS records of the domain registrar (DNS-01 challenge)&lt;/li&gt;
&lt;li&gt;Adding an HTTP resource under a well-known URI on the website (HTTP-01 challenge)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using the second method requires me to add a file on my website, and I did not want to do that. Moreover, if in the future, I decide to host some other service, which does not have a website, then this method will fail.&lt;/p&gt;
&lt;p&gt;The first method requires that the domain configuration on the domain registrar is modified. GoDaddy provides a robust API, and it is not difficult to utilize that API to automate specific tasks. The probability of changing the registrar is quite low, at least for the next few years. It will be easier to generate the certificates for any subdomains, as all the subdomains will also be hosted under the same domain registrar.&lt;/p&gt;
&lt;h2 id=&#34;how-does-the-tool-work&#34;&gt;How does the tool work?&lt;/h2&gt;
&lt;p&gt;So here are the steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Call &lt;code&gt;certbot&lt;/code&gt; with all the domain names&lt;/li&gt;
&lt;li&gt;Invoke GoDaddy API to update the DNS records as indicated by Certbot&lt;/li&gt;
&lt;li&gt;Wait for 10 minutes for DNS changes to propagate&lt;/li&gt;
&lt;li&gt;Let &lt;code&gt;certbot&lt;/code&gt; verify the DNS changes&lt;/li&gt;
&lt;li&gt;Use the GitLab API to deploy the generated certificates to GitLab pages&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;step-1-invoking-certbot&#34;&gt;Step 1: Invoking certbot&lt;/h3&gt;
&lt;p&gt;In step 1, we call &lt;code&gt;certbot&lt;/code&gt; will the preferred method DNS. We also need to supply an email id (used by Let&amp;rsquo;s Encrypt to notify domain expiration). The &lt;code&gt;EMAIL_ID&lt;/code&gt; environment variable can be used to store the email id of the user.&lt;/p&gt;
&lt;p&gt;Certbot runs in an interactive mode by default. It is not desired in a scripted environment. Certbot also provides mechanisms to deploy the certificates to a local server automatically, but as we are hosting our website on Gitlab, we do not want the automatic deployment facility. So we need to invoke the &lt;code&gt;certbot&lt;/code&gt; command with &lt;code&gt;--manual&lt;/code&gt; and &lt;code&gt;certonly&lt;/code&gt; modes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;certbot   --manual &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          --preferred-challenges dns &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          --agree-tos &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          --email &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;EMAIL_ID&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          --no-eff-email &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          --expand &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          --renew-by-default &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          --manual-public-ip-logging-ok &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          --noninteractive &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          --redirect &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          --config-dir &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;DIR&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/generated/config &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          --work-dir &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;DIR&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/generated/work &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          --logs-dir &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;DIR&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/generated/logs &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          --manual-auth-hook &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;DIR&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/auth_hook.sh &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -d yashagarwal.in &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          certonly&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The explanation for most of the flags used in the above command can be found by running the following command -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;certbot --help&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;--manual-auth-hook&lt;/code&gt; flag is worth looking. This hook provides a mechanism to specify the executable, which can be used to facilitate domain ownership validation. In this case, the hook points to a script &lt;code&gt;auth_hook.sh&lt;/code&gt;, which then calls a Go client, which interacts with GoDaddy API.&lt;/p&gt;
&lt;h3 id=&#34;step-2-adding-dns-entry-to-godaddy-dns-manager&#34;&gt;Step 2: Adding DNS entry to GoDaddy DNS manager&lt;/h3&gt;
&lt;p&gt;Certbot supplies two environment variables &lt;code&gt;CERTBOT_DOMAIN&lt;/code&gt;, which contains the domain name to be verified and &lt;code&gt;CERTBOT_VALIDATION&lt;/code&gt;, which includes a random string corresponding to &lt;code&gt;_acme-challenge TXT&lt;/code&gt; entry. What this means is that, if I have&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;CERTBOT_DOMAIN=yashagarwal.in
CERTBOT_VALIDATION=6VNg5kDVI_BF1S9N5s74LTBHQnwDpQqKlblKRjIzBwM&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then the DNS manager should contain a TXT entry &lt;code&gt;_acme-challenge.yashagarwal.in&lt;/code&gt; with the value of &lt;code&gt;6VNg5kDVI_BF1S9N5s74LTBHQnwDpQqKlblKRjIzBwM&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;auth_hook.sh&lt;/code&gt; file calls the Go client with the abovementioned environment variables. The relevant code can be found &lt;a href=&#34;https://github.com/yashhere/GoDaddy-GitLab-Certs/blob/master/auth_hook.sh&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once all the DNS entries are added, the &lt;code&gt;auth_hook.sh&lt;/code&gt; script will sleep for 10 minutes. It is to allow DNS changes to propagate throughout the Internet. It is a random duration as I could not find any GoDaddy support page mentioning the exact period used by them.&lt;/p&gt;
&lt;h3 id=&#34;step-3-generation-of-certificates&#34;&gt;Step 3: Generation of certificates&lt;/h3&gt;
&lt;p&gt;Once the &lt;code&gt;auth_hook.sh&lt;/code&gt; script returns successfully, &lt;code&gt;certbot&lt;/code&gt; will verify the DNS records. If the verification is successful, &lt;code&gt;certbot&lt;/code&gt; will generate the certificates in &lt;code&gt;./generated/config/live/{CERTBOT_DOMAIN}&lt;/code&gt; directory.&lt;/p&gt;
&lt;h3 id=&#34;step-4-deploying-the-certificates-to-gitlab&#34;&gt;Step 4: Deploying the certificates to GitLab&lt;/h3&gt;
&lt;p&gt;I use the following command to deploy the certificates to Gitlab pages where my website is hosted -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl  -vvv &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --request PUT &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --header &lt;span class=&#34;s2&#34;&gt;&amp;#34;Private-Token:&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;GITLAB_TOKEN&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --form &lt;span class=&#34;s2&#34;&gt;&amp;#34;certificate=@&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;key_dir&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/fullchain.pem&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      --form &lt;span class=&#34;s2&#34;&gt;&amp;#34;key=@&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;key_dir&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/privkey.pem&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\ &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;https://gitlab.com/api/v4/projects/yashhere%2Fyashhere.gitlab.io/pages/domains/yashagarwal.in&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;where&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nv&#34;&gt;key_dir&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;./generated/config/live/yashagarwal.in&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Moreover, &lt;code&gt;GITLAB_TOKEN&lt;/code&gt; is an environment variable that contains the API token generated from the Gitlab settings page.&lt;/p&gt;
&lt;h2 id=&#34;automatic-deployment-using-travis-ci&#34;&gt;Automatic Deployment using Travis CI&lt;/h2&gt;
&lt;p&gt;It is not automation if I have to run this script manually every three months. So I created a Travis CI job to automate this process. The job will run every month and deploy my certificates automatically. It has been four months, and I have not faced any issues with this setup.&lt;/p&gt;
&lt;p&gt;The code for this post can be viewed at &lt;a href=&#34;https://github.com/yashhere/GoDaddy-GitLab-Certs&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks for reading. Cheers 😄&lt;/p&gt;
</description>
                
                        <author>Yash.Agarwal@fakeEmailToMakeValidatorHappy.com (Yash Agarwal)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://yashagarwal.in/categories/technical">Technical</category>
                                
                            
                        
                     
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://yashagarwal.in/tags/linux">Linux</category>
                                
                            
                        
                    
                
                <guid>https://yashagarwal.in/posts/2019/07/automatic-https-certs-using-godaddy-and-gitlab-apis/</guid>
                <pubDate>Tue, 23 Jul 2019 16:40:28 +0530</pubDate>
            </item>
        
            
            <item>
                <title>Setting Up ModSecurity on Ubuntu</title>
                <link>https://yashagarwal.in/posts/2019/07/setting-up-modsecurity-on-ubuntu/</link>
                
                
                <description>&lt;p&gt;Recently, I am experimenting with Web Application Firewalls a lot. ModSecurity is one of them. It is the most famous and useful open-source Web Application Firewall (WAF) in existence. It is supported by various web servers such as Apache, Nginx, and IIS.&lt;/p&gt;
&lt;p&gt;The job of ModSecurity is to sit in front of the application web server and check the incoming requests and outgoing responses to filter out malicious content. It does so by the use of powerful and complex regular expressions. ModSecurity uses a rule language for its rules. The rule language has variables and operators defined to aid in the process of parsing HTTP requests.&lt;/p&gt;
&lt;p&gt;ModSecurity, in itself, cannot block or allow requests. It is just a rule engine. It requires rules to operate appropriately. That&amp;rsquo;s where its sister project, Core Rule Set (CRS), comes into the picture. CRS is a rule set developed to be used with ModSecurity. It has been in active development for several years now and is very mature. Together, ModSecurity and CRS form a formidable defense against the widespread web application attacks.&lt;/p&gt;
&lt;p&gt;Now that you know, what a WAF is, let&amp;rsquo;s proceed to install ModSecurity on Ubuntu. I will be compiling ModSecurity&amp;rsquo;s latest version on Ubuntu 18.04. We will also configure ModSecurity to use Core Rule Set.&lt;/p&gt;
&lt;h2 id=&#34;installing-dependencies&#34;&gt;Installing Dependencies&lt;/h2&gt;
&lt;p&gt;ModSecurity requires some dependencies to work correctly. Let&amp;rsquo;s install them -&lt;/p&gt;
&lt;p&gt;First, upgrade the Ubuntu system.&lt;/p&gt;
&lt;div class=&#34;highlight-wrapper&#34;&gt;
    &lt;div class=&#34;highlight-before&#34;&gt;bash&lt;/div&gt;
    
        &lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo apt-get -y update
sudo apt-get -y upgrade&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    
&lt;/div&gt;
&lt;p&gt;Now install the dependencies.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo apt-get -y install git libtool dh-autoreconf pkgconf gawk libcurl4-gnutls-dev libexpat1-dev libpcre3-dev libssl-dev libxml2-dev libyajl-dev zlibc zlib1g-dev libxml2 libpcre++-dev libxml2-dev libgeoip-dev liblmdb-dev lua5.2-dev iputils-ping locales apache2 apache2-dev ca-certificates wget&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Optional&lt;/em&gt;: clean up the Ubuntu caches.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo apt-get clean &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo rm -rf /var/lib/apt/lists/*&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Install &lt;code&gt;SSDeep&lt;/code&gt; as well (as done &lt;a href=&#34;https://github.com/CRS-support/modsecurity-docker/blob/v3/apache-apache/Dockerfile&#34;&gt;here&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~
git clone https://github.com/ssdeep-project/ssdeep
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ssdeep
./bootstrap
./configure
make
sudo make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;compiling-modsecurity&#34;&gt;Compiling ModSecurity&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s clone ModSecurity from Github.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~
git clone -b v3/master --single-branch https://github.com/SpiderLabs/ModSecurity
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ModSecurity
git submodule init
git submodule update
./build.sh
./configure
make                &lt;span class=&#34;c1&#34;&gt;# takes ~8 minutes on AWS t2.micro&lt;/span&gt;
sudo make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;compiling-modsecurity-apache-connector&#34;&gt;Compiling ModSecurity-apache connector&lt;/h2&gt;
&lt;p&gt;To configure it with Apache, we will require ModSecurity-apache connector. Let&amp;rsquo;s install that as well.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~
git clone https://github.com/SpiderLabs/ModSecurity-apache
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ModSecurity-apache
./autogen.sh
./configure --with-libmodsecurity&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/usr/local/modsecurity
make
sudo make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;setting-up-crs-rules&#34;&gt;Setting up CRS rules&lt;/h2&gt;
&lt;p&gt;Now, let&amp;rsquo;s download CRS rule set as well.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~
git clone -b v3.2/dev https://github.com/SpiderLabs/owasp-modsecurity-crs
sudo mv owasp-modsecurity-crs/ /usr/local/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Rename CRS configuration file -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo mv /usr/local/owasp-modsecurity-crs/crs-setup.conf.example /usr/local/owasp-modsecurity-crs/crs-setup.conf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;setting-up-modsecurity&#34;&gt;Setting up ModSecurity&lt;/h2&gt;
&lt;p&gt;Now, we need to create a file in the Apache modules directory, so that Apache can know, how to activate ModSecurity.&lt;/p&gt;
&lt;p&gt;Create &lt;code&gt;/etc/apache2/mods-enabled/security3.conf&lt;/code&gt; file and paste the following contents -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;LoadModule security3_module /usr/lib/apache2/modules/mod_security3.so
modsecurity on
modsecurity_rules_file &lt;span class=&#34;s1&#34;&gt;&amp;#39;/etc/apache2/modsec/main.conf&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, the last line in the above code block reference a file &lt;code&gt;main.conf&lt;/code&gt; in a folder &lt;code&gt;modsec&lt;/code&gt;. This folder will not be present by default. We need to create that.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo mkdir -p /etc/apache2/modsec&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Setup ModSecurity configuration file -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# enables Unicode support in ModSecurity&lt;/span&gt;
sudo wget -P /etc/apache2/modsec/ https://raw.githubusercontent.com/SpiderLabs/ModSecurity/v3/master/unicode.mapping

sudo wget -P /etc/apache2/modsec/ https://raw.githubusercontent.com/SpiderLabs/ModSecurity/v3/master/modsecurity.conf-recommended
sudo mv /etc/apache2/modsec/modsecurity.conf-recommended /etc/apache2/modsec/modsecurity.conf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Change the SecRuleEngine directive in the configuration to change from the default &amp;ldquo;detection only&amp;rdquo; mode to actively dropping malicious traffic.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo sed -i &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/SecRuleEngine DetectionOnly/SecRuleEngine On/&amp;#39;&lt;/span&gt; /etc/apache2/modsec/modsecurity.conf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Change the location of &lt;code&gt;modsec_audit.log&lt;/code&gt; file to Apache log directory.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo sed -i &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/SecAuditLog \/var\/log\/modsec_audit.log/SecAuditLog \/var\/log\/apache2\/modsec_audit.log/&amp;#39;&lt;/span&gt; /etc/apache2/modsec/modsecurity.conf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To configure ModSecurity to use CRS rule set, put the following text in &lt;code&gt;/etc/apache2/modsec/main.conf&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Include &lt;span class=&#34;s2&#34;&gt;&amp;#34;/etc/apache2/modsec/modsecurity.conf&amp;#34;&lt;/span&gt;
Include &lt;span class=&#34;s2&#34;&gt;&amp;#34;/usr/local/owasp-modsecurity-crs/crs-setup.conf&amp;#34;&lt;/span&gt;
Include &lt;span class=&#34;s2&#34;&gt;&amp;#34;/usr/local/owasp-modsecurity-crs/rules/*.conf&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Also enable some Apache modules for better functioning of ModSecurity.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo a2enmod unique_id headers rewrite actions dav dav_fs&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now restart the Apache server&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo systemctl restart apache2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;fixing-some-common-issues&#34;&gt;Fixing some common issues&lt;/h2&gt;
&lt;p&gt;Sometimes, I had encountered errors when ModSecurity was not able to append logs to its log file. I figured out that ModSecurity did not have enough permissions to write that file. We can fix this issue quickly.&lt;/p&gt;
&lt;p&gt;First, test if you really have this issue or not.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl &lt;span class=&#34;s1&#34;&gt;&amp;#39;http://localhost/?q=&amp;#34;&amp;gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&amp;#39;&lt;/span&gt;
&amp;lt;!DOCTYPE HTML PUBLIC &lt;span class=&#34;s2&#34;&gt;&amp;#34;-//IETF//DTD HTML 2.0//EN&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;403 Forbidden&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Forbidden&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;You dont have permission to access / on this server.&amp;lt;br /&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;hr&amp;gt;
&amp;lt;address&amp;gt;Apache/2.4.29 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Ubuntu&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; Server at localhost Port 80&amp;lt;/address&amp;gt;
&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now go to Apache log directory and check the contents of &lt;code&gt;modsec_audit.log&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; /var/log/apache2
tail modsec_audit.log&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should see the following content -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;---0LzdyETA---A--
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;01/Jul/2019:14:42:41 +0000&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; 156199216179.666171 127.0.0.1 &lt;span class=&#34;m&#34;&gt;41824&lt;/span&gt; ip-xxx-xx-xx-xx.ap-south-1.compute.internal &lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;
---0LzdyETA---B--
GET /?q&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt; HTTP/1.1
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;Host: localhost
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;User-Agent: curl/7.58.0
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;Accept: */*
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;---TqjMwy7h---D--
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;---TqjMwy7h---F--
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;HTTP/1.1 403
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;---TqjMwy7h---H--
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;ModSecurity: Warning. detected XSS using libinjection. [file &amp;#34;&lt;/span&gt;/usr/local/owasp-modsecurity-crs/rules/REQUEST-941-APPLICATION-ATTACK-XSS.conf&lt;span class=&#34;s2&#34;&gt;&amp;#34;] [line &amp;#34;&lt;/span&gt;37&lt;span class=&#34;s2&#34;&gt;&amp;#34;] [id &amp;#34;&lt;/span&gt;941100&lt;span class=&#34;s2&#34;&gt;&amp;#34;] [rev &amp;#34;&amp;#34;] [msg &amp;#34;&lt;/span&gt;XSS Attack Detected via libinjection&lt;span class=&#34;s2&#34;&gt;&amp;#34;] [data &amp;#34;&lt;/span&gt;Matched Data: XSS data found within ARGS:q: &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;severity &lt;span class=&#34;s2&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;ver &lt;span class=&#34;s2&#34;&gt;&amp;#34;OWASP_CRS/3.1.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;maturity &lt;span class=&#34;s2&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;accuracy &lt;span class=&#34;s2&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;tag &lt;span class=&#34;s2&#34;&gt;&amp;#34;application-multi&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;tag &lt;span class=&#34;s2&#34;&gt;&amp;#34;language-multi&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;tag &lt;span class=&#34;s2&#34;&gt;&amp;#34;platform-multi&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;tag &lt;span class=&#34;s2&#34;&gt;&amp;#34;attack-xss&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;tag &lt;span class=&#34;s2&#34;&gt;&amp;#34;OWASP_CRS/WEB_ATTACK/XSS&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;tag &lt;span class=&#34;s2&#34;&gt;&amp;#34;WASCTC/WASC-8&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;tag &lt;span class=&#34;s2&#34;&gt;&amp;#34;WASCTC/WASC-22&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;tag &lt;span class=&#34;s2&#34;&gt;&amp;#34;OWASP_TOP_10/A3&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;tag &lt;span class=&#34;s2&#34;&gt;&amp;#34;OWASP_AppSensor/IE1&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;tag &lt;span class=&#34;s2&#34;&gt;&amp;#34;CAPEC-242&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;hostname &lt;span class=&#34;s2&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;uri &lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;unique_id &lt;span class=&#34;s2&#34;&gt;&amp;#34;156198848361.198287&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;ref &lt;span class=&#34;s2&#34;&gt;&amp;#34;v8,27t:utf8toUnicode,t:urlDecodeUni,t:htmlEntityDecode,t:jsDecode,t:cssDecode,t:removeNulls&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
....
....

---TqjMwy7h---I--

---TqjMwy7h---J--

---TqjMwy7h---Z--&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you do not see the following content, and the file is empty or it does not exist, then ModSecurity was not able to open this file for writing. Use the following fix -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# find out the user, Apache is running as&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;apache_user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;ps -ef &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; egrep &lt;span class=&#34;s1&#34;&gt;&amp;#39;(httpd|apache2|apache)&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -v &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;whoami&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -v root &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; head -n1 &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; awk &lt;span class=&#34;s1&#34;&gt;&amp;#39;{print $1}&amp;#39;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, change the owner of Apache log directory to &lt;code&gt;apache_user&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo chown -R &lt;span class=&#34;nv&#34;&gt;$apache_user&lt;/span&gt;:&lt;span class=&#34;nv&#34;&gt;$apache_user&lt;/span&gt; /var/log/apache2/*&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, ModSecurity should be able to append logs to the file &lt;code&gt;modsec_audit.log&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;bonus-enabling-json-logs&#34;&gt;&lt;em&gt;Bonus&lt;/em&gt;: Enabling JSON logs&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Honestly speaking, I was not able to make it work every time. I do not know what is the issue, but it works with some of the installations, and with some of the installations, it just doesn&amp;rsquo;t log anything to the &lt;code&gt;audit&lt;/code&gt; directory. If anyone has managed to make it work consistently, please let me know.&lt;/p&gt;
&lt;p&gt;Anyway, if you are like me, who do not like the default ModSecurity log format, ModSecurity provides an option to generate logs in JSON format as well. To enable JSON support, the YAJL library should be installed. We already installed this package when we were installing dependencies, so our ModSecurity setup is compiled with JSON support. Let us now configure ModSecurity to generate JSON logs.&lt;/p&gt;
&lt;p&gt;Open the &lt;code&gt;/etc/apache2/modsec/modsecurity.conf&lt;/code&gt; file and find the following lines -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;SecAuditLogType           Serial
SecAuditLog               /var/log/modsec_audit.log&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once you have found the following lines, replace these lines with the following lines&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;SecAuditLogFormat         JSON
SecAuditLogType           Parallel
SecAuditLog               /var/log/apache2/modsec_audit.log
SecAuditLogStorageDir     /var/log/apache2/audit/

SecAuditLogFileMode       &lt;span class=&#34;m&#34;&gt;0644&lt;/span&gt;
SecAuditLogDirMode        &lt;span class=&#34;m&#34;&gt;0755&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Restart Apache server&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo systemctl restart apache2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, go to &lt;code&gt;/var/log/apache2/&lt;/code&gt; directory and create &lt;code&gt;audit&lt;/code&gt; folder.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; /var/log/apache2
sudo mkdir audit

&lt;span class=&#34;c1&#34;&gt;# make `apache_user` owner of this directory as well...&lt;/span&gt;
sudo chown -R &lt;span class=&#34;nv&#34;&gt;$apache_user&lt;/span&gt;:&lt;span class=&#34;nv&#34;&gt;$apache_user&lt;/span&gt; /var/log/apache2/audit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, ModSecurity should be able to generate JSON logs in this directory. ModSecurity generates logs in the following format -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;ubuntu@server:/var/log/apache2$ tree audit
audit
└── 20190701
    ├── 20190701-1132
    │   ├── 20190701-113225-156196094515.868593
    │   └── 20190701-113226-156196094691.154769
    ├── 20190701-1211
    │   ├── 20190701-121122-156196328239.048942
    │   └── 20190701-121122-156196328243.018882

    ....
    ....&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, your site should be relatively more secure than before.&lt;/p&gt;
&lt;h2 id=&#34;a-warning-though&#34;&gt;A warning, though&lt;/h2&gt;
&lt;p&gt;CRS is known to generate a lot of false-positive when enabled completely. We have not touched CRS paranoia levels. By default, it is set to paranoia level 1, which is known to produce false positives rarely, but still, as a measure of precaution, monitor your site&amp;rsquo;s traffic for some time, and then decide if you need to disable some of the CRS rules or not.&lt;/p&gt;
</description>
                
                        <author>Yash.Agarwal@fakeEmailToMakeValidatorHappy.com (Yash Agarwal)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://yashagarwal.in/categories/technical">Technical</category>
                                
                            
                        
                     
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://yashagarwal.in/tags/linux">Linux</category>
                                
                            
                        
                    
                
                <guid>https://yashagarwal.in/posts/2019/07/setting-up-modsecurity-on-ubuntu/</guid>
                <pubDate>Mon, 01 Jul 2019 18:20:18 +0530</pubDate>
            </item>
        
            
            <item>
                <title>Go &#43; gRPC &#43; OPA - A Perfect Union - Part 3</title>
                <link>https://yashagarwal.in/posts/2019/02/go-grpc-opa-a-perfect-union-part-3/</link>
                
                
                <description>&lt;p&gt;I finished my last &lt;a href=&#34;https://yashagarwal.in/posts/2019/02/go-grpc-opa-a-perfect-union-part-2/&#34;&gt;post&lt;/a&gt; with the following issue -&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Now, here one problem arises, how to make sure that the search results will not return any book which the user is not
authorized to access. We will solve this problem using OPA in the next and last post of this series.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s solve this issue now. We will use OPA&amp;rsquo;s declarative language, Rego, to implement policies which will decide on the
basis of some user-provided data, which all objects are to be returned to the user.&lt;/p&gt;
&lt;p&gt;We will also define a list of all the users who are part of this library. Here we are hardcoding this data, as I did
not want to waste my time in implementing a user registration service, but this functionality is not very important from
our point of view. We will require only one field from this users data - the &lt;code&gt;user_type&lt;/code&gt; field. This field will
determine what the access level for the user is. We have already added the &lt;code&gt;access_level&lt;/code&gt; field in the &lt;code&gt;Book&lt;/code&gt; definition
of our proto file.&lt;/p&gt;
&lt;p&gt;When the user wants to search for a particular book, it will provide its &lt;code&gt;user_type&lt;/code&gt; the ISBN of the book to our service. Our service
will take that ISBN and pass it to the OPA server. OPA server already has the &lt;code&gt;Book&lt;/code&gt; data and the &lt;code&gt;User&lt;/code&gt; data. Now it has
the required ISBN to query the Book data. The Rego policy will query the Book data by ISBN. It will also
check for the &lt;code&gt;access_level&lt;/code&gt; condition. Moreover, after this operation, it will return the resultant set of books that satisfy both the requirements.&lt;/p&gt;
&lt;p&gt;Here is the Rego policy -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;n&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;library&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;books&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;users&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;search_books&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;book&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;book&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isbn&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;books&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isbn&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;books&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;access_level&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;book&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;books&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;list_all_books&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;books&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;books&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;access_level&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The user data is &lt;a href=&#34;https://github.com/yashhere/go-library-service/blob/master/OPA/users.json&#34;&gt;here&lt;/a&gt; and the book data is &lt;a href=&#34;https://github.com/yashhere/go-library-service/blob/master/add_books.sh&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A sample &lt;code&gt;input&lt;/code&gt; request is shown below -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;book&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;isbn&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;1128959038&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;user_type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;input&lt;/code&gt; is the data that the user is providing. In &lt;code&gt;search_books&lt;/code&gt; function, the input ISBN is matched with the ISBN
of all books one by one. Then the resultant set of books is filtered by &lt;code&gt;user_type&lt;/code&gt; and &lt;code&gt;access_level&lt;/code&gt; (these
two fields are essentially the same). In the last, the resultant set of books is assigned to the variable &lt;code&gt;book&lt;/code&gt; which
will be returned to the gRPC service.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;list_all_books&lt;/code&gt; function is implemented similarly. The only difference is that we do not need to filter the books
by ISBN. Filtering by &lt;code&gt;access_level&lt;/code&gt; is enough.&lt;/p&gt;
&lt;p&gt;Now our library service is completed. It is a very basic service. The intention was to show that the decision-making process can be offloaded to the OPA to reduce the complexity of the services. In this example, the advantages might not
be obvious, but in large production environments, where many services are running, it can make a significant
difference.&lt;/p&gt;
&lt;p&gt;The code for this series can be found on my &lt;a href=&#34;https://github.com/yashhere/go-library-service&#34;&gt;Github&lt;/a&gt; account.&lt;/p&gt;
&lt;p&gt;I hope you liked the article. Share your views and suggestions in the comments.&lt;/p&gt;
&lt;p&gt;Thanks for reading. Cheers :)&lt;/p&gt;
</description>
                
                        <author>Yash.Agarwal@fakeEmailToMakeValidatorHappy.com (Yash Agarwal)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://yashagarwal.in/categories/technical">Technical</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://yashagarwal.in/series/go-&#43;-grpc-&#43;-opa">Go &#43; gRPC &#43; OPA</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://yashagarwal.in/tags/grpc">GRPC</category>
                                 
                                    <category domain="https://yashagarwal.in/tags/opa">OPA</category>
                                
                            
                        
                    
                
                <guid>https://yashagarwal.in/posts/2019/02/go-grpc-opa-a-perfect-union-part-3/</guid>
                <pubDate>Mon, 18 Feb 2019 06:47:15 +0530</pubDate>
            </item>
        
            
            <item>
                <title>Go &#43; gRPC &#43; OPA - A Perfect Union - Part 2</title>
                <link>https://yashagarwal.in/posts/2019/02/go-grpc-opa-a-perfect-union-part-2/</link>
                
                
                <description>



    

    
    

    
    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe.min.css&#34; integrity=&#34;sha256-sCl5PUOGMLfFYctzDW3MtRib0ctyUvI9Qsmq2wXOeBY=&#34; crossorigin=&#34;anonymous&#34; /&gt;
    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/default-skin/default-skin.min.css&#34; integrity=&#34;sha256-BFeI1V+Vh1Rk37wswuOYn5lsTcaU96hGaI7OUVCLjPc=&#34; crossorigin=&#34;anonymous&#34; /&gt;

    
    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://yashagarwal.in/css/photoswipe.min.d780348a887d97b4d6cc664301a2941706e4a02aeb1533524fcce3b7b9b64b4f.css&#34;&gt;

    

    
    &lt;div class=&#34;pswp&#34; tabindex=&#34;-1&#34; role=&#34;dialog&#34; aria-hidden=&#34;true&#34;&gt;
        
        &lt;div class=&#34;pswp__bg&#34;&gt;&lt;/div&gt;
        
        &lt;div class=&#34;pswp__scroll-wrap&#34;&gt;
            
            &lt;div class=&#34;pswp__container&#34;&gt;
                &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
                &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
                &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            
            &lt;div class=&#34;pswp__ui pswp__ui--hidden&#34;&gt;
                &lt;div class=&#34;pswp__top-bar&#34;&gt;
                    
                    &lt;div class=&#34;pswp__counter&#34;&gt;&lt;/div&gt;
                    &lt;button class=&#34;pswp__button pswp__button--close&#34; title=&#34;Close (Esc)&#34;&gt;&lt;/button&gt;
                    &lt;button class=&#34;pswp__button pswp__button--share&#34; title=&#34;Share&#34;&gt;&lt;/button&gt;
                    &lt;button class=&#34;pswp__button pswp__button--fs&#34; title=&#34;Toggle fullscreen&#34;&gt;&lt;/button&gt;
                    &lt;button class=&#34;pswp__button pswp__button--zoom&#34; title=&#34;Zoom in/out&#34;&gt;&lt;/button&gt;
                    
                    
                    &lt;div class=&#34;pswp__preloader&#34;&gt;
                        &lt;div class=&#34;pswp__preloader__icn&#34;&gt;
                            &lt;div class=&#34;pswp__preloader__cut&#34;&gt;
                                &lt;div class=&#34;pswp__preloader__donut&#34;&gt;&lt;/div&gt;
                            &lt;/div&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
                &lt;div class=&#34;pswp__share-modal pswp__share-modal--hidden pswp__single-tap&#34;&gt;
                    &lt;div class=&#34;pswp__share-tooltip&#34;&gt;&lt;/div&gt;
                &lt;/div&gt;
                &lt;button class=&#34;pswp__button pswp__button--arrow--left&#34; title=&#34;Previous (arrow left)&#34;&gt;
                &lt;/button&gt;
                &lt;button class=&#34;pswp__button pswp__button--arrow--right&#34; title=&#34;Next (arrow right)&#34;&gt;
                &lt;/button&gt;
                &lt;div class=&#34;pswp__caption&#34;&gt;
                    &lt;div class=&#34;pswp__caption__center&#34;&gt;&lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;

&lt;p&gt;In the last &lt;a href=&#34;https://yashagarwal.in/posts/2019/02/go-grpc-opa-a-perfect-union-part-1/&#34;&gt;post&lt;/a&gt;, we discussed about the structure of our library
application. In this post, we will define the data definitions using protobuf, and then we will use these definitions to
create a Go service. We will also add a REST interface to the service. So let&amp;rsquo;s get started.&lt;/p&gt;
&lt;h2 id=&#34;defining-proto-definitions&#34;&gt;Defining Proto Definitions&lt;/h2&gt;
&lt;p&gt;gRPC uses protocol buffers for serializing structured data. To define the structure of the data that you want to serialize, we use a &lt;em&gt;proto&lt;/em&gt; file - it is a simple text file that contains all the logical pieces of your data in the form of &lt;em&gt;messages&lt;/em&gt;, and the methods that will be called over the network. To know more about the syntax of proto files, visit &lt;a href=&#34;https://grpc.io/docs/guides/&#34;&gt;this&lt;/a&gt; link.&lt;/p&gt;
&lt;p&gt;I have defined the following proto file -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-proto&#34; data-lang=&#34;proto&#34;&gt;&lt;span class=&#34;n&#34;&gt;syntax&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;proto3&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;google/api/annotations.proto&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;service&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LibraryService&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;rpc&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ListAllBooks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QueryFormat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Books&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;option&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;google.api.http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;n&#34;&gt;post&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/listBooks&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;n&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;rpc&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AddBook&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QueryFormat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;option&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;google.api.http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;n&#34;&gt;post&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/addBook&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;n&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;rpc&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SearchBook&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QueryFormat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;option&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;google.api.http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;n&#34;&gt;post&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/searchBook&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;      &lt;span class=&#34;n&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// the library
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Library&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Books&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;books&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Books&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;repeated&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Book&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;books&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// metadata about a book
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Book&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;author&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;isbn&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;int32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;no_of_copies&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;int32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;access_level&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// details about a user
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kd&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UserType&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// https://github.com/golang/protobuf/issues/258
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;GARBAGE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;Student&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;Administration&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;Faculty&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;int32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id_no&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;UserType&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;user_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;QueryFormat&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;Book&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;book&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Response&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;action&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;int32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;status&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;oneof&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;Book&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;book&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;user_data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Empty&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To compile it, run the following commands -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;protoc -I/usr/local/include -I. &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-I&lt;span class=&#34;nv&#34;&gt;$GOPATH&lt;/span&gt;/src &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;-I&lt;span class=&#34;nv&#34;&gt;$GOPATH&lt;/span&gt;/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--go_out&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;plugins&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;grpc:. &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;api/library.proto&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;protoc -I/usr/local/include -I. &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -I&lt;span class=&#34;nv&#34;&gt;$GOPATH&lt;/span&gt;/src &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -I&lt;span class=&#34;nv&#34;&gt;$GOPATH&lt;/span&gt;/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --grpc-gateway_out&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;logtostderr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;true:. &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  api/library.proto&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It will generate corresponding Golang definitions of the messages and services defined in the Proto file. These
definitions can be used by the server and client stubs to communicate with each other.&lt;/p&gt;
&lt;h2 id=&#34;implementation-of-go-service&#34;&gt;Implementation of Go service&lt;/h2&gt;
&lt;p&gt;Now we can start implementing the code for our services &lt;code&gt;AddBook()&lt;/code&gt;, &lt;code&gt;ListAllBooks()&lt;/code&gt; and &lt;code&gt;SearchBook()&lt;/code&gt;. It is going to
be a very naive implementation of a library system, but it will be sufficient to learn all the concepts.&lt;/p&gt;
&lt;p&gt;My implementation of the server stub is hosted
&lt;a href=&#34;https://github.com/yashhere/go-library-service/blob/master/pkg/librarylib/server.go&#34;&gt;here&lt;/a&gt;. A basic flow diagram of
this implementation will look like this -&lt;/p&gt;



    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://yashagarwal.in/css/hugo-easy-gallery.css&#34;&gt;
    


&lt;div class=&#34;box fancy-figure caption-position-bottom caption-effect-appear&#34; style=&#34;max-width:650px&#34; itemscope itemtype=&#34;http://schema.org/ImageGallery&#34;&gt;
    &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
        &lt;div class=&#34;img&#34;&gt;
            &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://yashagarwal.in/images/2019-02-17/OPA_Service_Flow_Diagram.jpeg#center&#34; alt=&#34;Architecture&#34;/&gt;
        &lt;/div&gt;
        &lt;a href=&#34;https://yashagarwal.in/images/2019-02-17/OPA_Service_Flow_Diagram.jpeg#center&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;The gRPC server will listen on port &lt;code&gt;:50051&lt;/code&gt;, and a REST HTTP server will listen on port &lt;code&gt;:8181&lt;/code&gt;. The OPA server is
running on port &lt;code&gt;:8182&lt;/code&gt;. The REST server is
implemented using &lt;a href=&#34;https://github.com/grpc-ecosystem/grpc-gateway&#34;&gt;gRPC-Gateway&lt;/a&gt;. There are three methods - &lt;code&gt;AddBook()&lt;/code&gt;,
&lt;code&gt;ListAllBooks()&lt;/code&gt;, and &lt;code&gt;SearchBook()&lt;/code&gt;. These methods can be called using either gRPC methods or using the REST endpoints
&lt;code&gt;/addBook&lt;/code&gt;, &lt;code&gt;/listBooks&lt;/code&gt; and &lt;code&gt;/searchBook&lt;/code&gt;. By design, the library gRPC service will not implement the authentication
part of the service. The main purpose of using gRPC here is to provide a scalable and secure medium where all the
communication between client and server is happening in binary format, which is slightly more secure than the
traditional mediums. In the current form, this gRPC server will accept requests from everyone and execute the desired
functions. That is not desirable. What if a student tries to add a book to the library. Only Admins should be allowed to
execute such functions. What if someone who is not a student of the University tries to access the service. How to stop
them?&lt;/p&gt;
&lt;p&gt;There are two steps to solve this issue -&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Authentication&lt;/strong&gt; - It mainly deals with the question - who are you? It is a way to gain access to the system by verifying your identity. In our case, a user will provide its username and password to access the library service.
Without this authentication, the user will not be able to access the system. We will not be implementing authentication
functionality in our application.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Authorization&lt;/strong&gt; - It deals with the question - which resources are you allowed to use? OPA can be used here to define various rights based on the access levels of the users.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you have noticed, I have defined an &lt;code&gt;access_level&lt;/code&gt; field in the proto definition of the &lt;code&gt;Book&lt;/code&gt;. This field will tell
us what is the minimum access level required for a user to access this book.&lt;/p&gt;
&lt;p&gt;Again, in the proto definition of the &lt;code&gt;User&lt;/code&gt;, I have defined a &lt;code&gt;user_type&lt;/code&gt; field. This field will serve as an indicator of
the access rights of the user. In the real world, these access rights will be decided after the user has authenticated
herself to
the system, but here, we will hardcode the access rights.&lt;/p&gt;
&lt;p&gt;So, only users with access rights equal to &lt;code&gt;Administration&lt;/code&gt; will be allowed to add books to the system. Here we do not
care who the user is. If the user is supplying the correct access right, she will be allowed to operate.
The authentication logic in real-world scenarios will determine the &lt;em&gt;who&lt;/em&gt; part.&lt;/p&gt;
&lt;p&gt;There are some books in the library, which have access rights equal to that of a &lt;code&gt;Faculty&lt;/code&gt;. It means that only faculties
will be allowed to access those books. The students will not be able to access these books, even while searching for
books using ISBN. This kind of mechanism can be implemented using OPA very quickly. We will see the implementation of the OPA
part in the next post.&lt;/p&gt;
&lt;p&gt;While querying the service, users are required to supply their identity (at least &lt;code&gt;user_type&lt;/code&gt;) and the book ISBN if
they are searching for some book. The administrators are supposed to provide the name, author, access level, number of copies, and ISBN while adding the books. I have not added the error checking functionality in the code, but it should be
easy enough to implement such functionality.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/yashhere/go-library-service/blob/master/cmd/main.go&#34;&gt;main.go&lt;/a&gt; file is the starting point of this service. It will spawn two servers in two Go Routines. Ideally, some synchronization mechanisms should be implemented in the code to avoid race conditions in some cases - for example, what will happen if two or more clients are trying to add the same book simultaneously. Here in our case, nothing serious
will happen, as OPA will take only one book per ISBN, and discard all the other books with the same ISBN even if the other
metadata is different (I designed the service in this way to keep the code easy enough to understand), but if there are
other operations like DeleteBook and IssueBook, then the race conditions can cause issues.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;AddBook()&lt;/code&gt; function, the user provided book details will be sent to the OPA server using a REST call. OPA will
store this information in its in-memory store at a unique place determined by the ISBN of the book. In actual cases, the data should be stored in some persistent
storage, such as a DB. OPA will take the information from the DB. Again, to keep the implementation easy enough to
understand, we are not using any such persistent storage. If any other book with different metadata but the same ISBN comes,
then OPA will overwrite the existing book with the new one.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;SearchBook()&lt;/code&gt; function, the user will provide the ISBN of the desired book. The gRPC service will call
the OPA using REST API and find if any such book exists or not.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ListAllBooks()&lt;/code&gt; is different in the way that it does not need any ISBN.&lt;/p&gt;
&lt;p&gt;Now, here one problem arises, how to make sure that the search results will not return any book which the user is not
authorized to access. We will solve this problem using OPA in the next and last post of this series.&lt;/p&gt;
&lt;p&gt;I hope that this post was helpful. If you have any doubts or want to say anything else, please comment. It will be a great
motivation and appreciation for me.&lt;/p&gt;
&lt;p&gt;Thanks for reading. Cheers 😄&lt;/p&gt;
</description>
                
                        <author>Yash.Agarwal@fakeEmailToMakeValidatorHappy.com (Yash Agarwal)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://yashagarwal.in/categories/technical">Technical</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://yashagarwal.in/series/go-&#43;-grpc-&#43;-opa">Go &#43; gRPC &#43; OPA</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://yashagarwal.in/tags/grpc">GRPC</category>
                                 
                                    <category domain="https://yashagarwal.in/tags/opa">OPA</category>
                                
                            
                        
                    
                
                <guid>https://yashagarwal.in/posts/2019/02/go-grpc-opa-a-perfect-union-part-2/</guid>
                <pubDate>Sun, 17 Feb 2019 14:44:56 +0530</pubDate>
            </item>
        
            
            <item>
                <title>Go &#43; gRPC &#43; OPA - A Perfect Union - Part 1</title>
                <link>https://yashagarwal.in/posts/2019/02/go-grpc-opa-a-perfect-union-part-1/</link>
                
                
                <description>&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; &amp;ndash; In a series of blog posts, I will be implementing a simple library application supporting both gRPC and REST interfaces using Go, gRPC, and
OPA. My approach might not be the most optimal one, but I am learning these technologies currently. Please give your
valuable suggestions and be kind :)&lt;/p&gt;
&lt;p&gt;I have been learning the basics of microservices and Golang lately. On the work front, I got a chance to work on Go, gRPC, and Open
Policy Agent as my first professional project. In this post, I will be demonstrating what I learned in the last few months.
We will be implementing a simple gRPC based library service, which will be able to serve
requests using both gRPC and REST calls. It will also incorporate the Open Policy Agent (OPA) to provide the authorization
to users. Let&amp;rsquo;s begin with a quick introduction to gRPC and OPA.&lt;/p&gt;
&lt;h2 id=&#34;grpc&#34;&gt;gRPC&lt;/h2&gt;
&lt;p&gt;gRPC is Google&amp;rsquo;s implementation for Remote Procedure Calls(RPC). RPC is mainly used in building scalable distributed systems. While REST has a limited set of verbs, RPC can define any function calls, including synchronous and asynchronous calls.&lt;/p&gt;
&lt;p&gt;In gRPC, the client can make procedure calls as if the requests are made to some local function. However, the underlying client
stub (auto-generated) will send the call to the server. The server will have a similar server stub, which will be able to
handle the requests coming from the client. The server will send the response to the client using similar mechanisms
over the network. All the communication is serialized to binary format, so it is ideal for distributed systems as binary format
tends to be on the faster side for large amounts of data.&lt;/p&gt;
&lt;p&gt;For more info about gRPC, visit the official &lt;a href=&#34;https://grpc.io/&#34;&gt;website&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;open-policy-agent-opa&#34;&gt;Open Policy Agent (OPA)&lt;/h2&gt;
&lt;p&gt;OPA gives us the ability to define a fine-grained policy control mechanism. However, I think the most critical benefit of
using OPA is that it gives you the ability to decouple your services and the definition of policies from the enforcement
of it.&lt;/p&gt;
&lt;p&gt;There are mainly two parts of OPA -&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A JSON document store where you can define anything from your users, access roles,
permission levels, etc.&lt;/li&gt;
&lt;li&gt;A policy is written in a declarative language. This policy gives you new derivative data from the original JSON document store evaluated by the policy. The declarative language is called Rego, and these policies are also documents that generate results according to the defined policy. The users query these results.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This info will be sufficient for our use case. More info about it can be found at the official
&lt;a href=&#34;https://www.openpolicyagent.org/&#34;&gt;website&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;the-skeleton-of-our-application&#34;&gt;The skeleton of our Application&lt;/h2&gt;
&lt;p&gt;We will be building a command-line library application. This application will support adding, deleting, searching, issuing, and returning of
books. There are three types of users &amp;ndash; student, faculties, and staff. Not all users have a similar kind of access level. There are some books which are only reserved for students, and some are exclusively reserved for faculties and so on.&lt;/p&gt;
&lt;p&gt;I think emulating the &lt;a href=&#34;https://harrypotter.fandom.com/wiki/Hogwarts_Library&#34;&gt;library&lt;/a&gt; at Hogwarts will be a good idea here. Students and ordinary people were not allowed inside
the restricted section of the library. We will emulate that restricted section using the authorization mechanisms
provided by OPA.&lt;/p&gt;
&lt;p&gt;The gRPC protocol will handle the communications part in our app, but not everyone in Hogwarts is using gRPC. Wizards
are still in love with REST (not a bad thing, though), so we will provide them alike the REST interface to interact
with our service. We do not want to face the wrath of the wizards, after all.&lt;/p&gt;
&lt;p&gt;OPA can either be used as a standalone application or be embedded in the Go service as well. Both approaches have
their pros and cons. I have decided to use OPA as an independent service, as it will be more comfortable that way for us to push
authorization data and policies to it if such a need arises in the future.&lt;/p&gt;
&lt;p&gt;One more issue remains - where to store the added books. Shall we persist them? In practical scenarios, persistence is
always a good idea, but here I do not want to complicate things too much. We could use any Object storage servers (e.g., Minio) to
store the JSON data generated from our gRPC methods, but that will unnecessarily add complexity to our simple scenario.
Wizards do not like complicate stuff, you know!&lt;/p&gt;
&lt;p&gt;In the next posts, we will define our gRPC proto file and build the Go service around it. Then we will add a REST
interface to our service for simple CRUD operations in our application. Then we will add OPA authorization to restrict
our users from adding and viewing books which they are not supposed to access.&lt;/p&gt;
&lt;p&gt;Thank you for reading. Cheers 😊&lt;/p&gt;
</description>
                
                        <author>Yash.Agarwal@fakeEmailToMakeValidatorHappy.com (Yash Agarwal)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://yashagarwal.in/categories/technical">Technical</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://yashagarwal.in/series/go-&#43;-grpc-&#43;-opa">Go &#43; gRPC &#43; OPA</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://yashagarwal.in/tags/grpc">GRPC</category>
                                 
                                    <category domain="https://yashagarwal.in/tags/opa">OPA</category>
                                
                            
                        
                    
                
                <guid>https://yashagarwal.in/posts/2019/02/go-grpc-opa-a-perfect-union-part-1/</guid>
                <pubDate>Sun, 10 Feb 2019 14:29:08 +0530</pubDate>
            </item>
        
            
            <item>
                <title>Proxy Your Requests to the Backend Server With Grunt</title>
                <link>https://yashagarwal.in/posts/2018/05/proxy-your-requests-to-the-backend-server-with-grunt/</link>
                
                
                <description>&lt;p&gt;&lt;em&gt;This article was originally published on &lt;a href=&#34;https://www.zeolearn.com/magazine/proxy-your-requests-to-the-backend-server-with-grunt&#34;&gt;zeolearn&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you are working on large projects, it is undoubtedly a good idea to have a build script or some task scripts to help to automate some of the repetitive parts of the development process.
For JavaScript projects, &lt;code&gt;Grunt&lt;/code&gt; serves a similar purpose. It is a JavaScript task/build runner that is written on top of NodeJS. Grunt can help you with automatically minifying your JavaScript or CSS files, or reload your browser on every file change. It can show you a comprehensive list of JavaScript errors, compile your &lt;code&gt;SASS/LESS&lt;/code&gt; files into CSS files automatically, and many other things.&lt;/p&gt;
&lt;p&gt;However, the most significant advantage of Grunt that I am going to discuss today is its ability to proxy your requests. For example, when you are developing your backend with anything other than JavaScript, you will face difficulty in accessing the backend data in your frontend without having to compile and deploy the code every time you make any changes. It is not possible with a typical web server setup because &lt;a href=&#34;https://en.wikipedia.org/wiki/XMLHttpRequest&#34;&gt;XHR&lt;/a&gt; requests are not allowed to be cross-domain by browsers due to &lt;a href=&#34;https://en.wikipedia.org/wiki/Cross-origin_resource_sharing&#34;&gt;Cross-origin resource sharing&lt;/a&gt; (CORS) limitations.&lt;/p&gt;
&lt;p&gt;So, the problem here is as follows,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;you are developing the UI of your applications using some frontend JavaScript framework (say Angular) with Grunt as the build runner, and the backend of your application is being designed in some backend framework other than JavaScript/NodeJS (say Laravel), you might face problems accessing the backend while running Grunt server.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It happens because the backend Laravel service runs on port 8000, and the front end development server runs on port 8080. The requests from the frontend server to the backend-server will result in &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy&#34;&gt;same-origin policy&lt;/a&gt; errors due to the port difference. To fix this issue, we can set up CORS through a proxy on Grunt. This proxy will stand in front of your frontend server and the backend server and get the required data from the backend and pass it to your frontend while letting your browser think that you are all in the same domain.&lt;/p&gt;
&lt;p&gt;Grunt has a module &lt;a href=&#34;https://github.com/drewzboto/grunt-connect-proxy&#34;&gt;grunt-connect-proxy&lt;/a&gt; that exists to help to solve this issue. It delegates requests that match a given URL to the backend of your choice. So for example, you want to access your backend using the URL &lt;a href=&#34;http://localhost:8080/api&#34;&gt;http://localhost:8080/api&lt;/a&gt;, you can write a proxy rule so that whenever your user tries to access this URL in a browser, the proxy will get the data from your backend and server it at this particular URL.&lt;/p&gt;
&lt;p&gt;The procedure to set up the proxy is simple. First, you will have to add the proxy configuration to your &lt;code&gt;Gruntfile.js&lt;/code&gt;. In this example, I am assuming that the backend server is running on the port 8000, and the Grunt server is running on the port 8080. This configuration will delegate all requests to &lt;a href=&#34;http://localhost:8080/api&#34;&gt;http://localhost:8080/api&lt;/a&gt; to &lt;a href=&#34;http://localhost:8000/backend&#34;&gt;http://localhost:8000/backend&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;public&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;hostname&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;livereload&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;middleware&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;middlewares&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;middlewares&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;unshift&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;grunt-connect-proxy/lib/utils&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;proxyRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;middlewares&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;proxies&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;/api&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;https&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;rewrite&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;s1&#34;&gt;&amp;#39;^/api&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;/backend&amp;#39;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now register your Grunt server task to run the proxy on Grunt execution.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nx&#34;&gt;grunt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;registerTask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;server&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;nx&#34;&gt;grunt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;task&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;
       &lt;span class=&#34;s1&#34;&gt;&amp;#39;configureProxies:server&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
       &lt;span class=&#34;s1&#34;&gt;&amp;#39;connect:server&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let me explain the above two scripts line by line. In the connect section of your &lt;code&gt;Gruntfile&lt;/code&gt;, we add a new section called &lt;code&gt;proxies&lt;/code&gt;. The options defined in the proxies section are explained below.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;context&lt;/strong&gt;: This is the context against which the incoming requests will be matched. Matching requests will be proxied to the backend server.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;host&lt;/strong&gt;: The host address where the backend server is running. The incoming requests will be proxied to this host.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;port&lt;/strong&gt;: The port where the backend server is running.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;https&lt;/strong&gt;: If your backend server is an https endpoint, then set this value to &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;rewrite&lt;/strong&gt;: This option allows rewriting of URL when proxying. What this means is that when trying to proxy &lt;a href=&#34;http://localhost:8080/api&#34;&gt;http://localhost:8080/api&lt;/a&gt; to the backend server, the URL will be rewritten as &lt;a href=&#34;http://localhost:8000/backend&#34;&gt;http://localhost:8000/backend&lt;/a&gt;. The object&amp;rsquo;s key serves as the regex used in the replacement operation, and the object&amp;rsquo;s value is the context of your backend server&amp;rsquo;s service.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More options can be found in the &lt;a href=&#34;https://github.com/drewzboto/grunt-connect-proxy#grunt-connect-proxy&#34;&gt;documentation&lt;/a&gt; of &lt;code&gt;grunt-connect-proxy&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You will also need to set up the proxy&amp;rsquo;s middleware in the &lt;code&gt;options&lt;/code&gt; section of the &lt;code&gt;connect&lt;/code&gt;. The relevant code is as follows.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;middleware&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;middlewares&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;middlewares&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;unshift&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;grunt-connect-proxy/lib/utils&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;proxyRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;middlewares&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, include your proxy task in the server task. It is necessary to append the proxy task before the connect task. Also, make sure to specify the connection target in the &lt;code&gt;configureProxies&lt;/code&gt; section. In our case, the connect target is &lt;code&gt;server&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now you can start your Grunt server via this configured proxy by typing &lt;code&gt;Grunt server&lt;/code&gt; in the command line. You should see something like this in the console.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ grunt server
...
Running &lt;span class=&#34;s2&#34;&gt;&amp;#34;configureProxies:server&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;configureProxies&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; task
Rewrite rule created &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;/^&lt;span class=&#34;se&#34;&gt;\/&lt;/span&gt;api/ -&amp;gt; /backend&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;.
Proxy created &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;: /api to localhost:8000

Running &lt;span class=&#34;s2&#34;&gt;&amp;#34;connect:server&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;connect&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; task
Started connect web server on http://localhost:8080
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above output confirms that the proxy is working fine.
Some of the example URLs are:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Grunt Server&lt;/th&gt;
&lt;th&gt;Backend Server&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;http://127.0.0.1:8080/api&lt;/td&gt;
&lt;td&gt;http://127.0.0.1:8000/backend&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;http://127.0.0.1:8080/api/x/y&lt;/td&gt;
&lt;td&gt;http://127.0.0.1:8000/backend/x/y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;That&amp;rsquo;s all. Now you will not face any problems getting data from any backend of your choice.&lt;/p&gt;
</description>
                
                        <author>Yash.Agarwal@fakeEmailToMakeValidatorHappy.com (Yash Agarwal)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://yashagarwal.in/categories/technical">Technical</category>
                                
                            
                        
                     
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://yashagarwal.in/tags/configuration">configuration</category>
                                
                            
                        
                    
                
                <guid>https://yashagarwal.in/posts/2018/05/proxy-your-requests-to-the-backend-server-with-grunt/</guid>
                <pubDate>Tue, 15 May 2018 17:14:13 +0530</pubDate>
            </item>
        
            
            <item>
                <title>Writing Drozer Modules</title>
                <link>https://yashagarwal.in/posts/2018/05/writing-drozer-modules/</link>
                
                
                <description>&lt;p&gt;This post is a result of my experimentation with Drozer. Drozer is a security testing framework for Android, developed by MWR Labs. According the Drozer&amp;rsquo;s official &lt;a href=&#34;https://labs.mwrinfosecurity.com/assets/BlogFiles/mwri-drozer-user-guide-2015-03-23.pdf&#34;&gt;documentation&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Drozer allows you to assume the role of an Android app and interact with other apps. It can do anything that an
installed application can do, such as making use of Android&amp;rsquo;s Inter-Process Communication (IPC) mechanism and
interact with the underlying operating system.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Drozer modules are written in Python. The module performs operations on an Android device with the help of an agent app installed on the device. The agent app, by default, has permission to use the internet connection only. This permission is required so that the agent can open a ServerSocket on port 31415 (default). The agent will listen for the incoming connections on this port. The console will connect to the agent on this port.&lt;/p&gt;
&lt;p&gt;Drozer modules are inherited Python classes. The parent class is defined in &lt;a href=&#34;https://github.com/mwrlabs/drozer/blob/develop/src/drozer/modules/base.py&#34;&gt;drozer.modules.Module&lt;/a&gt;. Drozer console provides commands to create a custom module repository, which is very useful for the local development of modules.&lt;/p&gt;
&lt;p&gt;You can read more about the structure of a Drozer module &lt;a href=&#34;https://github.com/mwrlabs/drozer/wiki/Writing-a-Module&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I will explain all the critical parts of a Drozer module with the help of a sample module. I will be implementing a module to record and save the sound from the inbuilt mic of an Android device.&lt;/p&gt;
&lt;p&gt;I initialized a new module repository using the Drozer console using the following command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;dz&amp;gt; module repository create custom
Initialised repository at custom.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You will see a new directory &lt;code&gt;custom&lt;/code&gt; in your current directory after executing above command. Navigate to this directory and create a new folder with any name. I prefer to name this folder same as my module name. In this folder, create a file &lt;code&gt;__init__.py&lt;/code&gt;. Drozer identifies the folder as a module directory if &lt;code&gt;__init__.py&lt;/code&gt; is present in the directory. Now you can implement your module in this directory.&lt;/p&gt;
&lt;p&gt;To begin implementing our module, create a new file &lt;code&gt;record.py&lt;/code&gt; in the module directory. Drozer has many different utility classes, which we can use to simplify our implementation. To use these utility classes (&lt;a href=&#34;https://github.com/mwrlabs/drozer/wiki/Using-mixins&#34;&gt;mixins&lt;/a&gt;), our module class must extend &lt;em&gt;mixins&lt;/em&gt; using Python&amp;rsquo;s multiple inheritance feature.&lt;/p&gt;
&lt;p&gt;We first need to import all the required mixins. The mixins are stored in &lt;code&gt;modules.common&lt;/code&gt; package in the Drozer source tree. After importing mixins and extending our class, the code will look like this. You can also import any other standard Python module here.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;drozer.modules&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;common&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Module&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;subprocess&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;time&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Record&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;common&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Shell&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;common&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FileSystem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;common&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ClassLoader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we will set up the metadata for our module. This information will help Drozer to organize and list our module correctly. We can define the name, description, author, date, license, path, permissions, and examples. Most of the available options are self-explanatory. But &lt;em&gt;path&lt;/em&gt; and &lt;em&gt;permissions&lt;/em&gt; require some explanation.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;path&lt;/em&gt; variable defined here is an array that contains the values for the namespace of the module. Drozer supports separate namespaces for each module. We can combine similar modules in the same namespace using this feature.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;permissions&lt;/em&gt; array variable contains all the permissions that this module will require for proper functioning. For example, our module will need permission to record audio on the device to work correctly. So we define this permission in the permissions array. The agent app on the device is required to have this permission. Otherwise, our module will throw an error.&lt;/p&gt;
&lt;p&gt;The following snippet shows the metadata section of our module.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Record sound from the inbuilt mic of an Android device.&amp;#34;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;description&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Record sound from the inbuilt mic of an Android device. The default save format is 3GPP. Relies on the agent having the RECORD_AUDIO permission.&amp;#34;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;examples&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;dz&amp;gt; run custom.record.record
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;Setting up recorder configuration...
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;Recording started
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;Press any key to stop recording
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;Recording stopped...downloading recording
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;Screenshot captured. Saved at location /home/yash/work/drozer/1524201166.3gp
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;author&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Yash Agarwal&amp;#34;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2018-04-14&amp;#34;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;license&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;BSD (3 clause)&amp;#34;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;custom&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;record&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;permissions&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;android.permission.RECORD_AUDIO&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;com.mwr.dz.permissions.GET_CONTEXT&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can start implementing the heart of our module, the &lt;code&gt;execute()&lt;/code&gt; function. This function will be invoked by Drozer when the module is run. Every action that the module is expected to perform should be implemented in this method.&lt;/p&gt;
&lt;p&gt;The implementation of &lt;code&gt;execute()&lt;/code&gt; method is slightly tricky and requires an understanding of different classes and methods provided by the Android API. As we are writing a module to record sound, we will look into the documentation of &lt;a href=&#34;https://developer.android.com/guide/topics/media/mediarecorder.html&#34;&gt;MediaRecorder&lt;/a&gt; class. Before reading further, go through the documentation about the use of reflection API in Drozer &lt;a href=&#34;https://github.com/mwrlabs/drozer/wiki/Using-Reflection&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;execute()&lt;/code&gt; function is given below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;execute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# unique file names&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;filename&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;.3gp&amp;#34;&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;# current working directory of Drozer console&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;cwd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;workingDir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;# Magic of Reflection API !!!&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;recorder&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;android.media.MediaRecorder&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;AudioSource&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;klass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;android.media.MediaRecorder$AudioSource&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;OutputFormat&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;klass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;android.media.MediaRecorder$OutputFormat&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;AudioEncoder&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;klass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;android.media.MediaRecorder$AudioEncoder&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;recorder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setAudioSource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AudioSource&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MIC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;recorder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setOutputFormat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OutputFormat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;THREE_GPP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;recorder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setAudioEncoder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AudioEncoder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AMR_NB&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;recorder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setOutputFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/recording.3gp&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cwd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;recorder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prepare&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

    &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stdout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Recording started&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;recorder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;raw_input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Press any key to stop recording&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;recorder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stdout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Recording stopped...&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;recorder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;recorder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;release&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;# Download file from device to PC&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;downloadFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/recording.3gp&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cwd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stdout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Recording saved&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stderr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Recording could not be fetched from the device.&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I followed the sample use case given on &lt;a href=&#34;https://developer.android.com/reference/android/media/MediaRecorder.html&#34;&gt;this&lt;/a&gt; page, to instantiate and use the &lt;em&gt;MediaRecorder&lt;/em&gt; object.&lt;/p&gt;
&lt;p&gt;After the recording is finished, we want to save this recorded media file to our computer. Drozer provides a method, &lt;a href=&#34;https://github.com/mwrlabs/drozer/blob/c92d74024c653b6dc7de3378a24e51d276ae2c62/src/drozer/modules/common/file_system.py&#34;&gt;downloadFile&lt;/a&gt; exactly for this purpose. This method returns the length of the data downloaded on success and &lt;code&gt;None&lt;/code&gt; otherwise. We can use this information to test the success or failure of the fetching of the recording.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s all. We have successfully implemented a Drozer module which can record the sound on an Android device without the knowledge of the user. Do you smell something fishy here? The whole idea here depends on that particular &lt;code&gt;android.permission.RECORD_AUDIO&lt;/code&gt; permission that our agent app had. It allowed our module to record without &lt;em&gt;user consent&lt;/em&gt; (actually, the user gave her consent unknowingly while installing agent app). Many apps nowadays ask for arbitrarily random permissions. Those permissions might not be related to the functionality of the app in any way, but because there is no method to install apps without granting these permissions, the users grant all permissions to these apps. That can be exploited very easily. This tutorial tried to show one of such exploitations.&lt;/p&gt;
&lt;p&gt;Here are some exercises that you should try if you want to learn more about Drozer module development.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A module to initiate a call on a device.&lt;/li&gt;
&lt;li&gt;A module to get the clipboard values on a device&lt;/li&gt;
&lt;li&gt;Try finding a public exploit on Android forums such as XDA and implement that exploit as a Drozer module.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Slightly tougher one.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A module to terminate a call without user intervention (I do not know if it is possible to do this programmatically. If you implement this successfully, do let me know in the comments section.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks for reading. Cheers :)&lt;/p&gt;
</description>
                
                        <author>Yash.Agarwal@fakeEmailToMakeValidatorHappy.com (Yash Agarwal)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://yashagarwal.in/categories/technical">Technical</category>
                                
                            
                        
                     
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://yashagarwal.in/tags/drozer">Drozer</category>
                                 
                                    <category domain="https://yashagarwal.in/tags/android">android</category>
                                
                            
                        
                    
                
                <guid>https://yashagarwal.in/posts/2018/05/writing-drozer-modules/</guid>
                <pubDate>Sun, 13 May 2018 17:10:13 +0530</pubDate>
            </item>
        
            
            <item>
                <title>Develop a Theme for Hugo</title>
                <link>https://yashagarwal.in/posts/2018/03/develop-a-theme-for-hugo/</link>
                
                
                <description>&lt;p&gt;&lt;em&gt;This article was originally published on &lt;a href=&#34;https://www.zeolearn.com/magazine/develop-a-theme-for-hugo&#34;&gt;zeolearn&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In this tutorial, I will show you how to create a basic Hugo theme. I assume that you are familiar with basic HTML, and how to write content in markdown. I will be explaining the working of Hugo and how it uses Go templating language and how you can use these templates to organize your content. As this post will be focusing mainly on Hugo&amp;rsquo;s working, I will not be covering CSS here.&lt;/p&gt;
&lt;p&gt;We will be starting with some necessary information about the terminology used in Hugo. Then we will create a Hugo site with a very basic template. Then we will add new templates and posts to our site as we delve further into Hugo. With very slight variations to what you will learn here, you will be able to create different types of real-world websites.&lt;/p&gt;
&lt;p&gt;Now, a short tutorial about the flow of this post. The commands that start with &lt;code&gt;$&lt;/code&gt; are meant to be run in the terminal or command line. The output of the command will follow immediately. Comments will begin with &lt;code&gt;#&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;some-terminology&#34;&gt;Some Terminology&lt;/h2&gt;
&lt;h3 id=&#34;configuration-file&#34;&gt;Configuration File&lt;/h3&gt;
&lt;p&gt;Hugo uses a configuration file to identify common settings for your site. It is located in the root of your site. This file can be written in TOML, YAML or JSON formats. Hugo identifies this file using the extension.&lt;/p&gt;
&lt;p&gt;By default, Hugo expects to find Markdown files in your &lt;code&gt;content/&lt;/code&gt; directory and template files in your &lt;code&gt;themes/&lt;/code&gt; directory. It will create HTML files in your &lt;code&gt;public/&lt;/code&gt; directory. You can change this by specifying alternate locations in the configuration file.&lt;/p&gt;
&lt;h3 id=&#34;content&#34;&gt;Content&lt;/h3&gt;
&lt;p&gt;The content files will contain the metadata and text about your posts. A content file can be divided into two sections, the top section being frontmatter and the next section is the markdown that will be converted to HTML by Hugo. The content files reside in &lt;code&gt;/content&lt;/code&gt; directory.&lt;/p&gt;
&lt;h3 id=&#34;frontmatter&#34;&gt;Frontmatter&lt;/h3&gt;
&lt;p&gt;The frontmatter section contains information about your post. It can be written in JSON, TOML or YAML. Hugo identifies the type of frontmatter used with the help of identifying tokens(markers). TOML is surrounded by &lt;code&gt;+++&lt;/code&gt;, YAML is by &lt;code&gt;---&lt;/code&gt; and JSON is enclosed in curly braces &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt;. The information in the front matter of a content type will be parsed to be used in the template for that specific content type while converting to HTML.&lt;/p&gt;
&lt;p&gt;I prefer to use YAML, so you might need to translate your configurations if you are using JSON or TOML.&lt;/p&gt;
&lt;p&gt;This is an example of frontmatter written in YAML.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;---&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;2018-02-11T11:45:05+05:30&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Basic Hugo Theming Tutorial.&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;A primer about theme development for Hugo, a static site generator written in Golang.&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;categories&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- Hugo&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- Customization&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;tags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- Theme&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;---&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;You can read more about different configuration options available for frontmatter &lt;a href=&#34;https://gohugo.io/content-management/front-matter/#readout&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;markdown&#34;&gt;Markdown&lt;/h3&gt;
&lt;p&gt;The markdown section is where you will write your actual post. The content written here will automatically be converted to HTML by Hugo with the help of a Markdown engine.&lt;/p&gt;
&lt;h3 id=&#34;templates&#34;&gt;Templates&lt;/h3&gt;
&lt;p&gt;In Hugo, templates govern the way; your content will be rendered to HTML. Each template provides a consistent layout when rendering the markdown content. The templates reside in the &lt;code&gt;/layouts&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;There are three types of templates: &lt;em&gt;single&lt;/em&gt;, &lt;em&gt;list&lt;/em&gt; and &lt;em&gt;partial&lt;/em&gt;. Each kind of template take some content as input and transform it according to the way defined in the template.&lt;/p&gt;
&lt;h4 id=&#34;single-template&#34;&gt;Single Template&lt;/h4&gt;
&lt;p&gt;A single template is used to render a single page. The best example of this is &lt;em&gt;about&lt;/em&gt; page.&lt;/p&gt;
&lt;h4 id=&#34;list-template&#34;&gt;List Template&lt;/h4&gt;
&lt;p&gt;A list template renders a group of related content. It can be all recent posts or all posts belonging to a particular category.&lt;/p&gt;
&lt;p&gt;The homepage template is a specific type of list template. Hugo assumes that the homepage will serve as a bridge to all the other content on your website.&lt;/p&gt;
&lt;h3 id=&#34;partials&#34;&gt;Partials&lt;/h3&gt;
&lt;p&gt;Partials are short code snippets that can be injected in any other template type. They are instrumental when you want to repeat some content on every page of your website. The header and footer content are good candidates to be included in separate partials. It is a good practice to use partials liberally in your Hugo site as it adheres to &lt;a href=&#34;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34;&gt;DRY&lt;/a&gt; principle.&lt;/p&gt;
&lt;h2 id=&#34;okay-lets-start&#34;&gt;Okay, Let&amp;rsquo;s Start&lt;/h2&gt;
&lt;p&gt;So now that you have a basic understanding of Hugo, we will create a new site using Hugo. Hugo provides a command to generate new sites. We will use that command to scaffold our site. It will create a basic skeleton of your site and will give you a basic configuration file.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ hugo new site ~/zeo
$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/zeo
$ ls -l
total &lt;span class=&#34;m&#34;&gt;28&lt;/span&gt;
drwxr-xr-x &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; yash hogwarts &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; Feb &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; 11:13 archetypes
-rw-r--r-- &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; yash hogwarts   &lt;span class=&#34;m&#34;&gt;82&lt;/span&gt; Feb &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; 11:13 config.toml
drwxr-xr-x &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; yash hogwarts &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; Feb &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; 11:13 content
drwxr-xr-x &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; yash hogwarts &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; Feb &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; 11:13 data
drwxr-xr-x &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; yash hogwarts &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; Feb &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; 11:13 layouts
drwxr-xr-x &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; yash hogwarts &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; Feb &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; 11:13 static
drwxr-xr-x &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; yash hogwarts &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; Feb &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; 11:13 themes&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I will use YAML format for the config file. Hugo, By default, uses TOML format.&lt;/p&gt;
&lt;p&gt;A small description of this directory structure:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;archetypes&lt;/strong&gt;: The archetypes contains predefined frontmatter format for your website&amp;rsquo;s content types. It facilitates consistent metadata format across all the content of your site.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;content&lt;/strong&gt;: The content directory contains the markdown files that will be converted to HTML and served to the user.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;data&lt;/strong&gt;: From Hugo documentation&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The data folder is where you can store additional data for Hugo to use when generating your site. Data files are not used to generate standalone pages; rather, they are meant to be supplemental to content files. This feature can extend the content in case your front matter fields grow out of control. Or perhaps you want to show a larger dataset in a template (see example below). In both cases, it is a good idea to outsource the data in their files.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;layouts&lt;/strong&gt;: The layouts folder stores all the templates files which form the presentation of the content files.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;static&lt;/strong&gt;: The static folder will contain all the static assets such as &lt;code&gt;CSS&lt;/code&gt;, &lt;code&gt;JS&lt;/code&gt; and &lt;code&gt;image&lt;/code&gt; files.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;themes&lt;/strong&gt;: The themes folder is where we will be storing our theme.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will edit the &lt;code&gt;config.yaml&lt;/code&gt; file to edit some basic configuration of the site.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ vim config.yaml
baseURL: /
title: &lt;span class=&#34;s2&#34;&gt;&amp;#34;My First Blog&amp;#34;&lt;/span&gt;
defaultContentLanguage: en
languages:
  en:
    lang: en
    languageName: English
    weight: &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
MetaDataFormat: &lt;span class=&#34;s2&#34;&gt;&amp;#34;yaml&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Now when you run your site, Hugo will show some errors. It is normal because our layouts and themes directories are still empty.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ hugo --verbose
INFO 2018/02/11 11:20:59 Using config file: /home/yash/zeo/config.yaml
Building sites … INFO 2018/02/11 11:20:59 syncing static files to /home/yash/zeo/public/
WARN 2018/02/11 11:20:59 No translation bundle found &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; default language &lt;span class=&#34;s2&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;
WARN 2018/02/11 11:20:59 Translation func &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; language en not found, use default.
WARN 2018/02/11 11:20:59 i18n not initialized, check that you have language file &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;in i18n&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; that matches the site language or the default language.
WARN 2018/02/11 11:20:59 &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;en&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Unable to locate layout &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;taxonomyTerm&amp;#34;&lt;/span&gt;:
...
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;This command will also create a new directory called &lt;code&gt;public/&lt;/code&gt;. This is the directory where Hugo will save all the generated HTML files related to your site. It also stores all static data in this folder.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s have a look at the &lt;code&gt;public&lt;/code&gt; folder.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ls -l public/
total &lt;span class=&#34;m&#34;&gt;16&lt;/span&gt;
drwxr-xr-x &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; yash hogwarts &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; Feb  &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; 11:22 categories
-rw-r--r-- &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; yash hogwarts  &lt;span class=&#34;m&#34;&gt;400&lt;/span&gt; Feb  &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; 11:25 index.xml
-rw-r--r-- &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; yash hogwarts  &lt;span class=&#34;m&#34;&gt;383&lt;/span&gt; Feb  &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; 11:25 sitemap.xml
drwxr-xr-x &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; yash hogwarts &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; Feb  &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; 11:22 tags&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Hugo generated some XML files, but there are no HTML files. It is because we have not created any content in our content directory yet.&lt;/p&gt;
&lt;p&gt;At this point, you have a working site with you. All that is left is to add some content and a theme to your site.&lt;/p&gt;
&lt;h3 id=&#34;create-a-new-theme&#34;&gt;Create a new theme&lt;/h3&gt;
&lt;p&gt;Hugo doesn&amp;rsquo;t ship with a default theme. There are a lot of themes available on Hugo website. Hugo also ships with a command to create new themes.&lt;/p&gt;
&lt;p&gt;In this tutorial, we will be creating a theme called &lt;code&gt;zeo&lt;/code&gt;. As mentioned earlier, my aim is to show you how to use Hugo&amp;rsquo;s features to fill out your HTML files from the markdown content, I will not be focusing on CSS. So the theme will be ugly but functional.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s create a basic skeleton of the theme. It will create the directory structure of the theme and place empty files for you to fill in.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# run it from the root of your site&lt;/span&gt;
$ hugo new theme zeo
$ ls -l themes/zeo/
total &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt;
drwxr-xr-x &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; yash hogwarts &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; Feb &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; 11:30 archetypes
drwxr-xr-x &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; yash hogwarts &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; Feb &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; 11:30 layouts
-rw-r--r-- &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; yash hogwarts &lt;span class=&#34;m&#34;&gt;1081&lt;/span&gt; Feb &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; 11:30 LICENSE.md
drwxr-xr-x &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; yash hogwarts &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; Feb &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; 11:30 static
-rw-r--r-- &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; yash hogwarts  &lt;span class=&#34;m&#34;&gt;432&lt;/span&gt; Feb &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; 11:30 theme.toml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
Fill out &lt;code&gt;LICENSE.md&lt;/code&gt; and &lt;code&gt;theme.toml&lt;/code&gt; file if you plan to distribute your theme to outside world.&lt;/p&gt;
&lt;p&gt;Now we will edit our &lt;code&gt;config.yaml&lt;/code&gt; file to use this theme.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ vim config.yaml
theme: &lt;span class=&#34;s2&#34;&gt;&amp;#34;zeo&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Now that we have an empty theme, let&amp;rsquo;s build the site.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ hugo --verbose
INFO 2018/02/11 11:34:14 Using config file: /home/yash/zeo/config.yaml
Building sites … INFO 2018/02/11 11:34:14 syncing static files to /home/yash/zeo/public/
WARN 2018/02/11 11:34:14 No translation bundle found &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; default language &lt;span class=&#34;s2&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;
WARN 2018/02/11 11:34:14 Translation func &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; language en not found, use default.
WARN 2018/02/11 11:34:14 i18n not initialized, check that you have language file &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;in i18n&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; that matches the site language or the default language.

                   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; EN
+------------------+----+
  Pages            &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
  Paginator pages  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
  Non-page files   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
  Static files     &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
  Processed images &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
  Aliases          &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
  Sitemaps         &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
  Cleaned          &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;

Total in &lt;span class=&#34;m&#34;&gt;12&lt;/span&gt; ms&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
These warnings are harmless in our case, as we are developing our site in English only.&lt;/p&gt;
&lt;p&gt;Hugo does two things while generating your website. It transforms all the content files to HTML using the defined templates, and its copies static files into the site. Static files are not transformed by Hugo. They are copied exactly as they are.&lt;/p&gt;
&lt;h3 id=&#34;the-cycle&#34;&gt;The Cycle&lt;/h3&gt;
&lt;p&gt;The usual development cycle when developing themes for Hugo is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Delete the &lt;code&gt;/public&lt;/code&gt; folder&lt;/li&gt;
&lt;li&gt;Run the built-in web server and open your site in the browser&lt;/li&gt;
&lt;li&gt;Make changes to your theme files&lt;/li&gt;
&lt;li&gt;View your changes in browser&lt;/li&gt;
&lt;li&gt;Repeat step 3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is necessary to delete the &lt;code&gt;public&lt;/code&gt; directory because Hugo does not try to remove any outdated files from this folder. So the old data might interfere with your workflow.&lt;/p&gt;
&lt;p&gt;It is also a good idea to track changes in your theme with the help of a version control software. I prefer Git for this. You can use others according to your preference.&lt;/p&gt;
&lt;h3 id=&#34;run-your-site-in-the-browser&#34;&gt;Run your site in the browser&lt;/h3&gt;
&lt;p&gt;Hugo has a built-in web server which helps considerably while developing themes for Hugo. It also has a &lt;em&gt;live reload&lt;/em&gt; and &lt;em&gt;watch&lt;/em&gt; feature which watches for changes in your files and reloads the web page accordingly.&lt;/p&gt;
&lt;p&gt;Run it with &lt;code&gt;hugo server&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;Now open &lt;a href=&#34;http://localhost:1313&#34;&gt;http://localhost:1313&lt;/a&gt; in your browser. By default, Hugo will not show anything, because it cannot find any HTML file in the public directory.&lt;/p&gt;
&lt;p&gt;The command to load web server with &lt;code&gt;--watch&lt;/code&gt; option is:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ hugo server --watch --verbose
...
...
                   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; EN
+------------------+----+
  Pages            &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;
  Paginator pages  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
  Non-page files   &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
  Static files     &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
  Processed images &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
  Aliases          &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
  Sitemaps         &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
  Cleaned          &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;

Total in &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; ms
...
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h3 id=&#34;update-the-home-page-template&#34;&gt;Update the Home page template&lt;/h3&gt;
&lt;p&gt;Hugo looks for following directories in theme&amp;rsquo;s &lt;code&gt;/layout&lt;/code&gt; folder to search for &lt;code&gt;index.html&lt;/code&gt; page.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;index.html&lt;/li&gt;
&lt;li&gt;_default/list.html&lt;/li&gt;
&lt;li&gt;_default/single.html&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is always desirable to update the most specific template related to the content type. It is not a hard and fast rule, but a good generalization to follow.&lt;/p&gt;
&lt;p&gt;We will first make a static page to see if our &lt;code&gt;index.html&lt;/code&gt; page is rendered correctly.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;$ vim themes/zeo/layouts/index.html
&lt;span class=&#34;cp&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Hello World!&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Build the site and verify the results. You should see &lt;em&gt;Hello World!&lt;/em&gt; when you open &lt;a href=&#34;http://localhost:1313&#34;&gt;http://localhost:1313&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;building-a-functional-home-page&#34;&gt;Building a functional Home Page&lt;/h3&gt;
&lt;p&gt;Now we will create a home page which will reflect the content of our site every time we build it.&lt;/p&gt;
&lt;p&gt;For that, we will first create some new posts. We will display these posts as a list on the home page and on their pages, too.&lt;/p&gt;
&lt;p&gt;Hugo has a command for generating skeleton of posts, just like it did for sites and themes.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ hugo --verbose new post/first.md
INFO 2018/02/11 11:40:58 Using config file: /home/yash/zeo/config.yaml
INFO 2018/02/11 11:40:58 attempting to create &lt;span class=&#34;s2&#34;&gt;&amp;#34;post/first.md&amp;#34;&lt;/span&gt; of &lt;span class=&#34;s2&#34;&gt;&amp;#34;post&amp;#34;&lt;/span&gt; of ext &lt;span class=&#34;s2&#34;&gt;&amp;#34;.md&amp;#34;&lt;/span&gt;
INFO 2018/02/11 11:40:58 curpath: /home/yash/zeo/archetypes/default.md
...
...
/home/yash/zeo/content/post/first.md created&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;new&lt;/code&gt; command uses an archetype to generate the frontmatter for new posts. When we created our site, hugo created a default archetype in the &lt;code&gt;/archetype&lt;/code&gt; folder.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cat archetypes/default.md
---
title: &lt;span class=&#34;s2&#34;&gt;&amp;#34;{{ replace .Name &amp;#34;&lt;/span&gt;-&lt;span class=&#34;s2&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34; | title }}&amp;#34;&lt;/span&gt;
date: &lt;span class=&#34;o&#34;&gt;{{&lt;/span&gt; .Date &lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt;

---&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;It is a good idea to create a default archetype in the themes folder also so that users can override the theme&amp;rsquo;s archetype with their archetype whenever they want.&lt;/p&gt;
&lt;p&gt;We will create a new archetype for our posts&amp;rsquo; frontmatter and delete the default &lt;code&gt;archetype/default.md&lt;/code&gt;.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ rm -rf archetype/default.md
$ vim themes/zeo/archetypes/post.md
---
title: &lt;span class=&#34;s2&#34;&gt;&amp;#34;{{ replace .Name &amp;#34;&lt;/span&gt;-&lt;span class=&#34;s2&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34; | title }}&amp;#34;&lt;/span&gt;
date: &lt;span class=&#34;o&#34;&gt;{{&lt;/span&gt; .Date &lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt;
Description: &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
Tags: &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;
Categories: &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;

---&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Create one more post in &lt;code&gt;content/post&lt;/code&gt; directory.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ hugo --verbose new post/second.md
INFO 2018/02/11 12:13:56 Using config file: /home/yash/zeo/config.yaml
INFO 2018/02/11 12:13:56 attempting to create &lt;span class=&#34;s2&#34;&gt;&amp;#34;post/second.md&amp;#34;&lt;/span&gt; of &lt;span class=&#34;s2&#34;&gt;&amp;#34;post&amp;#34;&lt;/span&gt; of ext &lt;span class=&#34;s2&#34;&gt;&amp;#34;.md&amp;#34;&lt;/span&gt;
INFO 2018/02/11 12:13:56 curpath: /home/yash/zeo/themes/zeo/archetypes/post.md
...
...
/home/yash/zeo/content/post/second.md created&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;See the difference. Hugo used the theme&amp;rsquo;s archetype for generating the frontmatter this time.&lt;/p&gt;
&lt;p&gt;By default, Hugo does not generate posts with an empty content section. So you will need to add some content before you try to build the site.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at the &lt;code&gt;content/post/first.md&lt;/code&gt; file, after adding content to it.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;$ cat content/post/first.md
---
title: &amp;#34;First&amp;#34;
date: 2018-02-11T11:35:58+05:30
draft: true
Tags: [&amp;#34;first&amp;#34;]
Categories: [&amp;#34;Hugo&amp;#34;]

---

Hi there. My first Hugo post&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Now that our posts are ready, we need to create templates to show them in a list on the home page and to show their content on separate pages for each post.&lt;/p&gt;
&lt;p&gt;We will first edit the template for the home page that we created previously. We will then modify &amp;ldquo;single&amp;rdquo; templates which are used to generate output for a single content file. We also have &amp;ldquo;list&amp;rdquo; templates which are used to group similar type of content and render them as a list.
The home page will show a list of last ten posts that we have created. Let&amp;rsquo;s update its template to add this logic.&lt;/p&gt;
&lt;h3 id=&#34;update-your-home-page-to-show-your-content&#34;&gt;Update your home page to show your content&lt;/h3&gt;
&lt;p&gt;Now add your template code to &lt;code&gt;themes/zeo/layouts/index.html&lt;/code&gt;.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;$ vim themes/zeo/layouts/index.html
$ cat !$
cat themes/zeo/layouts/index.html
&lt;span class=&#34;cp&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  {{ range first 10 .Data.Pages }}
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .Title }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  {{ end }}
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Hugo uses Go Template Engine. This engine scans the templates for commands that are enclosed between &lt;code&gt;{{&lt;/code&gt; and &lt;code&gt;}}&lt;/code&gt;. In this template, the commands are &lt;code&gt;range&lt;/code&gt;, &lt;code&gt;first&lt;/code&gt;, &lt;code&gt;.Data.Pages&lt;/code&gt;, &lt;code&gt;.Title&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The template implies that we are going to get first 10 latest pages from our content folder and render their title as &lt;code&gt;h1&lt;/code&gt; heading.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;range&lt;/code&gt; is an iterator function. Hugo treats every HTML file created as a page, so &lt;code&gt;range&lt;/code&gt; will loop through all the pages created. Here we are instructing &lt;code&gt;range&lt;/code&gt; to stop after first ten pages.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;end&lt;/code&gt; command signals the end of the &lt;em&gt;range&lt;/em&gt; iterator. The engine loops back to the next iteration as soon as it encounters the &lt;em&gt;end&lt;/em&gt; command. Everything between &lt;em&gt;range&lt;/em&gt; and &lt;em&gt;end&lt;/em&gt; will be evaluated for each iteration of the loop.&lt;/p&gt;
&lt;p&gt;Build the website and see the changes. The homepage now shows our two posts. However, you cannot click on the posts and read their content. Let&amp;rsquo;s change that too.&lt;/p&gt;
&lt;h3 id=&#34;linking-your-posts-on-home-page&#34;&gt;Linking your posts on Home Page&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s add a link to the post&amp;rsquo;s page from home page.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;$ vim themes/zeo/layouts/index.html
&lt;span class=&#34;cp&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  {{ range first 10 .Data.Pages }}
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .Title }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  {{ end }}
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Build your site and see the result. The titles are now links, but when you click on them, it takes you to a page which says &lt;code&gt;404 page not found&lt;/code&gt;. That is expected because we have not created any template for the single pages where the content can be rendered. So Hugo could not find any template, and it did not output any HTML file. We will change that in a minute.&lt;/p&gt;
&lt;p&gt;We want to render the posts, which are in &lt;code&gt;content/post&lt;/code&gt; directory. That means that their section is post and their type is also post.&lt;/p&gt;
&lt;p&gt;Hugo uses section and type information to identify the template file for each piece of content. It will first look for a template file which matches the section or type of the content. If it could not find it, then it will use &lt;code&gt;_default/single.html&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Since we do not have any other content type yet, we will just start by updating the &lt;code&gt;_default/single.html&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Remember that Hugo will use this file for every content type for which we have not created a template. However, for now, we will accept that cost as we do not have any other content type with us. We will refactor our templates to accommodate more content types, as we add more content.&lt;/p&gt;
&lt;p&gt;Update the template file.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;$ vim themes/zeo/layouts/_default/single.html
&lt;span class=&#34;cp&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .Title }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .Title }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  {{ .Content }}
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Build the site and verify the results. You will see that on clicking on &lt;code&gt;first&lt;/code&gt;, you get the usual result, but clicking on &lt;code&gt;second&lt;/code&gt; still produces the &lt;code&gt;404 page not found&lt;/code&gt; error. It is because Hugo does not generate pages with empty content. Remember I mentioned it earlier.&lt;/p&gt;
&lt;p&gt;Now that we have our home page and posts page ready, we will build a page to list all the posts, not just the recent ten posts. This page will be accessible at &lt;a href=&#34;http://localhost:1313/post&#34;&gt;http://localhost:1313/post&lt;/a&gt;. Currently, this page is blank because there is no template defined for it.&lt;/p&gt;
&lt;p&gt;This page will show the listings of all the posts, so the type of this page will be a list. We will again use the default &lt;code&gt;_default/list.html&lt;/code&gt; as we do not have any other content type with us.&lt;/p&gt;
&lt;p&gt;Update the list file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;$ vim themes/zeo/layouts/_default/list.html
&lt;span class=&#34;cp&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  {{ range .Data.Pages }}
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .Title }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  {{ end }}
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;add-date-published-to-the-posts&#34;&gt;Add &amp;ldquo;Date Published&amp;rdquo; to the posts&lt;/h3&gt;
&lt;p&gt;It is a standard practice to add the date on which the post was published on the blog. The front matter of our posts has a variable named &lt;code&gt;date&lt;/code&gt;. We will use that variable to fetch the date. Our posts are using the default &lt;em&gt;single&lt;/em&gt; template, so we will edit that file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;$ vim themes/zeo/layouts/_default/single.html
&lt;span class=&#34;cp&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .Title }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .Title }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .Date.Format &amp;#34;Sun, Feb 11, 2018&amp;#34; }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  {{ .Content }}
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;
&lt;h2 id=&#34;adding-top-level-pages&#34;&gt;Adding top-level Pages&lt;/h2&gt;
&lt;p&gt;Okay, so now that we have our homepage, post-list page and post content pages in place, we will add a new &lt;em&gt;about&lt;/em&gt; page at the top level of our blog, not at a sublevel like we did for posts.&lt;/p&gt;
&lt;p&gt;Hugo uses the directory structure of the content directory to identify the structure of the blog. Let&amp;rsquo;s verify that and create a new &lt;code&gt;about&lt;/code&gt; page in the content directory.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;$ vim content/about.md
---
title: &amp;#34;about&amp;#34;
description: &amp;#34;about this blog&amp;#34;
date: &amp;#34;2018-02-11&amp;#34;
---

### about me

Hi there, you just reached my blog.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s generate the site and view the results.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ hugo --verbose
$ ls -l public/
total &lt;span class=&#34;m&#34;&gt;36&lt;/span&gt;
drwxr-xr-x &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; yash hogwarts &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; Feb &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; 12:43 about
drwxr-xr-x &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; yash hogwarts &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; Feb &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; 12:43 categories
drwxr-xr-x &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; yash hogwarts &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; Feb &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; 11:20 css
-rw-r--r-- &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; yash hogwarts  &lt;span class=&#34;m&#34;&gt;187&lt;/span&gt; Feb &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; 12:43 index.html
-rw-r--r-- &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; yash hogwarts &lt;span class=&#34;m&#34;&gt;1183&lt;/span&gt; Feb &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; 12:43 index.xml
drwxr-xr-x &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; yash hogwarts &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; Feb &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; 11:20 js
drwxr-xr-x &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; yash hogwarts &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; Feb &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; 12:43 post
-rw-r--r-- &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; yash hogwarts &lt;span class=&#34;m&#34;&gt;1139&lt;/span&gt; Feb &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; 12:43 sitemap.xml
drwxr-xr-x &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; yash hogwarts &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; Feb &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; 12:43 tags&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that Hugo created a new directory &lt;code&gt;about&lt;/code&gt;. This directory contains only one file &lt;code&gt;index.html&lt;/code&gt;. The about page will be rendered from &lt;code&gt;about/index.html&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you look carefully, the &lt;code&gt;about&lt;/code&gt; page is listed with the posts on the homepage. It is not desirable, so let&amp;rsquo;s change that first.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;$ vim themes/zeo/layouts/index.html
&lt;span class=&#34;cp&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;posts&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  {{ range first 10 .Data.Pages }}
    {{ if eq .Type &amp;#34;post&amp;#34;}}
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .Title }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    {{ end }}
  {{ end }}

  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;pages&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  {{ range .Data.Pages }}
    {{ if eq .Type &amp;#34;page&amp;#34; }}
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .Title }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    {{ end }}
  {{ end }}
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now build the site and verify the results. The homepage now has two sections, one for posts and other for the pages. Click on the &lt;em&gt;about&lt;/em&gt; page. You will see the page for &lt;em&gt;about&lt;/em&gt;. Remember, I mentioned that Hugo would use the &lt;em&gt;single&lt;/em&gt; template for each page, for which it cannot find a template file. There is still one issue. The &lt;em&gt;about&lt;/em&gt; page shows the date also. We do not want to show the date on the &lt;em&gt;about&lt;/em&gt; page.&lt;/p&gt;
&lt;p&gt;There are a couple of ways to fix this. We can add an if-else statement to detect the type of the content and display date only if it is a post. However, let&amp;rsquo;s use the feature provided by Hugo and create a new template type for the posts. Before we do that, let&amp;rsquo;s learn to use one more template type which is &lt;em&gt;partials&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;partials-1&#34;&gt;Partials&lt;/h2&gt;
&lt;p&gt;In Hugo, partials are used to store the shared piece of code which repeats in more than one templates. Partials are kept in &lt;code&gt;themes/zeo/layouts/partials&lt;/code&gt; directory. Partials can be used to override the themes presentation. End users can use them to change the default behavior of a theme. It is always a good idea to use partials as much as possible.&lt;/p&gt;
&lt;h3 id=&#34;header-and-footer-partials&#34;&gt;Header and Footer partials&lt;/h3&gt;
&lt;p&gt;Header and footer of most of the posts and pages will follow a similar pattern. So they form an excellent example to be defined as a partial.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;$ vim themes/zeo/layouts/partials/header.html
&lt;span class=&#34;cp&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .Title }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;

$ vim themes/zeo/layouts/partials/footer.html
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;We can call a partial by including this path in the template
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;partial&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;header.html&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h2 id=&#34;update-the-homepage-template&#34;&gt;Update the Homepage template&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s update our homepage template to use these partials.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;$ vim themes/zeo/layouts/index.html
{{ partial &amp;#34;header.html&amp;#34; . }}

  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;posts&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  {{ range first 10 .Data.Pages }}
    {{ if eq .Type &amp;#34;post&amp;#34;}}
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .Title }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    {{ end }}
  {{ end }}

  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;pages&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  {{ range .Data.Pages }}
    {{ if or (eq .Type &amp;#34;page&amp;#34;) (eq .Type &amp;#34;about&amp;#34;) }}
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ .Permalink }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    {{ end }}
  {{ end }}

{{ partial &amp;#34;footer.html&amp;#34; . }}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h2 id=&#34;update-the-single-template&#34;&gt;Update the single template&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;$ vim themes/zeo/layouts/_default/single.html
{{ partial &amp;#34;header.html&amp;#34; . }}

  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .Title }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .Date.Format &amp;#34;Sun, Feb 11, 2018&amp;#34; }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  {{ .Content }}

{{ partial &amp;#34;footer.html&amp;#34; . }}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Build the website and verify the results. The title on the posts and the about page should both reflect the value from the markdown file.&lt;/p&gt;
&lt;h2 id=&#34;fixing-the-date-shown-on-about-page&#34;&gt;Fixing the date shown on About page&lt;/h2&gt;
&lt;p&gt;Remember, we had the issue that the date was showing on the &lt;em&gt;about&lt;/em&gt; page also. We discussed one method to solve this issue. Now I will discuss a more &lt;em&gt;hugoic&lt;/em&gt; way of solving this issue.&lt;/p&gt;
&lt;p&gt;We will create a new section template to fix this issue.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;$ mkdir themes/zeo/layouts/post
$ vim themes/zeo/layouts/post/single.html
{{ partial &amp;#34;header.html&amp;#34; . }}

  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .Title }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .Date.Format &amp;#34;Mon, Jan 2, 2006&amp;#34; }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  {{ .Content }}

{{ partial &amp;#34;footer.html&amp;#34; . }}


$ vim themes/zeo/layouts/_default/single.html
&lt;span class=&#34;cp&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .Title }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .Title }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  {{ .Content }}
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that we have changed the default &lt;em&gt;single&lt;/em&gt; template and added that logic in post&amp;rsquo;s &lt;em&gt;single&lt;/em&gt; template.&lt;/p&gt;
&lt;p&gt;Build the website and verify the results. The &lt;em&gt;about&lt;/em&gt; page does not show the date now, but the posts page still show the date. We can also move the list template&amp;rsquo;s logic to the &lt;code&gt;index.html&lt;/code&gt; file of post section template.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We have learnt, how Hugo harnesses the powerful yet simple Go template engine to create the static site generator. We also learnt about partials and their excellent utilization by Hugo in the spirit of &lt;em&gt;Don&amp;rsquo;t Repeat Yourself&lt;/em&gt; principle. Now that you know how to make themes in Hugo, go ahead and start creating new beautiful themes. Best of luck for your endaevour.&lt;/p&gt;
</description>
                
                        <author>Yash.Agarwal@fakeEmailToMakeValidatorHappy.com (Yash Agarwal)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://yashagarwal.in/categories/technical">Technical</category>
                                
                            
                        
                     
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://yashagarwal.in/tags/hugo">Hugo</category>
                                
                            
                        
                    
                
                <guid>https://yashagarwal.in/posts/2018/03/develop-a-theme-for-hugo/</guid>
                <pubDate>Fri, 02 Mar 2018 11:27:05 +0530</pubDate>
            </item>
        
            
            <item>
                <title>My Own Configuration Manager</title>
                <link>https://yashagarwal.in/posts/2018/01/my-own-configuration-manager/</link>
                
                
                <description>&lt;p&gt;I have been using Linux since I was in my second year of undergraduate. My experiments with the dotfiles (configuration files) also started at the same time. For the uninformed, in Linux, it is common to configure a lot of settings and configurations within dotfiles. Dotfiles are files in a Linux user&amp;rsquo;s home directory that begin with a dot or a full-stop character. This dot indicates to the operating system that these files are used to store the settings of programs like &lt;code&gt;vim&lt;/code&gt; or shells like &lt;code&gt;bash&lt;/code&gt; or &lt;code&gt;fish&lt;/code&gt; to name a few.&lt;/p&gt;
&lt;p&gt;In the beginning, I was keeping a manual backup of my dotfiles by copying them to a folder from time to time. But the list soon started getting huge, that it became complicated for me to keep track of the changes. Then I moved to symlinks. I started symlinking all the dotfiles from my folder to their usual locations. This setup worked perfectly fine, but as my collection of dotfiles grew, It became very cumbersome for me to symlink every dotfile manually.&lt;/p&gt;
&lt;p&gt;I also tried a few tools built for this particular purpose. Some of them are &lt;code&gt;vcsh&lt;/code&gt;, &lt;code&gt;mr&lt;/code&gt;, and &lt;code&gt;stow&lt;/code&gt;. These tools work just fine, but I was not willing to learn new tools just for maintaining my dotfiles. At last, I decided to write my tool to solve this problem. This way, there will not be any external dependency, and this tool will also become part of my dotfiles.&lt;/p&gt;
&lt;h2 id=&#34;design&#34;&gt;Design&lt;/h2&gt;
&lt;p&gt;The tool, in itself, is inspired by the &lt;a href=&#34;https://en.wikipedia.org/wiki/Configuration_file#UNIX/Linux&#34;&gt;UNIX tradition&lt;/a&gt; of keeping configuration files for the settings of the programs. This configuration system uses a JSON formatted dotfile.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/yashhere/ConMan&#34;&gt;Here&lt;/a&gt; is the source code for the configuration system. Let&amp;rsquo;s have a look at the file structure of the repository.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;|-- .backups
|   |-- 08-01-2018-15:47
|   |-- 08-01-2018-19:30
|   |-- ......
|-- configure.py
|-- current_status
|-- dotfiles
|   |-- dunst
|   |-- gtk-3.0
|   |-- i3
|   |-- ......
|-- dotfiles.json
|-- LICENSE
`-- README.md&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;During the initial setup, you need to edit the &lt;code&gt;dotfiles.json&lt;/code&gt; file to suit your setup. A relevant section of the JSON file is given below.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;pre&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;cloning repository&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;git&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;subcommand&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;clone&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;argument&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://github.com/yashhere/dotfiles.git&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;linking&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;bashrc&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;src&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;dotfiles/.bashrc&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;dest&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;.bashrc&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;bash_profile&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;src&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;dotfiles/.bash_profile&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;dest&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;.bash_profile&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;profile&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;src&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;dotfiles/.profile&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;dest&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;.profile&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;i3&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;src&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;dotfiles/i3&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;dest&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;.config/i3&amp;#34;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;As can be seen, the JSON file has an array variable &lt;code&gt;linking&lt;/code&gt;, which can be used to set the paths for each configuration file and folder. The &lt;code&gt;configure.py&lt;/code&gt; script also requires a &lt;code&gt;dotfiles&lt;/code&gt; folder to be present in the current directory. The folder can be created manually, or if it is already version controlled on GitHub, then the script can clone it. For that, you can edit the &lt;code&gt;pre&lt;/code&gt; section in the &lt;code&gt;dotfiles.json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Your dotfiles and config folders go inside the &lt;code&gt;dotfiles&lt;/code&gt; folder. You need to copy all your current configurations to this folder to get started.&lt;/p&gt;
&lt;p&gt;So, how does the script know where a file or folder will be linked? Simple, you need to edit the &lt;code&gt;dotfiles.json&lt;/code&gt; file and add source and destination locations. For example, if you want to set up configurations of &lt;code&gt;i3&lt;/code&gt; to its original location (which is, &lt;code&gt;$HOME/.config/i3&lt;/code&gt;), then you need to create a new JSON object in the &lt;code&gt;linking&lt;/code&gt; array, like this.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;i3&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;src&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;dotfiles/i3&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;dest&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;.config/i3&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Here the &lt;code&gt;name&lt;/code&gt; is used to identify the configuration file, the &lt;code&gt;src&lt;/code&gt; parameter is the location of your config file/folder in the dotfiles directory, and the &lt;code&gt;dest&lt;/code&gt; parameter is the final destination of the file/folder. Keen observers would notice that I have not used &lt;code&gt;$HOME&lt;/code&gt; anywhere. It is understood that the configuration will go to the current user&amp;rsquo;s home directory. So the &lt;code&gt;dest&lt;/code&gt; is relative to the user&amp;rsquo;s home directory, and &lt;code&gt;src&lt;/code&gt; is relative to the directory from which the &lt;code&gt;configure.py&lt;/code&gt; script is executed.&lt;/p&gt;
&lt;p&gt;And you are done! Now, run &lt;code&gt;configure.py&lt;/code&gt;, and all your dotfiles and folders will be symlinked to their correct place.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;current_status&lt;/code&gt; file saves all the symlink locations that are being managed by the script, for your easy reference and to debug any error.&lt;/p&gt;
&lt;h2 id=&#34;behind-the-scenes&#34;&gt;Behind the Scenes&lt;/h2&gt;
&lt;p&gt;A lot to cool things happen behind the scenes. The script will check if any previous symlink exists at the given &lt;code&gt;dest&lt;/code&gt; location. It removes any symlinks to avoid redundancy. If the dest already has any dotfile or folder, then it backs it up in the &lt;code&gt;.backups&lt;/code&gt; under today&amp;rsquo;s date and time before replacing it with a symlink to avoid any potential data loss.&lt;/p&gt;
&lt;p&gt;I hope the article was useful. Cheers 😄&lt;/p&gt;
</description>
                
                        <author>Yash.Agarwal@fakeEmailToMakeValidatorHappy.com (Yash Agarwal)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://yashagarwal.in/categories/technical">Technical</category>
                                
                            
                        
                     
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://yashagarwal.in/tags/configuration">configuration</category>
                                 
                                    <category domain="https://yashagarwal.in/tags/python">python</category>
                                 
                                    <category domain="https://yashagarwal.in/tags/github">github</category>
                                
                            
                        
                    
                
                <guid>https://yashagarwal.in/posts/2018/01/my-own-configuration-manager/</guid>
                <pubDate>Sun, 21 Jan 2018 11:23:23 +0530</pubDate>
            </item>
        
            
            <item>
                <title>Setting up ALM Octane with Docker Compose</title>
                <link>https://yashagarwal.in/posts/2017/12/setting-up-alm-octane-with-docker-compose/</link>
                
                
                <description>&lt;p&gt;Recently, I got a chance to set up ALM Octane on one of my university servers for a course project. From the support page of ALM Octane:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ALM Octane is a web-based application lifecycle management platform that enables teams to collaborate easily, manage the product delivery pipeline, and visualize the impact of changes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;precursor&#34;&gt;Precursor&lt;/h2&gt;
&lt;p&gt;My &lt;a href=&#34;http://cse.nitc.ac.in&#34;&gt;department&lt;/a&gt; insists on using open-source software (a plus point, indeed!). But ALM Octane has Oracle DB/MSSQL as a dependency. My professor was not very enthusiastic about installing a proprietary database on the server. So I came up with a different approach. I set up this database (&lt;a href=&#34;http://www.oracle.com/technetwork/database/database-technologies/express-edition/overview/index.html&#34;&gt;free version&lt;/a&gt; of Oracle DB, the Oracle Database 11g Express Edition) in a Docker container. ALM Octane has three components &amp;ndash; Oracle DB, Elastic Search, and the Octane Server itself. The problem was to handle the condition that these three components should be installed on different machines. I decided to use three separate Docker containers for this isolation and then configured them to communicate with each other with docker-compose.&lt;/p&gt;
&lt;h3 id=&#34;wait--docker-compose&#34;&gt;Wait &amp;hellip; Docker Compose?&lt;/h3&gt;
&lt;p&gt;(Skip this if already know about Docker and Compose)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Docker-compose is a tool to define and run multi-container Docker applications. Compose uses a compose file to configure the services used by the applications. Then all the services and the application can be run by using a single command.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So before reading this article any further, if you do not know about docker-compose, go and read about it.&lt;/p&gt;
&lt;h2 id=&#34;the-problem&#34;&gt;The Problem&lt;/h2&gt;
&lt;p&gt;Three primary services are required for the proper functioning of the Octane Server &amp;ndash; Octane, Oracle DB and Elastic Search. The difficulty was to set up adequate configuration options for these services and the appropriate setup for communication between them. I searched on Docker Hub for any pre-built images. Fortunately, I found some pre-built Docker images for my purpose. So I started writing my config file.&lt;/p&gt;
&lt;h2 id=&#34;the-solution&#34;&gt;The Solution&lt;/h2&gt;
&lt;p&gt;Here is my config file for easy reference.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;k&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;octane_oracle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;alexeiled/docker-oracle-xe-11g&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;shm_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;2g&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;mem_limit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;4g&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;octane_es&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;elasticsearch&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2.4&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- ES_HEAP_SIZE=4G&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;mem_limit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;4g&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;octane&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;hpsoftware/almoctane&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;8080:8080&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- /opt/octane/conf&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;/opt/octane/conf&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- /opt/octane/log&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;/opt/octane/log&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- /opt/octane/repo&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;/opt/octane/repo&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;links&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- octane_oracle&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- octane_es&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;mem_limit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;4g&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;env_file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- ./octane.env&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;The configuration options in the code are for a system with RAM of 8GB. The options must be tuned for the best performance before deploying on the production server.&lt;/p&gt;
&lt;p&gt;In the code, I have exposed port &lt;code&gt;8080&lt;/code&gt; of the Octane Docker container to the port 8080 of the host machine. It will make sure that we can access the Octane application on &lt;code&gt;localhost:8080&lt;/code&gt;. The &lt;code&gt;octane.env&lt;/code&gt; file contains three variables for easy site management.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;SERVER_DOMAIN=&lt;span class=&#34;s2&#34;&gt;&amp;#34;your domain name&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;ADMIN_PASSWORD=&lt;span class=&#34;s2&#34;&gt;&amp;#34;your password&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#This disables the minimum memory check to enable to run on smaller machines.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;DISABLE_VALIDATOR_MEMORY=&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, if you try to run the container with &lt;code&gt;docker-compose up&lt;/code&gt;, you will encounter various validation errors. It is because, before starting the server, you need to adjust some settings. If you noticed in the config file, there is a section to define volumes. These volumes are persistent and are used to keep changes saved between two docker-compose runs. I have mapped three volumes from the Docker container to the host machine. So you can now edit the files in the &lt;code&gt;/opt/octane/&lt;/code&gt; folder on the host machine, and changes will reflect in the Docker container. The file where you will have to make changes is &lt;code&gt;/opt/octane/conf/setup.xml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can read the documentation of ALM Octane to find out which settings to be changed. Once you do the necessary changes, fire up the command &lt;code&gt;docker-compose up&lt;/code&gt; and wait for some time. Docker Compose will finish processing, and the server can be accessed on &lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt; on the host machine. While deploying it on the production server, make sure that your network administrator has opened the port 8080 for your server. Otherwise, the site will not be accessible. Also, the docker-compose can be run in the background by issuing command &lt;code&gt;docker-compose up -d&lt;/code&gt;.&lt;/p&gt;
</description>
                
                        <author>Yash.Agarwal@fakeEmailToMakeValidatorHappy.com (Yash Agarwal)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://yashagarwal.in/categories/technical">Technical</category>
                                
                            
                        
                     
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://yashagarwal.in/tags/arch-linux">Arch Linux</category>
                                 
                                    <category domain="https://yashagarwal.in/tags/docker">Docker</category>
                                 
                                    <category domain="https://yashagarwal.in/tags/octane">Octane</category>
                                
                            
                        
                    
                
                <guid>https://yashagarwal.in/posts/2017/12/setting-up-alm-octane-with-docker-compose/</guid>
                <pubDate>Tue, 26 Dec 2017 20:53:35 +0530</pubDate>
            </item>
        
            
            <item>
                <title>Setting up Hugo automatic deployment to Github with Wercker</title>
                <link>https://yashagarwal.in/posts/2017/02/setting-up-hugo-automatic-deployment-to-github-with-wercker/</link>
                
                
                <description>



    

    
    

    
    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe.min.css&#34; integrity=&#34;sha256-sCl5PUOGMLfFYctzDW3MtRib0ctyUvI9Qsmq2wXOeBY=&#34; crossorigin=&#34;anonymous&#34; /&gt;
    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/default-skin/default-skin.min.css&#34; integrity=&#34;sha256-BFeI1V+Vh1Rk37wswuOYn5lsTcaU96hGaI7OUVCLjPc=&#34; crossorigin=&#34;anonymous&#34; /&gt;

    
    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://yashagarwal.in/css/photoswipe.min.d780348a887d97b4d6cc664301a2941706e4a02aeb1533524fcce3b7b9b64b4f.css&#34;&gt;

    

    
    &lt;div class=&#34;pswp&#34; tabindex=&#34;-1&#34; role=&#34;dialog&#34; aria-hidden=&#34;true&#34;&gt;
        
        &lt;div class=&#34;pswp__bg&#34;&gt;&lt;/div&gt;
        
        &lt;div class=&#34;pswp__scroll-wrap&#34;&gt;
            
            &lt;div class=&#34;pswp__container&#34;&gt;
                &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
                &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
                &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            
            &lt;div class=&#34;pswp__ui pswp__ui--hidden&#34;&gt;
                &lt;div class=&#34;pswp__top-bar&#34;&gt;
                    
                    &lt;div class=&#34;pswp__counter&#34;&gt;&lt;/div&gt;
                    &lt;button class=&#34;pswp__button pswp__button--close&#34; title=&#34;Close (Esc)&#34;&gt;&lt;/button&gt;
                    &lt;button class=&#34;pswp__button pswp__button--share&#34; title=&#34;Share&#34;&gt;&lt;/button&gt;
                    &lt;button class=&#34;pswp__button pswp__button--fs&#34; title=&#34;Toggle fullscreen&#34;&gt;&lt;/button&gt;
                    &lt;button class=&#34;pswp__button pswp__button--zoom&#34; title=&#34;Zoom in/out&#34;&gt;&lt;/button&gt;
                    
                    
                    &lt;div class=&#34;pswp__preloader&#34;&gt;
                        &lt;div class=&#34;pswp__preloader__icn&#34;&gt;
                            &lt;div class=&#34;pswp__preloader__cut&#34;&gt;
                                &lt;div class=&#34;pswp__preloader__donut&#34;&gt;&lt;/div&gt;
                            &lt;/div&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
                &lt;div class=&#34;pswp__share-modal pswp__share-modal--hidden pswp__single-tap&#34;&gt;
                    &lt;div class=&#34;pswp__share-tooltip&#34;&gt;&lt;/div&gt;
                &lt;/div&gt;
                &lt;button class=&#34;pswp__button pswp__button--arrow--left&#34; title=&#34;Previous (arrow left)&#34;&gt;
                &lt;/button&gt;
                &lt;button class=&#34;pswp__button pswp__button--arrow--right&#34; title=&#34;Next (arrow right)&#34;&gt;
                &lt;/button&gt;
                &lt;div class=&#34;pswp__caption&#34;&gt;
                    &lt;div class=&#34;pswp__caption__center&#34;&gt;&lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;

&lt;p&gt;Recently, I again migrated my blog from Pelican to Hugo. So till now, I have experimented with Wordpress, Jekyll, Pelican, and Hugo. Without any doubt, Hugo is the simplest to set up. This time, I have setup Hugo in Windows, as I think, in my system, I reinstall Windows OS much less frequently than the Linux. So that way, it will be less painful for me to set up the blog again.&lt;/p&gt;
&lt;p&gt;In this post, I will list all the process which I used to set up automatic deployment of Hugo generated site to Github pages using Wercker. In the beginning, I was trying to use Travis-CI, but then I read about Wercker somewhere. I was impressed with the integration of Wercker with Hugo and the availability of many its community-generated “steps” for the build and deploy process.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gohugo.io/overview/introduction/&#34;&gt;Hugo Docs&lt;/a&gt; already have a fantastic &lt;a href=&#34;https://gohugo.io/tutorials/automated-deployments/&#34;&gt;documentation&lt;/a&gt; for setting up Hugo with Wercker, but it is outdated. Other documentations available on-line is also obsolete. Wercker has changed many functionalities in its platform, which made it difficult for me to set up things correctly. But after hours of trial and error cycle, I was able to build and deploy my static files successfully.&lt;/p&gt;
&lt;p&gt;Here I would like to share the issues I encountered and the tweaks I’ve made. The source codes of this site can be found &lt;a href=&#34;https://github.com/yash2696/yash2696.github.io&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;project-pages-or-user-pages&#34;&gt;Project Pages or User Pages&lt;/h2&gt;
&lt;p&gt;Two types of sites are supported on Github Pages, User Site, and Project Site. User Sites will serve the files stored in the master branch of the repository &lt;code&gt;https://github.com/user_name/user_name.github.io&lt;/code&gt; at the address &lt;code&gt;https://user_name.github.io.&lt;/code&gt; For the Project sites, everything under the gh-pages will be served at the address &lt;code&gt;https://repo_name.github.io&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;My site is a User site, so I wanted all the static files to be saved in the master branch. As Hugo generates all the static files under &lt;code&gt;public&lt;/code&gt; directory, I needed another branch to store my source files. So my made a new branch &lt;code&gt;source&lt;/code&gt;, which will save all the source files for my blog. Don’t forget to remove the &lt;code&gt;.git&lt;/code&gt; folder from the theme folder. Otherwise, the build will fail at a later stage. You can try using the git submodule feature to avoid this issue. I created a repository &lt;code&gt;yash2696.github.io&lt;/code&gt; in Github also.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git init                       &lt;span class=&#34;c1&#34;&gt;#initialized git repository in site root&lt;/span&gt;
git checkout -b &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;#created new branch source&lt;/span&gt;
git remote add origin https://github.com/yash2696/yash2696.github.io
git add .
git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;Initial Commit&amp;#34;&lt;/span&gt;
git push origin source&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then I initialized my master branch as a orphan branch.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git checkout --orphan master
git rm -rf .
rm -f &lt;span class=&#34;s1&#34;&gt;&amp;#39;.gitignore&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;#Your repository name&amp;#34;&lt;/span&gt; &amp;gt; README.md
git add README.md
git commit -a -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;Initial Commit&amp;#34;&lt;/span&gt;
git push origin master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h2 id=&#34;automatic-deployment-using-wrecker&#34;&gt;Automatic deployment using Wrecker&lt;/h2&gt;
&lt;p&gt;It is straightforward to build a Hugo site. Invoke &lt;code&gt;hugo&lt;/code&gt; command under your root directory, Hugo will create a public folder which will contain all your content, static files, etc. Then push this directory to Github, and voila, your site is up!&lt;/p&gt;
&lt;p&gt;What if a single push to &lt;code&gt;source&lt;/code&gt; branch can trigger all the process for you automatically. Here the magic of continuous integration(CI) comes into the picture. A free Wercker account can be easily created and hooked to the Github account and a new application from a chosen repository. After setting up everything, a push to the development branch will automatically trigger the Wercker. One of the most significant advantages of using Wercker is its extensive collection of user-made and well documented &amp;ldquo;steps&amp;rdquo;. In this post, I will use two steps, &lt;code&gt;build hugo&lt;/code&gt; and &lt;code&gt;deploy to Github&lt;/code&gt;.&lt;/p&gt;



    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://yashagarwal.in/css/hugo-easy-gallery.css&#34;&gt;
    


&lt;div class=&#34;box fancy-figure caption-position-bottom caption-effect-appear&#34;  itemscope itemtype=&#34;http://schema.org/ImageGallery&#34;&gt;
    &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
        &lt;div class=&#34;img&#34;&gt;
            &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://yashagarwal.in/images/2017-02-22/wercker-steps.png&#34; alt=&#34;Wercker → Registry → steps&#34;/&gt;
        &lt;/div&gt;
        &lt;a href=&#34;https://yashagarwal.in/images/2017-02-22/wercker-steps.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
            &lt;figcaption&gt;
                    &lt;p&gt;Wercker → Registry → steps&lt;/p&gt;
            &lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;The first task is to create a &lt;code&gt;wercker.yml&lt;/code&gt; file. It will tell Wercker which all actions, it should perform. Here is my &lt;a href=&#34;https://raw.githubusercontent.com/yash2696/yash2696.github.io/source/wercker.yml&#34;&gt;wercker.yml&lt;/a&gt; for reference. In this, I have used two pipelines, &lt;em&gt;build&lt;/em&gt; and &lt;em&gt;deploy&lt;/em&gt;. Please follow the official docs for the more detailed steps. I will list all the problems which I face while setting up things properly.&lt;/p&gt;
&lt;h3 id=&#34;build&#34;&gt;Build&lt;/h3&gt;
&lt;p&gt;Following the official guide, I used this &lt;a href=&#34;https://github.com/ArjenSchwarz/wercker-step-hugo-build&#34;&gt;step&lt;/a&gt; to trigger Hugo to build HTML pages. I had already removed git repository information from the theme folder, so this step finished successfully. If you haven’t, you may add the following piece of code in your build step.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;- script:
    name: install git
    code: &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
        apt-get update
        apt-get install git -y
    - script:
        name: initialize git submodules
        code: &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
            git submodule update --init --recursive&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h3 id=&#34;deploy&#34;&gt;Deploy&lt;/h3&gt;
&lt;p&gt;There is no concept named &amp;ldquo;Add Deploy Target&amp;rdquo; in Wercker as of now. Most of the on-line tutorials follow this process which is outdated. Now Wercker uses a concept called &amp;ldquo;Workflows in Pipelines&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;For new interface, even if you add a deploy stage in the &lt;code&gt;wercker.yml&lt;/code&gt;, you will have to create a new pipeline &lt;code&gt;deploy&lt;/code&gt; under the Workflows tab. After creating the pipeline, the &amp;ldquo;YML Pipeline name&amp;rdquo; must be set to the deploy stage name, which in this case is &lt;code&gt;deploy&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;deploy&lt;/code&gt; stage, I used this &lt;a href=&#34;https://app.wercker.com/applications/55af22c5f32b86a9290ec706/tab/details/&#34;&gt;step&lt;/a&gt; to deploy the built site to Github. Each pipeline starts from scratch, so for the deploy pipeline, the git package needs to be installed again. One also has to set up the environment variable &lt;code&gt;$GIT_TOKEN&lt;/code&gt; to each pipeline, acquired from Github setting.&lt;/p&gt;



&lt;div class=&#34;box fancy-figure caption-position-bottom caption-effect-appear&#34;  itemscope itemtype=&#34;http://schema.org/ImageGallery&#34;&gt;
    &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
        &lt;div class=&#34;img&#34;&gt;
            &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://yashagarwal.in/images/2017-02-22/wercker-pipeline.png&#34; alt=&#34;Wercker Pipeline&#34;/&gt;
        &lt;/div&gt;
        &lt;a href=&#34;https://yashagarwal.in/images/2017-02-22/wercker-pipeline.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
            &lt;figcaption&gt;
                    &lt;p&gt;Wercker Pipeline&lt;/p&gt;
            &lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;You need to generate a new access token for your deploy stage from Github settings.



&lt;div class=&#34;box fancy-figure caption-position-bottom caption-effect-appear&#34;  itemscope itemtype=&#34;http://schema.org/ImageGallery&#34;&gt;
    &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
        &lt;div class=&#34;img&#34;&gt;
            &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://yashagarwal.in/images/2017-02-22/wercker-access-token.png&#34; alt=&#34;Github Access Token&#34;/&gt;
        &lt;/div&gt;
        &lt;a href=&#34;https://yashagarwal.in/images/2017-02-22/wercker-access-token.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
            &lt;figcaption&gt;
                    &lt;p&gt;Github Access Token&lt;/p&gt;
            &lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;After adding the deploy stage, add the token you obtained from the Github to Environmental Variables in deploy pipeline.&lt;/p&gt;



&lt;div class=&#34;box fancy-figure caption-position-bottom caption-effect-appear&#34;  itemscope itemtype=&#34;http://schema.org/ImageGallery&#34;&gt;
    &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
        &lt;div class=&#34;img&#34;&gt;
            &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://yashagarwal.in/images/2017-02-22/wercker-token.png&#34; alt=&#34;Wercker Token&#34;/&gt;
        &lt;/div&gt;
        &lt;a href=&#34;https://yashagarwal.in/images/2017-02-22/wercker-token.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
            &lt;figcaption&gt;
                    &lt;p&gt;Wercker Token&lt;/p&gt;
            &lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;On the next push to your development branch, Wercker will automatically build the site and deploy it on Github Pages.&lt;/p&gt;
</description>
                
                        <author>Yash.Agarwal@fakeEmailToMakeValidatorHappy.com (Yash Agarwal)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://yashagarwal.in/categories/technical">Technical</category>
                                
                            
                        
                     
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://yashagarwal.in/tags/gh-pages">gh-pages</category>
                                 
                                    <category domain="https://yashagarwal.in/tags/hugo">Hugo</category>
                                 
                                    <category domain="https://yashagarwal.in/tags/github">Github</category>
                                 
                                    <category domain="https://yashagarwal.in/tags/wercker">Wercker</category>
                                
                            
                        
                    
                
                <guid>https://yashagarwal.in/posts/2017/02/setting-up-hugo-automatic-deployment-to-github-with-wercker/</guid>
                <pubDate>Wed, 22 Feb 2017 13:37:56 +0530</pubDate>
            </item>
        
            
            <item>
                <title>Setting up Python Development Environments</title>
                <link>https://yashagarwal.in/posts/2016/10/setting-up-python-development-environments/</link>
                
                
                <description>&lt;p&gt;Recently I was searching for Python projects on Github for contribution. Every single project I found, had a thing common among them. In every project&amp;rsquo;s contribution guide, it was asked to set up the virtual environment for the project. What the heck is this virtual environment and how does it work?&lt;/p&gt;
&lt;p&gt;As a beginner to open source projects, the problem I faced, in the beginning, was how to set up the development environments for the projects I was looking at. I searched the Internet, I found some articles, but they were not complete. So I decided to write this guide, which will be useful for me in future also.&lt;/p&gt;
&lt;p&gt;Python uses &lt;code&gt;pip&lt;/code&gt; for package management.&lt;/p&gt;
&lt;h2 id=&#34;installing-pip&#34;&gt;Installing pip&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pip&lt;/code&gt; depends on setuptools library, which is in official Ubuntu repositories. To install it for python2 -&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo apt-get install python-setuptools&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then install &lt;code&gt;pip&lt;/code&gt; using -
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo apt-get install python-pip&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;and for python3 -
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo apt-get install python3-setuptools&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Then install &lt;code&gt;pip&lt;/code&gt; using -
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo apt-get install python3-pip&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;It should install &lt;code&gt;pip&lt;/code&gt; on your system for both python versions. &lt;code&gt;pip&lt;/code&gt; is very easy to use. It will take care of every single package you may require for your project.&lt;/p&gt;
&lt;h3 id=&#34;installing-a-package-using-pip&#34;&gt;Installing a package using pip&lt;/h3&gt;
&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# it will search and install [package]&lt;/span&gt;
pip install &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;package&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
pip install django&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
If you are using python3, then don&amp;rsquo;t forget to use &lt;code&gt;pip3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip&lt;/code&gt; can be used to install a specific version of package also.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# it will search and install [package] with [version]&lt;/span&gt;
pip install &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;package&lt;span class=&#34;o&#34;&gt;]==[&lt;/span&gt;version&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
pip install &lt;span class=&#34;nv&#34;&gt;django&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;1.6.5&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h3 id=&#34;uninstalling-a-package-using-pip&#34;&gt;Uninstalling a package using pip&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# it will search and uninstall [package]&lt;/span&gt;
pip uninstall &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;package&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
pip uninstall django&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;upgrading-a-package-using-pip&#34;&gt;upgrading a package using pip&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# it will upgrade [package] to latest version&lt;/span&gt;
pip install --upgrade &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;package&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
pip install --upgrade django&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;creating-list-of-all-packages-with-pip&#34;&gt;Creating list of all packages with pip&lt;/h3&gt;
&lt;p&gt;It is one of most used and most useful feature of &lt;code&gt;pip&lt;/code&gt;. It allows you to make a list of all the dependencies of your project.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# it will output the file to current directory&lt;/span&gt;
pip freeze &amp;gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;file_name.txt&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;All these commands above will install the packages globally. But that&amp;rsquo;s not what is desired. &lt;code&gt;virtualenv&lt;/code&gt; comes to our rescue here.&lt;/p&gt;
&lt;h2 id=&#34;virtualenv&#34;&gt;Virtualenv&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;virtualenv&lt;/code&gt; solves a very particular problem; it allows multiple python projects that have different and often conflicting dependencies, to coexist on the same system.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;virtualenv&lt;/code&gt; solves this problem by creating different isolated development environments for your projects. An environment is a folder which contains everything; your project needs to work properly.&lt;/p&gt;
&lt;h3 id=&#34;installing-virtualenv&#34;&gt;Installing virtualenv&lt;/h3&gt;
&lt;p&gt;By default, if you install &lt;code&gt;virtualenv&lt;/code&gt; using &lt;code&gt;pip&lt;/code&gt;, it will use system&amp;rsquo;s default python to create virtual environments. To overcome this problem, we will install &lt;code&gt;virtualenv&lt;/code&gt; using ubuntu package manager.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo apt-get install python-virtualenv&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h3 id=&#34;installing-virtualenvwrapper&#34;&gt;Installing virtualenvwrapper&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;virtualenvwrapper&lt;/code&gt; provides some set of commands which makes working with virtual environments much easier.&lt;/p&gt;
&lt;p&gt;To install it -
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo pip install virtualenvwrapper&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;virtualenv&lt;/code&gt; and &lt;code&gt;virtualenvwrapper&lt;/code&gt; are the only packages which you will need to install globally. All other per project packages will be installed in respective virtual environments.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;virtualenvwrapper&lt;/code&gt; also places all your virtual environments in one place. It makes working with projects very easy.&lt;/p&gt;
&lt;p&gt;Now open your &lt;code&gt;.bashrc&lt;/code&gt; and add these two lines to the end -
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# All your projects will be saved in python-dev folder&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;PROJECT_HOME&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;~/python-dev

&lt;span class=&#34;c1&#34;&gt;# ~/python-dev/virtualenvs will contains python interpreters for each project.&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;WORKON_HOME&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;~/python-dev/virtualenvs

&lt;span class=&#34;c1&#34;&gt;# source the virtualenvwrapper script&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; /usr/local/bin/virtualenvwrapper.sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;You can change &lt;code&gt;python-dev&lt;/code&gt; to any name you wish. Your virtual environments will be created at that location.&lt;/p&gt;
&lt;p&gt;Now restart your terminal to source the &lt;code&gt;.bashrc&lt;/code&gt; or use -
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; .bashrc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h3 id=&#34;basic-usage&#34;&gt;Basic Usage&lt;/h3&gt;
&lt;p&gt;Create a virtual environment -
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mkvirtualenv myproject&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;It will create &lt;code&gt;myproject&lt;/code&gt; folder in the python-dev directory. To activate this project -
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;workon myproject&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Alternatively you can create project using &lt;code&gt;mkproject&lt;/code&gt; command. It will create a virtual environment as well as a project directory in the &lt;code&gt;$PROJECT_HOME&lt;/code&gt;, which is &lt;code&gt;cd&lt;/code&gt;-ed into when you &lt;code&gt;workon&lt;/code&gt; myproject.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t forget to deactivate current project when you switch between different projects.&lt;/p&gt;
&lt;p&gt;To deactivate a project -
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;deactivate&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;To delete a virtual environment -
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;rmvirtualenv myproject&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;List all environments -
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;lsvirtualenv&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;it will also list all virtual environments -
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;workon&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Please refer to virtualenvwrapper documentation for &lt;a href=&#34;https://virtualenvwrapper.readthedocs.io/en/latest/command_ref.html&#34;&gt;full list of virtualenvwrapper commands&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;virtualenvwrapper also provides the tab-completion feature which is very handy when you have a lot of projects to work with.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s it. Hope you liked the post. 😄&lt;/p&gt;
</description>
                
                        <author>Yash.Agarwal@fakeEmailToMakeValidatorHappy.com (Yash Agarwal)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://yashagarwal.in/categories/technical">Technical</category>
                                
                            
                        
                     
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://yashagarwal.in/tags/pip">Pip</category>
                                 
                                    <category domain="https://yashagarwal.in/tags/python">Python</category>
                                 
                                    <category domain="https://yashagarwal.in/tags/virtual-environments">Virtual Environments</category>
                                
                            
                        
                    
                
                <guid>https://yashagarwal.in/posts/2016/10/setting-up-python-development-environments/</guid>
                <pubDate>Sun, 09 Oct 2016 00:00:00 +0000</pubDate>
            </item>
        
            
            <item>
                <title>Custom Arch Linux setup with Openbox</title>
                <link>https://yashagarwal.in/posts/2016/06/custom-arch-linux-setup-with-openbox/</link>
                
                
                <description>



    

    
    

    
    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe.min.css&#34; integrity=&#34;sha256-sCl5PUOGMLfFYctzDW3MtRib0ctyUvI9Qsmq2wXOeBY=&#34; crossorigin=&#34;anonymous&#34; /&gt;
    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/default-skin/default-skin.min.css&#34; integrity=&#34;sha256-BFeI1V+Vh1Rk37wswuOYn5lsTcaU96hGaI7OUVCLjPc=&#34; crossorigin=&#34;anonymous&#34; /&gt;

    
    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://yashagarwal.in/css/photoswipe.min.d780348a887d97b4d6cc664301a2941706e4a02aeb1533524fcce3b7b9b64b4f.css&#34;&gt;

    

    
    &lt;div class=&#34;pswp&#34; tabindex=&#34;-1&#34; role=&#34;dialog&#34; aria-hidden=&#34;true&#34;&gt;
        
        &lt;div class=&#34;pswp__bg&#34;&gt;&lt;/div&gt;
        
        &lt;div class=&#34;pswp__scroll-wrap&#34;&gt;
            
            &lt;div class=&#34;pswp__container&#34;&gt;
                &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
                &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
                &lt;div class=&#34;pswp__item&#34;&gt;&lt;/div&gt;
            &lt;/div&gt;
            
            &lt;div class=&#34;pswp__ui pswp__ui--hidden&#34;&gt;
                &lt;div class=&#34;pswp__top-bar&#34;&gt;
                    
                    &lt;div class=&#34;pswp__counter&#34;&gt;&lt;/div&gt;
                    &lt;button class=&#34;pswp__button pswp__button--close&#34; title=&#34;Close (Esc)&#34;&gt;&lt;/button&gt;
                    &lt;button class=&#34;pswp__button pswp__button--share&#34; title=&#34;Share&#34;&gt;&lt;/button&gt;
                    &lt;button class=&#34;pswp__button pswp__button--fs&#34; title=&#34;Toggle fullscreen&#34;&gt;&lt;/button&gt;
                    &lt;button class=&#34;pswp__button pswp__button--zoom&#34; title=&#34;Zoom in/out&#34;&gt;&lt;/button&gt;
                    
                    
                    &lt;div class=&#34;pswp__preloader&#34;&gt;
                        &lt;div class=&#34;pswp__preloader__icn&#34;&gt;
                            &lt;div class=&#34;pswp__preloader__cut&#34;&gt;
                                &lt;div class=&#34;pswp__preloader__donut&#34;&gt;&lt;/div&gt;
                            &lt;/div&gt;
                        &lt;/div&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
                &lt;div class=&#34;pswp__share-modal pswp__share-modal--hidden pswp__single-tap&#34;&gt;
                    &lt;div class=&#34;pswp__share-tooltip&#34;&gt;&lt;/div&gt;
                &lt;/div&gt;
                &lt;button class=&#34;pswp__button pswp__button--arrow--left&#34; title=&#34;Previous (arrow left)&#34;&gt;
                &lt;/button&gt;
                &lt;button class=&#34;pswp__button pswp__button--arrow--right&#34; title=&#34;Next (arrow right)&#34;&gt;
                &lt;/button&gt;
                &lt;div class=&#34;pswp__caption&#34;&gt;
                    &lt;div class=&#34;pswp__caption__center&#34;&gt;&lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;

&lt;p&gt;After my summer vacation started, I bought a new laptop, and the first thing I did was to install Arch Linux on it. After a standard arch installation procedure, I started putting together my desktop environment, beginning with ArchLinux and Openbox, and then piecing all pieces together to build a proper desktop environment. Building a desktop this way follows the Unix Methodology; have software that each does one thing well, and when you put them together, you get something amazing.&lt;/p&gt;
&lt;p&gt;When I first installed Arch, I had several choices. I tried &lt;code&gt;xfce&lt;/code&gt; and &lt;code&gt;gnome&lt;/code&gt; as my desktop environments. While both of them have their pros and cons, I ended up liking none. The sole reason was the dependencies; these two software bring with them. My only intention of installing Arch was to have something, which I control, not like Ubuntu, where you are forced to use the preinstalled software and when you try to uninstall something, you fear of breaking some other program.&lt;/p&gt;
&lt;p&gt;So I end up going the route of building something up from scratch using Openbox as a base. At this point, I have a fast, lightweight desktop that is exceptionally stable and is genuinely my desktop as I have built it from the ground up, choosing every application.&lt;/p&gt;



    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://yashagarwal.in/css/hugo-easy-gallery.css&#34;&gt;
    


&lt;div class=&#34;box fancy-figure caption-position-none&#34;  itemscope itemtype=&#34;http://schema.org/ImageGallery&#34;&gt;
    &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
        &lt;div class=&#34;img&#34;&gt;
            &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://yashagarwal.in/images/2016-06-09/desktop.jpg&#34; alt=&#34;Openbox on ArchLinux&#34;/&gt;
        &lt;/div&gt;
        &lt;a href=&#34;https://yashagarwal.in/images/2016-06-09/desktop.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
            &lt;figcaption&gt;
                    &lt;p&gt;Openbox on ArchLinux&lt;/p&gt;
            &lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&#34;window-manager&#34;&gt;Window Manager&lt;/h2&gt;
&lt;p&gt;After the installation of Arch, the first thing I did was to install &lt;code&gt;openbox&lt;/code&gt;, a tiling window manager. You may also try other window managers like &lt;code&gt;awesome&lt;/code&gt;, &lt;code&gt;i3&lt;/code&gt;, and &lt;code&gt;fluxbox&lt;/code&gt;, etc. but I chose Openbox because it is used everywhere. Thus there is a plethora of information out there about customizing it.&lt;/p&gt;
&lt;p&gt;For our window manager to show up, it needs to be added either in a login manager or user&amp;rsquo;s &lt;code&gt;~/.xinitrx&lt;/code&gt; file. There is a default version of this file that contain some code which we may want to retain, so rather than making this file from scratch, copy the default version of the file to the user&amp;rsquo;s home directory.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cp /etc/X11/xinit/xinitrc ~/.xinitrc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now add the command &lt;code&gt;exec Openbox-session&lt;/code&gt; to the end of the file. Remember that the system will ignore the lines following this command. An Openbox session should be able to be started by entering the command &lt;code&gt;startx&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;An openbox session can be started automatically upon login using shell&amp;rsquo;s startup script. Add following to the shell&amp;rsquo;s startup script, &lt;code&gt;~/.bash_profile&lt;/code&gt; for bash and &lt;code&gt;~/.zprofile&lt;/code&gt; for zsh.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; -z &lt;span class=&#34;nv&#34;&gt;$DISPLAY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$XDG_VTNR&lt;/span&gt; -eq &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; startx&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;configuring-openbox&#34;&gt;Configuring Openbox&lt;/h2&gt;
&lt;p&gt;Setting up openbox is quite simple. Four files make the basis of openbox configuration. They are &lt;code&gt;rc.xml&lt;/code&gt;, &lt;code&gt;autostart&lt;/code&gt;,  &lt;code&gt;menu.xml&lt;/code&gt; and &lt;code&gt;environment&lt;/code&gt;. These files controls everything about the window manager.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;rc.xml&lt;/strong&gt;: Determine the behavior and settings of overall Openbox session&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;autostart&lt;/strong&gt;: Contains a list of applications to be launched with the window manager&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;menu.xml&lt;/strong&gt;: It makes the right-click context menu of the desktop&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;environment&lt;/strong&gt;: Can be used to export and set relevant environmental variables&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the configuration of Openbox, it is necessary to create a local Openbox profile in the user&amp;rsquo;s home directory. A global configuration file can be found in &lt;code&gt;/etc/xdg/openbox&lt;/code&gt;, which is well documented, and copying the global configuration to the user&amp;rsquo;s directory will give a good starting point to start customizing.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cp -R /etc/xdg/openbox ~/.config/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These files can be edited by hand, although some graphical tools are also available, use of these may be desired.&lt;/p&gt;
&lt;h2 id=&#34;themes-and-appearance&#34;&gt;Themes and Appearance&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.archlinux.org/packages/community/x86_64/obconf&#34;&gt;obconf&lt;/a&gt; and &lt;a href=&#34;https://www.archlinux.org/packages/community/x86_64/lxappearance-obconf/&#34;&gt;lxappearance-obconf&lt;/a&gt; can be used to configure appearance and theme of openbox session. There are quite a few themes available in &lt;a href=&#34;https://www.archlinux.org/packages/community/any/openbox-themes/&#34;&gt;openbox-themes&lt;/a&gt; package. My personal favorite is &lt;a href=&#34;https://www.archlinux.org/packages/community/any/numix-themes/&#34;&gt;Numix-themes&lt;/a&gt; and &lt;a href=&#34;https://aur.archlinux.org/packages/numix-icon-theme-git/&#34;&gt;Numix-icon-theme-git (AUR)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To see changes after editing a configuration file, the Openbox needs to be refreshed. It can be done with the &lt;code&gt;reconfigure&lt;/code&gt; command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;openbox --reconfigure&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;menus&#34;&gt;Menus&lt;/h2&gt;
&lt;p&gt;The type and behavior of Openbox menus, accessible by right-clicking the background, can be changed using &lt;code&gt;~/.config/openbox/menu.xml&lt;/code&gt; file. Openbox provides two kinds of menus, &lt;code&gt;Static&lt;/code&gt;, and &lt;code&gt;Dynamic&lt;/code&gt; menus (Piped and Generators)&lt;/p&gt;
&lt;p&gt;Static menus are hardcoded in XML and is stored in the &lt;code&gt;menu.xml&lt;/code&gt; file. Whenever you install a new application, you will have to update the XML file to update the menu manually. It is a viable solution if the apps are not installed on a day to day basis.&lt;/p&gt;
&lt;p&gt;Pipe menus are the sections of the Openbox menu that Openbox creates on the fly by running a generic script and using its plain text output as menu entries. This scheme can be used in different ways, like adding a mail checker in the menu or adding a weather forecast menu. You can check &lt;a href=&#34;http://openbox.org/wiki/Openbox:Pipemenus&#34;&gt;openbox pipe menu page&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;Generators are the most convenient type of menus. These can be found in most desktop environments where applications show up in the menu automatically. If applications are being installed regularly, then this will probably be the preferred choice.&lt;/p&gt;
&lt;h3 id=&#34;static-menus&#34;&gt;Static Menus&lt;/h3&gt;
&lt;p&gt;The process of making these menus can be automated by static menu generator like &lt;a href=&#34;https://www.archlinux.org/packages/?name=obmenu&#34;&gt;obmenu&lt;/a&gt;. It will generate static menus from installed applications by looking into certain directories. Others available tools are &lt;a href=&#34;https://www.archlinux.org/packages/?name=menumaker&#34;&gt;menumaker&lt;/a&gt;, &lt;a href=&#34;https://www.archlinux.org/packages/?name=obmenu&#34;&gt;obmenu&lt;/a&gt; and &lt;a href=&#34;https://www.archlinux.org/packages/?name=archlinux-xdg-menu&#34;&gt;xdg-menu&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;dynamic-menus&#34;&gt;Dynamic Menus&lt;/h3&gt;
&lt;p&gt;Dynamic menus give the same kind of functionality most people are used to. So it was my preferred choice. They can be used to generate full, complex menus on the fly. One of the most popular application for generating dynamic menus is &lt;a href=&#34;https://aur.archlinux.org/packages/obmenu-generator/&#34;&gt;obmenu-generator (AUR)&lt;/a&gt;. Though it is not officially connected to Openbox, it is widely used.&lt;/p&gt;
&lt;p&gt;In order to have &lt;a href=&#34;https://aur.archlinux.org/packages/obmenu-generator/&#34;&gt;obmenu-generator (AUR)&lt;/a&gt; make a menu on demand, the &lt;code&gt;menu.xml&lt;/code&gt; file should contain the following code as the only entry.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;lt;?xml &lt;span class=&#34;nv&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;1.0&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;encoding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;?&amp;gt;
&amp;lt;openbox_menu&amp;gt;
    &amp;lt;menu &lt;span class=&#34;nv&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;root-menu&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;OpenBox 3&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;execute&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/usr/bin/obmenu-generator&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/menu&amp;gt;
&amp;lt;/openbox_menu&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;panels-and-taskbars&#34;&gt;Panels and Taskbars&lt;/h2&gt;
&lt;p&gt;You can get any panel like &lt;a href=&#34;https://www.archlinux.org/packages/extra/i686/xfce4-panel/&#34;&gt;xfce4-panel&lt;/a&gt; or the simple and customizable &lt;a href=&#34;https://www.archlinux.org/packages/?name=tint2&#34;&gt;tint2&lt;/a&gt;. I chose tint2 because it very closely follows the openbox spirit of having easy customization with plain configuration files. tint2 package also containg a graphical tool &lt;code&gt;tint2conf&lt;/code&gt; for customizing panel and you can obviously go right to the tint2 configuration file and edit it there. This also means it is easy to pick up your configuration file and move it to another computer, or restore an old configuration since it is as simple as pasting a text document in the right place. tint2 can also have sections for each individual desktop and has various small widget like programs that can be used with it such as a calendar, &lt;a href=&#34;https://www.archlinux.org/packages/community/x86_64/gsimplecal/&#34;&gt;gsimplecal&lt;/a&gt;, a volume application, &lt;a href=&#34;https://www.archlinux.org/packages/?name=volumeicon&#34;&gt;volumeicon&lt;/a&gt;, a battery indicator, &lt;a href=&#34;https://www.archlinux.org/packages/?name=cbatticon&#34;&gt;cbatticon&lt;/a&gt;, a network indicator like &lt;a href=&#34;https://www.archlinux.org/packages/extra/any/wicd/&#34;&gt;wicd&lt;/a&gt; which also have a system tray icon and a mini task tray. To start tint2 with openbox, you need to add &lt;code&gt;tint2 &amp;amp;&lt;/code&gt; to the &lt;code&gt;autostart&lt;/code&gt; file.&lt;/p&gt;
&lt;h2 id=&#34;file-manager&#34;&gt;File Manager&lt;/h2&gt;
&lt;p&gt;Some file managers deeply integrate into desktop environments, and when installed with Openbox, they end up pulling multiple dependencies, which is certainly not desired. Our aim behind building an Openbox set up was to have minimum dependencies so that we can get a lightweight desktop. However, there are several file managers available that fit into the Openbox very well. In my choice, &lt;a href=&#34;https://www.archlinux.org/packages/?name=pcmanfm&#34;&gt;pcmanfm&lt;/a&gt; is the best choice here. pcmanfm is a lightweight and fast file manager with network and thrash support. pcmanfm can also manage desktop icons and wallpaper setting, although if you plan to use conky in your system, then you may not want pcmanfm to manage desktop for you. The reason is that pcmanfm treats desktop as a window, so when you switch to desktop, the conky hides behind the desktop window. To get the icons and wallpaper, you can use other standalone tools such as &lt;a href=&#34;https://www.archlinux.org/packages/community/x86_64/idesk/&#34;&gt;&lt;code&gt;idesk&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://www.archlinux.org/packages/extra/x86_64/feh/&#34;&gt;&lt;code&gt;feh&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://www.archlinux.org/packages/extra/x86_64/nitrogen/&#34;&gt;&lt;code&gt;nitrogen&lt;/code&gt;&lt;/a&gt;.
To start pcmanfm is the desktop mode, add the following to the autostart file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pcmanfm --desktop &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and to stop it for managing desktop&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;pcmanfm --desktop-off &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Many functions present in modern file managers require the installation of a few additional programs. &lt;a href=&#34;https://www.archlinux.org/packages/?name=gvfs&#34;&gt;&lt;code&gt;gvfs&lt;/code&gt;&lt;/a&gt; gives you the ability to mount volumes and have trash control. It is not mandatory to have, but it allows on-demand mounting completely from within the file manager, as opposed to having to drop down to the command line. A disk-volume manager such as &lt;a href=&#34;https://www.archlinux.org/packages/?name=udisks2&#34;&gt;&lt;code&gt;udisks2&lt;/code&gt;&lt;/a&gt; will also be wanted, and for auto-mounting removable disks, &lt;a href=&#34;https://www.archlinux.org/packages/community/any/udiskie/&#34;&gt;&lt;code&gt;udiskie&lt;/code&gt;&lt;/a&gt; works well with Openbox. udiskie can be added to Openbox&amp;rsquo;s autostart file like any other application.&lt;/p&gt;
&lt;h2 id=&#34;composition&#34;&gt;Composition&lt;/h2&gt;
&lt;p&gt;Openbox does not provide native support for composition, although having a compositor may prevent screen flickering and other distortion in applications like &lt;a href=&#34;https://www.archlinux.org/packages/community/any/oblogout/&#34;&gt;&lt;code&gt;oblogout&lt;/code&gt;&lt;/a&gt;. Some options work great with Openbox. The one which I am using and quite happy with is &lt;a href=&#34;https://wiki.archlinux.org/index.php/Compton&#34;&gt;&lt;code&gt;compton&lt;/code&gt;&lt;/a&gt;. It can be used with or without any initial configuration, although there are a lot of different configuration options if you decide to customize the setup. To start compton in background with shadows, use this in &lt;code&gt;autostart&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;compton -b -c &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;While setting up my desktop using Openbox ended up being much more work than I could have with typical desktop environments. But now I have a much more stable desktop, about which I know, what is running in my system, and that my system is not cluttered with any software that I never use.&lt;/p&gt;
&lt;p&gt;While it might not be for everybody having to configure every little bit of the desktop, I genuinely feel I have ended up with excellent user experience, and a system that is customized precisely to fit my needs.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.archlinux.org/&#34;&gt;Arch Linux Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                
                        <author>Yash.Agarwal@fakeEmailToMakeValidatorHappy.com (Yash Agarwal)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://yashagarwal.in/categories/technical">Technical</category>
                                
                            
                        
                     
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://yashagarwal.in/tags/openbox">openbox</category>
                                 
                                    <category domain="https://yashagarwal.in/tags/arch-linux">Arch Linux</category>
                                
                            
                        
                    
                
                <guid>https://yashagarwal.in/posts/2016/06/custom-arch-linux-setup-with-openbox/</guid>
                <pubDate>Thu, 09 Jun 2016 10:20:36 +0000</pubDate>
            </item>
        
            
            <item>
                <title>A good Sublime Text setup</title>
                <link>https://yashagarwal.in/posts/2016/04/a-good-sublime-text-setup/</link>
                
                
                <description>&lt;p&gt;So, after a hectic day, good news finally came. I have been selected as a Lab Administrator for the &lt;a href=&#34;https://www.facebook.com/sslnitc/&#34;&gt;Software Systems Lab&lt;/a&gt; of my college. Cheers!!!&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s come to our today&amp;rsquo;s topic on configuring Sublime Text Settings.&lt;/p&gt;
&lt;p&gt;There is just one rule you must follow while designing your own editor preference configuration.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don&amp;rsquo;t put any lines in your configuration that you don&amp;rsquo;t understand.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You will find tons of online tutorials that contains all kinds of awesome hacks to make your sublime text experience better but the worst way to make your development environment better is just to borrow the configuration from someone else.&lt;/p&gt;
&lt;p&gt;Spending your time in actually understand what is happening behind the scenes in the construction of your editor is immensely invaluable. It is similar to the increased information retention that you experience when you copy something from the board.&lt;/p&gt;
&lt;p&gt;So first, take some background of what we are going to do today. I am using Sublime Text 3 &amp;ndash; dev version, but most of the instructions are similar for Sublime Text 2 also.&lt;/p&gt;
&lt;p&gt;Okay, first open the sublime text, then go to &lt;code&gt;Preference → Settings → User&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So this is your configuration file where you can put all your custom preferences. There are other configuration files also, which can be found in Preferences.&lt;/p&gt;
&lt;p&gt;You can also find all settings for reference in &lt;code&gt;Settings → Default&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Here is my &lt;code&gt;Settings → User&lt;/code&gt; file. Feel free to take insiparation from it, and make your sublime text experience unmatchable. I have commented every setting which is self-understandable.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/yashhere/dea6728f88865666c20ff1c35e90bd0e.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;wrapping-it-up&#34;&gt;Wrapping It Up&lt;/h2&gt;
&lt;p&gt;I still stand by my platitude that&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don&amp;rsquo;t put anything in your configuration file you don&amp;rsquo;t understand!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That&amp;rsquo;s all for today. Thanks for reading.&lt;/p&gt;
</description>
                
                        <author>Yash.Agarwal@fakeEmailToMakeValidatorHappy.com (Yash Agarwal)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://yashagarwal.in/categories/technical">Technical</category>
                                
                            
                        
                     
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://yashagarwal.in/tags/sublime-text">Sublime text</category>
                                
                            
                        
                    
                
                <guid>https://yashagarwal.in/posts/2016/04/a-good-sublime-text-setup/</guid>
                <pubDate>Thu, 14 Apr 2016 10:55:35 +0000</pubDate>
            </item>
        
    </channel>
</rss>


