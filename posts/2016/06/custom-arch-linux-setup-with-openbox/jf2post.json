{"author":{"name":"Yash Agarwal","type":"card","url":"https://yashagarwal.in/"},"content":{"html":"\n\n\n\n    \n\n    \n    \n\n    \n    \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe.min.css\" integrity=\"sha256-sCl5PUOGMLfFYctzDW3MtRib0ctyUvI9Qsmq2wXOeBY=\" crossorigin=\"anonymous\" /\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/default-skin/default-skin.min.css\" integrity=\"sha256-BFeI1V+Vh1Rk37wswuOYn5lsTcaU96hGaI7OUVCLjPc=\" crossorigin=\"anonymous\" /\u003e\n\n    \n    \u003clink rel=\"stylesheet\" href=\"/css/photoswipe.min.d780348a887d97b4d6cc664301a2941706e4a02aeb1533524fcce3b7b9b64b4f.css\"\u003e\n\n    \n\n    \n    \u003cdiv class=\"pswp\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\"\u003e\n        \n        \u003cdiv class=\"pswp__bg\"\u003e\u003c/div\u003e\n        \n        \u003cdiv class=\"pswp__scroll-wrap\"\u003e\n            \n            \u003cdiv class=\"pswp__container\"\u003e\n                \u003cdiv class=\"pswp__item\"\u003e\u003c/div\u003e\n                \u003cdiv class=\"pswp__item\"\u003e\u003c/div\u003e\n                \u003cdiv class=\"pswp__item\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n            \n            \u003cdiv class=\"pswp__ui pswp__ui--hidden\"\u003e\n                \u003cdiv class=\"pswp__top-bar\"\u003e\n                    \n                    \u003cdiv class=\"pswp__counter\"\u003e\u003c/div\u003e\n                    \u003cbutton class=\"pswp__button pswp__button--close\" title=\"Close (Esc)\"\u003e\u003c/button\u003e\n                    \u003cbutton class=\"pswp__button pswp__button--share\" title=\"Share\"\u003e\u003c/button\u003e\n                    \u003cbutton class=\"pswp__button pswp__button--fs\" title=\"Toggle fullscreen\"\u003e\u003c/button\u003e\n                    \u003cbutton class=\"pswp__button pswp__button--zoom\" title=\"Zoom in/out\"\u003e\u003c/button\u003e\n                    \n                    \n                    \u003cdiv class=\"pswp__preloader\"\u003e\n                        \u003cdiv class=\"pswp__preloader__icn\"\u003e\n                            \u003cdiv class=\"pswp__preloader__cut\"\u003e\n                                \u003cdiv class=\"pswp__preloader__donut\"\u003e\u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"pswp__share-modal pswp__share-modal--hidden pswp__single-tap\"\u003e\n                    \u003cdiv class=\"pswp__share-tooltip\"\u003e\u003c/div\u003e\n                \u003c/div\u003e\n                \u003cbutton class=\"pswp__button pswp__button--arrow--left\" title=\"Previous (arrow left)\"\u003e\n                \u003c/button\u003e\n                \u003cbutton class=\"pswp__button pswp__button--arrow--right\" title=\"Next (arrow right)\"\u003e\n                \u003c/button\u003e\n                \u003cdiv class=\"pswp__caption\"\u003e\n                    \u003cdiv class=\"pswp__caption__center\"\u003e\u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n\u003cp\u003eAfter my summer vacation started, I bought a new laptop, and the first thing I did was to install Arch Linux on it. After a standard arch installation procedure, I started putting together my desktop environment, beginning with ArchLinux and Openbox, and then piecing all pieces together to build a proper desktop environment. Building a desktop this way follows the Unix Methodology; have software that each does one thing well, and when you put them together, you get something amazing.\u003c/p\u003e\n\u003cp\u003eWhen I first installed Arch, I had several choices. I tried \u003ccode\u003exfce\u003c/code\u003e and \u003ccode\u003egnome\u003c/code\u003e as my desktop environments. While both of them have their pros and cons, I ended up liking none. The sole reason was the dependencies; these two software bring with them. My only intention of installing Arch was to have something, which I control, not like Ubuntu, where you are forced to use the preinstalled software and when you try to uninstall something, you fear of breaking some other program.\u003c/p\u003e\n\u003cp\u003eSo I end up going the route of building something up from scratch using Openbox as a base. At this point, I have a fast, lightweight desktop that is exceptionally stable and is genuinely my desktop as I have built it from the ground up, choosing every application.\u003c/p\u003e\n\n\n\n    \u003clink rel=\"stylesheet\" href=\"/css/hugo-easy-gallery.css\"\u003e\n    \n\n\n\u003cdiv class=\"box fancy-figure caption-position-none\"  itemscope itemtype=\"http://schema.org/ImageGallery\"\u003e\n    \u003cfigure  itemprop=\"associatedMedia\" itemscope itemtype=\"http://schema.org/ImageObject\"\u003e\n        \u003cdiv class=\"img\"\u003e\n            \u003cimg itemprop=\"thumbnail\" src=\"/images/2016-06-09/desktop.jpg\" alt=\"Openbox on ArchLinux\"/\u003e\n        \u003c/div\u003e\n        \u003ca href=\"/images/2016-06-09/desktop.jpg\" itemprop=\"contentUrl\"\u003e\u003c/a\u003e\n            \u003cfigcaption\u003e\n                    \u003cp\u003eOpenbox on ArchLinux\u003c/p\u003e\n            \u003c/figcaption\u003e\n    \u003c/figure\u003e\n\u003c/div\u003e\n\n\u003ch2 id=\"window-manager\"\u003eWindow Manager\u003c/h2\u003e\n\u003cp\u003eAfter the installation of Arch, the first thing I did was to install \u003ccode\u003eopenbox\u003c/code\u003e, a tiling window manager. You may also try other window managers like \u003ccode\u003eawesome\u003c/code\u003e, \u003ccode\u003ei3\u003c/code\u003e, and \u003ccode\u003efluxbox\u003c/code\u003e, etc. but I chose Openbox because it is used everywhere. Thus there is a plethora of information out there about customizing it.\u003c/p\u003e\n\u003cp\u003eFor our window manager to show up, it needs to be added either in a login manager or user\u0026rsquo;s \u003ccode\u003e~/.xinitrx\u003c/code\u003e file. There is a default version of this file that contain some code which we may want to retain, so rather than making this file from scratch, copy the default version of the file to the user\u0026rsquo;s home directory.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ecp /etc/X11/xinit/xinitrc ~/.xinitrc\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow add the command \u003ccode\u003eexec Openbox-session\u003c/code\u003e to the end of the file. Remember that the system will ignore the lines following this command. An Openbox session should be able to be started by entering the command \u003ccode\u003estartx\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eAn openbox session can be started automatically upon login using shell\u0026rsquo;s startup script. Add following to the shell\u0026rsquo;s startup script, \u003ccode\u003e~/.bash_profile\u003c/code\u003e for bash and \u003ccode\u003e~/.zprofile\u003c/code\u003e for zsh.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"o\"\u003e[[\u003c/span\u003e -z \u003cspan class=\"nv\"\u003e$DISPLAY\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nv\"\u003e$XDG_VTNR\u003c/span\u003e -eq \u003cspan class=\"m\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e]]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nb\"\u003eexec\u003c/span\u003e startx\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"configuring-openbox\"\u003eConfiguring Openbox\u003c/h2\u003e\n\u003cp\u003eSetting up openbox is quite simple. Four files make the basis of openbox configuration. They are \u003ccode\u003erc.xml\u003c/code\u003e, \u003ccode\u003eautostart\u003c/code\u003e,  \u003ccode\u003emenu.xml\u003c/code\u003e and \u003ccode\u003eenvironment\u003c/code\u003e. These files controls everything about the window manager.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003erc.xml\u003c/strong\u003e: Determine the behavior and settings of overall Openbox session\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eautostart\u003c/strong\u003e: Contains a list of applications to be launched with the window manager\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003emenu.xml\u003c/strong\u003e: It makes the right-click context menu of the desktop\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eenvironment\u003c/strong\u003e: Can be used to export and set relevant environmental variables\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor the configuration of Openbox, it is necessary to create a local Openbox profile in the user\u0026rsquo;s home directory. A global configuration file can be found in \u003ccode\u003e/etc/xdg/openbox\u003c/code\u003e, which is well documented, and copying the global configuration to the user\u0026rsquo;s directory will give a good starting point to start customizing.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ecp -R /etc/xdg/openbox ~/.config/\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThese files can be edited by hand, although some graphical tools are also available, use of these may be desired.\u003c/p\u003e\n\u003ch2 id=\"themes-and-appearance\"\u003eThemes and Appearance\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://www.archlinux.org/packages/community/x86_64/obconf\"\u003eobconf\u003c/a\u003e and \u003ca href=\"https://www.archlinux.org/packages/community/x86_64/lxappearance-obconf/\"\u003elxappearance-obconf\u003c/a\u003e can be used to configure appearance and theme of openbox session. There are quite a few themes available in \u003ca href=\"https://www.archlinux.org/packages/community/any/openbox-themes/\"\u003eopenbox-themes\u003c/a\u003e package. My personal favorite is \u003ca href=\"https://www.archlinux.org/packages/community/any/numix-themes/\"\u003eNumix-themes\u003c/a\u003e and \u003ca href=\"https://aur.archlinux.org/packages/numix-icon-theme-git/\"\u003eNumix-icon-theme-git (AUR)\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eTo see changes after editing a configuration file, the Openbox needs to be refreshed. It can be done with the \u003ccode\u003ereconfigure\u003c/code\u003e command.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eopenbox --reconfigure\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"menus\"\u003eMenus\u003c/h2\u003e\n\u003cp\u003eThe type and behavior of Openbox menus, accessible by right-clicking the background, can be changed using \u003ccode\u003e~/.config/openbox/menu.xml\u003c/code\u003e file. Openbox provides two kinds of menus, \u003ccode\u003eStatic\u003c/code\u003e, and \u003ccode\u003eDynamic\u003c/code\u003e menus (Piped and Generators)\u003c/p\u003e\n\u003cp\u003eStatic menus are hardcoded in XML and is stored in the \u003ccode\u003emenu.xml\u003c/code\u003e file. Whenever you install a new application, you will have to update the XML file to update the menu manually. It is a viable solution if the apps are not installed on a day to day basis.\u003c/p\u003e\n\u003cp\u003ePipe menus are the sections of the Openbox menu that Openbox creates on the fly by running a generic script and using its plain text output as menu entries. This scheme can be used in different ways, like adding a mail checker in the menu or adding a weather forecast menu. You can check \u003ca href=\"http://openbox.org/wiki/Openbox:Pipemenus\"\u003eopenbox pipe menu page\u003c/a\u003e for more information.\u003c/p\u003e\n\u003cp\u003eGenerators are the most convenient type of menus. These can be found in most desktop environments where applications show up in the menu automatically. If applications are being installed regularly, then this will probably be the preferred choice.\u003c/p\u003e\n\u003ch3 id=\"static-menus\"\u003eStatic Menus\u003c/h3\u003e\n\u003cp\u003eThe process of making these menus can be automated by static menu generator like \u003ca href=\"https://www.archlinux.org/packages/?name=obmenu\"\u003eobmenu\u003c/a\u003e. It will generate static menus from installed applications by looking into certain directories. Others available tools are \u003ca href=\"https://www.archlinux.org/packages/?name=menumaker\"\u003emenumaker\u003c/a\u003e, \u003ca href=\"https://www.archlinux.org/packages/?name=obmenu\"\u003eobmenu\u003c/a\u003e and \u003ca href=\"https://www.archlinux.org/packages/?name=archlinux-xdg-menu\"\u003exdg-menu\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"dynamic-menus\"\u003eDynamic Menus\u003c/h3\u003e\n\u003cp\u003eDynamic menus give the same kind of functionality most people are used to. So it was my preferred choice. They can be used to generate full, complex menus on the fly. One of the most popular application for generating dynamic menus is \u003ca href=\"https://aur.archlinux.org/packages/obmenu-generator/\"\u003eobmenu-generator (AUR)\u003c/a\u003e. Though it is not officially connected to Openbox, it is widely used.\u003c/p\u003e\n\u003cp\u003eIn order to have \u003ca href=\"https://aur.archlinux.org/packages/obmenu-generator/\"\u003eobmenu-generator (AUR)\u003c/a\u003e make a menu on demand, the \u003ccode\u003emenu.xml\u003c/code\u003e file should contain the following code as the only entry.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u0026lt;?xml \u003cspan class=\"nv\"\u003eversion\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;1.0\u0026#34;\u003c/span\u003e \u003cspan class=\"nv\"\u003eencoding\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;UTF-8\u0026#34;\u003c/span\u003e?\u0026gt;\r\n\u0026lt;openbox_menu\u0026gt;\r\n    \u0026lt;menu \u003cspan class=\"nv\"\u003eid\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;root-menu\u0026#34;\u003c/span\u003e \u003cspan class=\"nv\"\u003elabel\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;OpenBox 3\u0026#34;\u003c/span\u003e \u003cspan class=\"nv\"\u003eexecute\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;/usr/bin/obmenu-generator\u0026#34;\u003c/span\u003e\u0026gt;\u0026lt;/menu\u0026gt;\r\n\u0026lt;/openbox_menu\u0026gt;\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"panels-and-taskbars\"\u003ePanels and Taskbars\u003c/h2\u003e\n\u003cp\u003eYou can get any panel like \u003ca href=\"https://www.archlinux.org/packages/extra/i686/xfce4-panel/\"\u003exfce4-panel\u003c/a\u003e or the simple and customizable \u003ca href=\"https://www.archlinux.org/packages/?name=tint2\"\u003etint2\u003c/a\u003e. I chose tint2 because it very closely follows the openbox spirit of having easy customization with plain configuration files. tint2 package also containg a graphical tool \u003ccode\u003etint2conf\u003c/code\u003e for customizing panel and you can obviously go right to the tint2 configuration file and edit it there. This also means it is easy to pick up your configuration file and move it to another computer, or restore an old configuration since it is as simple as pasting a text document in the right place. tint2 can also have sections for each individual desktop and has various small widget like programs that can be used with it such as a calendar, \u003ca href=\"https://www.archlinux.org/packages/community/x86_64/gsimplecal/\"\u003egsimplecal\u003c/a\u003e, a volume application, \u003ca href=\"https://www.archlinux.org/packages/?name=volumeicon\"\u003evolumeicon\u003c/a\u003e, a battery indicator, \u003ca href=\"https://www.archlinux.org/packages/?name=cbatticon\"\u003ecbatticon\u003c/a\u003e, a network indicator like \u003ca href=\"https://www.archlinux.org/packages/extra/any/wicd/\"\u003ewicd\u003c/a\u003e which also have a system tray icon and a mini task tray. To start tint2 with openbox, you need to add \u003ccode\u003etint2 \u0026amp;\u003c/code\u003e to the \u003ccode\u003eautostart\u003c/code\u003e file.\u003c/p\u003e\n\u003ch2 id=\"file-manager\"\u003eFile Manager\u003c/h2\u003e\n\u003cp\u003eSome file managers deeply integrate into desktop environments, and when installed with Openbox, they end up pulling multiple dependencies, which is certainly not desired. Our aim behind building an Openbox set up was to have minimum dependencies so that we can get a lightweight desktop. However, there are several file managers available that fit into the Openbox very well. In my choice, \u003ca href=\"https://www.archlinux.org/packages/?name=pcmanfm\"\u003epcmanfm\u003c/a\u003e is the best choice here. pcmanfm is a lightweight and fast file manager with network and thrash support. pcmanfm can also manage desktop icons and wallpaper setting, although if you plan to use conky in your system, then you may not want pcmanfm to manage desktop for you. The reason is that pcmanfm treats desktop as a window, so when you switch to desktop, the conky hides behind the desktop window. To get the icons and wallpaper, you can use other standalone tools such as \u003ca href=\"https://www.archlinux.org/packages/community/x86_64/idesk/\"\u003e\u003ccode\u003eidesk\u003c/code\u003e\u003c/a\u003e and \u003ca href=\"https://www.archlinux.org/packages/extra/x86_64/feh/\"\u003e\u003ccode\u003efeh\u003c/code\u003e\u003c/a\u003e or \u003ca href=\"https://www.archlinux.org/packages/extra/x86_64/nitrogen/\"\u003e\u003ccode\u003enitrogen\u003c/code\u003e\u003c/a\u003e.\nTo start pcmanfm is the desktop mode, add the following to the autostart file.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003epcmanfm --desktop \u003cspan class=\"p\"\u003e\u0026amp;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eand to stop it for managing desktop\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003epcmanfm --desktop-off \u003cspan class=\"p\"\u003e\u0026amp;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eMany functions present in modern file managers require the installation of a few additional programs. \u003ca href=\"https://www.archlinux.org/packages/?name=gvfs\"\u003e\u003ccode\u003egvfs\u003c/code\u003e\u003c/a\u003e gives you the ability to mount volumes and have trash control. It is not mandatory to have, but it allows on-demand mounting completely from within the file manager, as opposed to having to drop down to the command line. A disk-volume manager such as \u003ca href=\"https://www.archlinux.org/packages/?name=udisks2\"\u003e\u003ccode\u003eudisks2\u003c/code\u003e\u003c/a\u003e will also be wanted, and for auto-mounting removable disks, \u003ca href=\"https://www.archlinux.org/packages/community/any/udiskie/\"\u003e\u003ccode\u003eudiskie\u003c/code\u003e\u003c/a\u003e works well with Openbox. udiskie can be added to Openbox\u0026rsquo;s autostart file like any other application.\u003c/p\u003e\n\u003ch2 id=\"composition\"\u003eComposition\u003c/h2\u003e\n\u003cp\u003eOpenbox does not provide native support for composition, although having a compositor may prevent screen flickering and other distortion in applications like \u003ca href=\"https://www.archlinux.org/packages/community/any/oblogout/\"\u003e\u003ccode\u003eoblogout\u003c/code\u003e\u003c/a\u003e. Some options work great with Openbox. The one which I am using and quite happy with is \u003ca href=\"https://wiki.archlinux.org/index.php/Compton\"\u003e\u003ccode\u003ecompton\u003c/code\u003e\u003c/a\u003e. It can be used with or without any initial configuration, although there are a lot of different configuration options if you decide to customize the setup. To start compton in background with shadows, use this in \u003ccode\u003eautostart\u003c/code\u003e file.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ecompton -b -c \u003cspan class=\"p\"\u003e\u0026amp;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch2 id=\"wrapping-up\"\u003eWrapping up\u003c/h2\u003e\n\u003cp\u003eWhile setting up my desktop using Openbox ended up being much more work than I could have with typical desktop environments. But now I have a much more stable desktop, about which I know, what is running in my system, and that my system is not cluttered with any software that I never use.\u003c/p\u003e\n\u003cp\u003eWhile it might not be for everybody having to configure every little bit of the desktop, I genuinely feel I have ended up with excellent user experience, and a system that is customized precisely to fit my needs.\u003c/p\u003e\n\u003ch2 id=\"references\"\u003eReferences\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://wiki.archlinux.org/\"\u003eArch Linux Wiki\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","text":"                         After my summer vacation started, I bought a new laptop, and the first thing I did was to install Arch Linux on it. After a standard arch installation procedure, I started putting together my desktop environment, beginning with ArchLinux and Openbox, and then piecing all pieces together to build a proper desktop environment. Building a desktop this way follows the Unix Methodology; have software that each does one thing well, and when you put them together, you get something amazing.\nWhen I first installed Arch, I had several choices. I tried xfce and gnome as my desktop environments. While both of them have their pros and cons, I ended up liking none. The sole reason was the dependencies; these two software bring with them. My only intention of installing Arch was to have something, which I control, not like Ubuntu, where you are forced to use the preinstalled software and when you try to uninstall something, you fear of breaking some other program.\nSo I end up going the route of building something up from scratch using Openbox as a base. At this point, I have a fast, lightweight desktop that is exceptionally stable and is genuinely my desktop as I have built it from the ground up, choosing every application.\n   Openbox on ArchLinux\n   Window Manager After the installation of Arch, the first thing I did was to install openbox, a tiling window manager. You may also try other window managers like awesome, i3, and fluxbox, etc. but I chose Openbox because it is used everywhere. Thus there is a plethora of information out there about customizing it.\nFor our window manager to show up, it needs to be added either in a login manager or user\u0026rsquo;s ~/.xinitrx file. There is a default version of this file that contain some code which we may want to retain, so rather than making this file from scratch, copy the default version of the file to the user\u0026rsquo;s home directory.\ncp /etc/X11/xinit/xinitrc ~/.xinitrc Now add the command exec Openbox-session to the end of the file. Remember that the system will ignore the lines following this command. An Openbox session should be able to be started by entering the command startx.\nAn openbox session can be started automatically upon login using shell\u0026rsquo;s startup script. Add following to the shell\u0026rsquo;s startup script, ~/.bash_profile for bash and ~/.zprofile for zsh.\n[[ -z $DISPLAY \u0026amp;\u0026amp; $XDG_VTNR -eq 1 ]] \u0026amp;\u0026amp; exec startx Configuring Openbox Setting up openbox is quite simple. Four files make the basis of openbox configuration. They are rc.xml, autostart, menu.xml and environment. These files controls everything about the window manager.\n rc.xml: Determine the behavior and settings of overall Openbox session autostart: Contains a list of applications to be launched with the window manager menu.xml: It makes the right-click context menu of the desktop environment: Can be used to export and set relevant environmental variables  For the configuration of Openbox, it is necessary to create a local Openbox profile in the user\u0026rsquo;s home directory. A global configuration file can be found in /etc/xdg/openbox, which is well documented, and copying the global configuration to the user\u0026rsquo;s directory will give a good starting point to start customizing.\ncp -R /etc/xdg/openbox ~/.config/ These files can be edited by hand, although some graphical tools are also available, use of these may be desired.\nThemes and Appearance obconf and lxappearance-obconf can be used to configure appearance and theme of openbox session. There are quite a few themes available in openbox-themes package. My personal favorite is Numix-themes and Numix-icon-theme-git (AUR).\nTo see changes after editing a configuration file, the Openbox needs to be refreshed. It can be done with the reconfigure command.\nopenbox --reconfigure Menus The type and behavior of Openbox menus, accessible by right-clicking the background, can be changed using ~/.config/openbox/menu.xml file. Openbox provides two kinds of menus, Static, and Dynamic menus (Piped and Generators)\nStatic menus are hardcoded in XML and is stored in the menu.xml file. Whenever you install a new application, you will have to update the XML file to update the menu manually. It is a viable solution if the apps are not installed on a day to day basis.\nPipe menus are the sections of the Openbox menu that Openbox creates on the fly by running a generic script and using its plain text output as menu entries. This scheme can be used in different ways, like adding a mail checker in the menu or adding a weather forecast menu. You can check openbox pipe menu page for more information.\nGenerators are the most convenient type of menus. These can be found in most desktop environments where applications show up in the menu automatically. If applications are being installed regularly, then this will probably be the preferred choice.\nStatic Menus The process of making these menus can be automated by static menu generator like obmenu. It will generate static menus from installed applications by looking into certain directories. Others available tools are menumaker, obmenu and xdg-menu.\nDynamic Menus Dynamic menus give the same kind of functionality most people are used to. So it was my preferred choice. They can be used to generate full, complex menus on the fly. One of the most popular application for generating dynamic menus is obmenu-generator (AUR). Though it is not officially connected to Openbox, it is widely used.\nIn order to have obmenu-generator (AUR) make a menu on demand, the menu.xml file should contain the following code as the only entry.\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt;\r\u0026lt;openbox_menu\u0026gt;\r\u0026lt;menu id=\u0026#34;root-menu\u0026#34; label=\u0026#34;OpenBox 3\u0026#34; execute=\u0026#34;/usr/bin/obmenu-generator\u0026#34;\u0026gt;\u0026lt;/menu\u0026gt;\r\u0026lt;/openbox_menu\u0026gt; Panels and Taskbars You can get any panel like xfce4-panel or the simple and customizable tint2. I chose tint2 because it very closely follows the openbox spirit of having easy customization with plain configuration files. tint2 package also containg a graphical tool tint2conf for customizing panel and you can obviously go right to the tint2 configuration file and edit it there. This also means it is easy to pick up your configuration file and move it to another computer, or restore an old configuration since it is as simple as pasting a text document in the right place. tint2 can also have sections for each individual desktop and has various small widget like programs that can be used with it such as a calendar, gsimplecal, a volume application, volumeicon, a battery indicator, cbatticon, a network indicator like wicd which also have a system tray icon and a mini task tray. To start tint2 with openbox, you need to add tint2 \u0026amp; to the autostart file.\nFile Manager Some file managers deeply integrate into desktop environments, and when installed with Openbox, they end up pulling multiple dependencies, which is certainly not desired. Our aim behind building an Openbox set up was to have minimum dependencies so that we can get a lightweight desktop. However, there are several file managers available that fit into the Openbox very well. In my choice, pcmanfm is the best choice here. pcmanfm is a lightweight and fast file manager with network and thrash support. pcmanfm can also manage desktop icons and wallpaper setting, although if you plan to use conky in your system, then you may not want pcmanfm to manage desktop for you. The reason is that pcmanfm treats desktop as a window, so when you switch to desktop, the conky hides behind the desktop window. To get the icons and wallpaper, you can use other standalone tools such as idesk and feh or nitrogen. To start pcmanfm is the desktop mode, add the following to the autostart file.\npcmanfm --desktop \u0026amp; and to stop it for managing desktop\npcmanfm --desktop-off \u0026amp; Many functions present in modern file managers require the installation of a few additional programs. gvfs gives you the ability to mount volumes and have trash control. It is not mandatory to have, but it allows on-demand mounting completely from within the file manager, as opposed to having to drop down to the command line. A disk-volume manager such as udisks2 will also be wanted, and for auto-mounting removable disks, udiskie works well with Openbox. udiskie can be added to Openbox\u0026rsquo;s autostart file like any other application.\nComposition Openbox does not provide native support for composition, although having a compositor may prevent screen flickering and other distortion in applications like oblogout. Some options work great with Openbox. The one which I am using and quite happy with is compton. It can be used with or without any initial configuration, although there are a lot of different configuration options if you decide to customize the setup. To start compton in background with shadows, use this in autostart file.\ncompton -b -c \u0026amp; Wrapping up While setting up my desktop using Openbox ended up being much more work than I could have with typical desktop environments. But now I have a much more stable desktop, about which I know, what is running in my system, and that my system is not cluttered with any software that I never use.\nWhile it might not be for everybody having to configure every little bit of the desktop, I genuinely feel I have ended up with excellent user experience, and a system that is customized precisely to fit my needs.\nReferences  Arch Linux Wiki  "},"name":"Custom Arch Linux setup with Openbox","published":"2016-06-09T10:20:36Z","summary":"After my summer vacation started, I bought a new laptop, and the first thing I did was to install Arch Linux on it. After a standard arch installation procedure, I started putting together my desktop environment, beginning with ArchLinux and Openbox, and then piecing all pieces together to build a proper desktop environment.","type":"entry","url":"https://yashagarwal.in/posts/2016/06/custom-arch-linux-setup-with-openbox/"}