{"author":{"name":"Yash Agarwal","type":"card","url":"https://yashagarwal.in/"},"content":{"html":"\n\n\n\n    \n\n    \n    \n\n    \n    \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/photoswipe.min.css\" integrity=\"sha256-sCl5PUOGMLfFYctzDW3MtRib0ctyUvI9Qsmq2wXOeBY=\" crossorigin=\"anonymous\" /\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/photoswipe/4.1.1/default-skin/default-skin.min.css\" integrity=\"sha256-BFeI1V+Vh1Rk37wswuOYn5lsTcaU96hGaI7OUVCLjPc=\" crossorigin=\"anonymous\" /\u003e\n\n    \n    \u003clink rel=\"stylesheet\" href=\"/css/photoswipe.min.d780348a887d97b4d6cc664301a2941706e4a02aeb1533524fcce3b7b9b64b4f.css\"\u003e\n\n    \n\n    \n    \u003cdiv class=\"pswp\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\"\u003e\n        \n        \u003cdiv class=\"pswp__bg\"\u003e\u003c/div\u003e\n        \n        \u003cdiv class=\"pswp__scroll-wrap\"\u003e\n            \n            \u003cdiv class=\"pswp__container\"\u003e\n                \u003cdiv class=\"pswp__item\"\u003e\u003c/div\u003e\n                \u003cdiv class=\"pswp__item\"\u003e\u003c/div\u003e\n                \u003cdiv class=\"pswp__item\"\u003e\u003c/div\u003e\n            \u003c/div\u003e\n            \n            \u003cdiv class=\"pswp__ui pswp__ui--hidden\"\u003e\n                \u003cdiv class=\"pswp__top-bar\"\u003e\n                    \n                    \u003cdiv class=\"pswp__counter\"\u003e\u003c/div\u003e\n                    \u003cbutton class=\"pswp__button pswp__button--close\" title=\"Close (Esc)\"\u003e\u003c/button\u003e\n                    \u003cbutton class=\"pswp__button pswp__button--share\" title=\"Share\"\u003e\u003c/button\u003e\n                    \u003cbutton class=\"pswp__button pswp__button--fs\" title=\"Toggle fullscreen\"\u003e\u003c/button\u003e\n                    \u003cbutton class=\"pswp__button pswp__button--zoom\" title=\"Zoom in/out\"\u003e\u003c/button\u003e\n                    \n                    \n                    \u003cdiv class=\"pswp__preloader\"\u003e\n                        \u003cdiv class=\"pswp__preloader__icn\"\u003e\n                            \u003cdiv class=\"pswp__preloader__cut\"\u003e\n                                \u003cdiv class=\"pswp__preloader__donut\"\u003e\u003c/div\u003e\n                            \u003c/div\u003e\n                        \u003c/div\u003e\n                    \u003c/div\u003e\n                \u003c/div\u003e\n                \u003cdiv class=\"pswp__share-modal pswp__share-modal--hidden pswp__single-tap\"\u003e\n                    \u003cdiv class=\"pswp__share-tooltip\"\u003e\u003c/div\u003e\n                \u003c/div\u003e\n                \u003cbutton class=\"pswp__button pswp__button--arrow--left\" title=\"Previous (arrow left)\"\u003e\n                \u003c/button\u003e\n                \u003cbutton class=\"pswp__button pswp__button--arrow--right\" title=\"Next (arrow right)\"\u003e\n                \u003c/button\u003e\n                \u003cdiv class=\"pswp__caption\"\u003e\n                    \u003cdiv class=\"pswp__caption__center\"\u003e\u003c/div\u003e\n                \u003c/div\u003e\n            \u003c/div\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n\u003cp\u003eIn the last \u003ca href=\"/posts/2019/02/go-grpc-opa-a-perfect-union-part-1/\"\u003epost\u003c/a\u003e, we discussed about the structure of our library\napplication. In this post, we will define the data definitions using protobuf, and then we will use these definitions to\ncreate a Go service. We will also add a REST interface to the service. So let\u0026rsquo;s get started.\u003c/p\u003e\n\u003ch2 id=\"defining-proto-definitions\"\u003eDefining Proto Definitions\u003c/h2\u003e\n\u003cp\u003egRPC uses protocol buffers for serializing structured data. To define the structure of the data that you want to serialize, we use a \u003cem\u003eproto\u003c/em\u003e file - it is a simple text file that contains all the logical pieces of your data in the form of \u003cem\u003emessages\u003c/em\u003e, and the methods that will be called over the network. To know more about the syntax of proto files, visit \u003ca href=\"https://grpc.io/docs/guides/\"\u003ethis\u003c/a\u003e link.\u003c/p\u003e\n\u003cp\u003eI have defined the following proto file -\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-proto\" data-lang=\"proto\"\u003e\u003cspan class=\"n\"\u003esyntax\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;proto3\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"kn\"\u003epackage\u003c/span\u003e \u003cspan class=\"nn\"\u003elibrary\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eimport\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;google/api/annotations.proto\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003eservice\u003c/span\u003e \u003cspan class=\"n\"\u003eLibraryService\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"k\"\u003erpc\u003c/span\u003e \u003cspan class=\"n\"\u003eListAllBooks\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eQueryFormat\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturns\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eBooks\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003eoption\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egoogle.api.http\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e      \u003cspan class=\"n\"\u003epost\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;/listBooks\u0026#34;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e      \u003cspan class=\"n\"\u003ebody\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;*\u0026#34;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"p\"\u003e};\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"p\"\u003e};\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"k\"\u003erpc\u003c/span\u003e \u003cspan class=\"n\"\u003eAddBook\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eQueryFormat\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturns\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eResponse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003eoption\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egoogle.api.http\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e      \u003cspan class=\"n\"\u003epost\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;/addBook\u0026#34;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e      \u003cspan class=\"n\"\u003ebody\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;*\u0026#34;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"p\"\u003e};\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"p\"\u003e};\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"k\"\u003erpc\u003c/span\u003e \u003cspan class=\"n\"\u003eSearchBook\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eQueryFormat\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturns\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eResponse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"k\"\u003eoption\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003egoogle.api.http\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e      \u003cspan class=\"n\"\u003epost\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;/searchBook\u0026#34;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e      \u003cspan class=\"n\"\u003ebody\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;*\u0026#34;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"p\"\u003e};\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"p\"\u003e};\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e// the library\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003emessage\u003c/span\u003e \u003cspan class=\"nc\"\u003eLibrary\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003eBooks\u003c/span\u003e \u003cspan class=\"n\"\u003ebooks\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003emessage\u003c/span\u003e \u003cspan class=\"nc\"\u003eBooks\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"k\"\u003erepeated\u003c/span\u003e \u003cspan class=\"n\"\u003eBook\u003c/span\u003e \u003cspan class=\"n\"\u003ebooks\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e// metadata about a book\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003emessage\u003c/span\u003e \u003cspan class=\"nc\"\u003eBook\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003etitle\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003eauthor\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003eisbn\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003eint32\u003c/span\u003e \u003cspan class=\"n\"\u003eno_of_copies\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003eint32\u003c/span\u003e \u003cspan class=\"n\"\u003eaccess_level\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e// details about a user\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003emessage\u003c/span\u003e \u003cspan class=\"nc\"\u003eUser\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kd\"\u003eenum\u003c/span\u003e \u003cspan class=\"n\"\u003eUserType\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// https://github.com/golang/protobuf/issues/258\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eGARBAGE\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eStudent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eAdministration\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eFaculty\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003eint32\u003c/span\u003e \u003cspan class=\"n\"\u003eid_no\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"n\"\u003eUserType\u003c/span\u003e \u003cspan class=\"n\"\u003euser_type\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003emessage\u003c/span\u003e \u003cspan class=\"nc\"\u003eQueryFormat\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"n\"\u003eBook\u003c/span\u003e \u003cspan class=\"n\"\u003ebook\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"n\"\u003eUser\u003c/span\u003e \u003cspan class=\"n\"\u003euser\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003emessage\u003c/span\u003e \u003cspan class=\"nc\"\u003eResponse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003eaction\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003eint32\u003c/span\u003e \u003cspan class=\"n\"\u003estatus\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"kt\"\u003estring\u003c/span\u003e \u003cspan class=\"kd\"\u003emessage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"k\"\u003eoneof\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eBook\u003c/span\u003e \u003cspan class=\"n\"\u003ebook\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e    \u003cspan class=\"n\"\u003eUser\u003c/span\u003e \u003cspan class=\"n\"\u003euser_data\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003emessage\u003c/span\u003e \u003cspan class=\"nc\"\u003eEmpty\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eTo compile it, run the following commands -\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eprotoc -I/usr/local/include -I. \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e-I\u003cspan class=\"nv\"\u003e$GOPATH\u003c/span\u003e/src \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e-I\u003cspan class=\"nv\"\u003e$GOPATH\u003c/span\u003e/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e--go_out\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nv\"\u003eplugins\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003egrpc:. \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003eapi/library.proto\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eprotoc -I/usr/local/include -I. \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  -I\u003cspan class=\"nv\"\u003e$GOPATH\u003c/span\u003e/src \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  -I\u003cspan class=\"nv\"\u003e$GOPATH\u003c/span\u003e/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  --grpc-gateway_out\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"nv\"\u003elogtostderr\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003etrue:. \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e  api/library.proto\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eIt will generate corresponding Golang definitions of the messages and services defined in the Proto file. These\ndefinitions can be used by the server and client stubs to communicate with each other.\u003c/p\u003e\n\u003ch2 id=\"implementation-of-go-service\"\u003eImplementation of Go service\u003c/h2\u003e\n\u003cp\u003eNow we can start implementing the code for our services \u003ccode\u003eAddBook()\u003c/code\u003e, \u003ccode\u003eListAllBooks()\u003c/code\u003e and \u003ccode\u003eSearchBook()\u003c/code\u003e. It is going to\nbe a very naive implementation of a library system, but it will be sufficient to learn all the concepts.\u003c/p\u003e\n\u003cp\u003eMy implementation of the server stub is hosted\n\u003ca href=\"https://github.com/yashhere/go-library-service/blob/master/pkg/librarylib/server.go\"\u003ehere\u003c/a\u003e. A basic flow diagram of\nthis implementation will look like this -\u003c/p\u003e\n\n\n\n    \u003clink rel=\"stylesheet\" href=\"/css/hugo-easy-gallery.css\"\u003e\n    \n\n\n\u003cdiv class=\"box fancy-figure caption-position-bottom caption-effect-appear\" style=\"max-width:650px\" itemscope itemtype=\"http://schema.org/ImageGallery\"\u003e\n    \u003cfigure  itemprop=\"associatedMedia\" itemscope itemtype=\"http://schema.org/ImageObject\"\u003e\n        \u003cdiv class=\"img\"\u003e\n            \u003cimg itemprop=\"thumbnail\" src=\"/images/2019-02-17/OPA_Service_Flow_Diagram.jpeg#center\" alt=\"Architecture\"/\u003e\n        \u003c/div\u003e\n        \u003ca href=\"/images/2019-02-17/OPA_Service_Flow_Diagram.jpeg#center\" itemprop=\"contentUrl\"\u003e\u003c/a\u003e\n    \u003c/figure\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThe gRPC server will listen on port \u003ccode\u003e:50051\u003c/code\u003e, and a REST HTTP server will listen on port \u003ccode\u003e:8181\u003c/code\u003e. The OPA server is\nrunning on port \u003ccode\u003e:8182\u003c/code\u003e. The REST server is\nimplemented using \u003ca href=\"https://github.com/grpc-ecosystem/grpc-gateway\"\u003egRPC-Gateway\u003c/a\u003e. There are three methods - \u003ccode\u003eAddBook()\u003c/code\u003e,\n\u003ccode\u003eListAllBooks()\u003c/code\u003e, and \u003ccode\u003eSearchBook()\u003c/code\u003e. These methods can be called using either gRPC methods or using the REST endpoints\n\u003ccode\u003e/addBook\u003c/code\u003e, \u003ccode\u003e/listBooks\u003c/code\u003e and \u003ccode\u003e/searchBook\u003c/code\u003e. By design, the library gRPC service will not implement the authentication\npart of the service. The main purpose of using gRPC here is to provide a scalable and secure medium where all the\ncommunication between client and server is happening in binary format, which is slightly more secure than the\ntraditional mediums. In the current form, this gRPC server will accept requests from everyone and execute the desired\nfunctions. That is not desirable. What if a student tries to add a book to the library. Only Admins should be allowed to\nexecute such functions. What if someone who is not a student of the University tries to access the service. How to stop\nthem?\u003c/p\u003e\n\u003cp\u003eThere are two steps to solve this issue -\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eAuthentication\u003c/strong\u003e - It mainly deals with the question - who are you? It is a way to gain access to the system by verifying your identity. In our case, a user will provide its username and password to access the library service.\nWithout this authentication, the user will not be able to access the system. We will not be implementing authentication\nfunctionality in our application.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eAuthorization\u003c/strong\u003e - It deals with the question - which resources are you allowed to use? OPA can be used here to define various rights based on the access levels of the users.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIf you have noticed, I have defined an \u003ccode\u003eaccess_level\u003c/code\u003e field in the proto definition of the \u003ccode\u003eBook\u003c/code\u003e. This field will tell\nus what is the minimum access level required for a user to access this book.\u003c/p\u003e\n\u003cp\u003eAgain, in the proto definition of the \u003ccode\u003eUser\u003c/code\u003e, I have defined a \u003ccode\u003euser_type\u003c/code\u003e field. This field will serve as an indicator of\nthe access rights of the user. In the real world, these access rights will be decided after the user has authenticated\nherself to\nthe system, but here, we will hardcode the access rights.\u003c/p\u003e\n\u003cp\u003eSo, only users with access rights equal to \u003ccode\u003eAdministration\u003c/code\u003e will be allowed to add books to the system. Here we do not\ncare who the user is. If the user is supplying the correct access right, she will be allowed to operate.\nThe authentication logic in real-world scenarios will determine the \u003cem\u003ewho\u003c/em\u003e part.\u003c/p\u003e\n\u003cp\u003eThere are some books in the library, which have access rights equal to that of a \u003ccode\u003eFaculty\u003c/code\u003e. It means that only faculties\nwill be allowed to access those books. The students will not be able to access these books, even while searching for\nbooks using ISBN. This kind of mechanism can be implemented using OPA very quickly. We will see the implementation of the OPA\npart in the next post.\u003c/p\u003e\n\u003cp\u003eWhile querying the service, users are required to supply their identity (at least \u003ccode\u003euser_type\u003c/code\u003e) and the book ISBN if\nthey are searching for some book. The administrators are supposed to provide the name, author, access level, number of copies, and ISBN while adding the books. I have not added the error checking functionality in the code, but it should be\neasy enough to implement such functionality.\u003c/p\u003e\n\u003cp\u003eThe \u003ca href=\"https://github.com/yashhere/go-library-service/blob/master/cmd/main.go\"\u003emain.go\u003c/a\u003e file is the starting point of this service. It will spawn two servers in two Go Routines. Ideally, some synchronization mechanisms should be implemented in the code to avoid race conditions in some cases - for example, what will happen if two or more clients are trying to add the same book simultaneously. Here in our case, nothing serious\nwill happen, as OPA will take only one book per ISBN, and discard all the other books with the same ISBN even if the other\nmetadata is different (I designed the service in this way to keep the code easy enough to understand), but if there are\nother operations like DeleteBook and IssueBook, then the race conditions can cause issues.\u003c/p\u003e\n\u003cp\u003eIn the \u003ccode\u003eAddBook()\u003c/code\u003e function, the user provided book details will be sent to the OPA server using a REST call. OPA will\nstore this information in its in-memory store at a unique place determined by the ISBN of the book. In actual cases, the data should be stored in some persistent\nstorage, such as a DB. OPA will take the information from the DB. Again, to keep the implementation easy enough to\nunderstand, we are not using any such persistent storage. If any other book with different metadata but the same ISBN comes,\nthen OPA will overwrite the existing book with the new one.\u003c/p\u003e\n\u003cp\u003eIn the \u003ccode\u003eSearchBook()\u003c/code\u003e function, the user will provide the ISBN of the desired book. The gRPC service will call\nthe OPA using REST API and find if any such book exists or not.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eListAllBooks()\u003c/code\u003e is different in the way that it does not need any ISBN.\u003c/p\u003e\n\u003cp\u003eNow, here one problem arises, how to make sure that the search results will not return any book which the user is not\nauthorized to access. We will solve this problem using OPA in the next and last post of this series.\u003c/p\u003e\n\u003cp\u003eI hope that this post was helpful. If you have any doubts or want to say anything else, please comment. It will be a great\nmotivation and appreciation for me.\u003c/p\u003e\n\u003cp\u003eThanks for reading. Cheers 😄\u003c/p\u003e\n","text":"                         In the last post, we discussed about the structure of our library application. In this post, we will define the data definitions using protobuf, and then we will use these definitions to create a Go service. We will also add a REST interface to the service. So let\u0026rsquo;s get started.\nDefining Proto Definitions gRPC uses protocol buffers for serializing structured data. To define the structure of the data that you want to serialize, we use a proto file - it is a simple text file that contains all the logical pieces of your data in the form of messages, and the methods that will be called over the network. To know more about the syntax of proto files, visit this link.\nI have defined the following proto file -\nsyntax = \u0026#34;proto3\u0026#34;;package library;import \u0026#34;google/api/annotations.proto\u0026#34;;service LibraryService { rpc ListAllBooks(QueryFormat) returns (Books) { option (google.api.http) = { post : \u0026#34;/listBooks\u0026#34; body : \u0026#34;*\u0026#34; }; }; rpc AddBook(QueryFormat) returns (Response) { option (google.api.http) = { post : \u0026#34;/addBook\u0026#34; body : \u0026#34;*\u0026#34; }; }; rpc SearchBook(QueryFormat) returns (Response) { option (google.api.http) = { post : \u0026#34;/searchBook\u0026#34; body : \u0026#34;*\u0026#34; }; };}// the library message Library { Books books = 1; }message Books { repeated Book books = 1; }// metadata about a book message Book { string title = 1; string author = 2; string isbn = 3; int32 no_of_copies = 5; int32 access_level = 6;}// details about a user message User { enum UserType { // https://github.com/golang/protobuf/issues/258  GARBAGE = 0; Student = 1; Administration = 2; Faculty = 3; } string name = 1; int32 id_no = 2; UserType user_type = 4;}message QueryFormat { Book book = 1; User user = 2;}message Response { string action = 1; int32 status = 2; string message = 3; oneof value { Book book = 4; User user_data = 5; }}message Empty {} To compile it, run the following commands -\nprotoc -I/usr/local/include -I. \\ -I$GOPATH/src \\ -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \\ --go_out=plugins=grpc:. \\ api/library.proto protoc -I/usr/local/include -I. \\  -I$GOPATH/src \\  -I$GOPATH/src/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis \\  --grpc-gateway_out=logtostderr=true:. \\  api/library.proto It will generate corresponding Golang definitions of the messages and services defined in the Proto file. These definitions can be used by the server and client stubs to communicate with each other.\nImplementation of Go service Now we can start implementing the code for our services AddBook(), ListAllBooks() and SearchBook(). It is going to be a very naive implementation of a library system, but it will be sufficient to learn all the concepts.\nMy implementation of the server stub is hosted here. A basic flow diagram of this implementation will look like this -\n    The gRPC server will listen on port :50051, and a REST HTTP server will listen on port :8181. The OPA server is running on port :8182. The REST server is implemented using gRPC-Gateway. There are three methods - AddBook(), ListAllBooks(), and SearchBook(). These methods can be called using either gRPC methods or using the REST endpoints /addBook, /listBooks and /searchBook. By design, the library gRPC service will not implement the authentication part of the service. The main purpose of using gRPC here is to provide a scalable and secure medium where all the communication between client and server is happening in binary format, which is slightly more secure than the traditional mediums. In the current form, this gRPC server will accept requests from everyone and execute the desired functions. That is not desirable. What if a student tries to add a book to the library. Only Admins should be allowed to execute such functions. What if someone who is not a student of the University tries to access the service. How to stop them?\nThere are two steps to solve this issue -\n  Authentication - It mainly deals with the question - who are you? It is a way to gain access to the system by verifying your identity. In our case, a user will provide its username and password to access the library service. Without this authentication, the user will not be able to access the system. We will not be implementing authentication functionality in our application.\n  Authorization - It deals with the question - which resources are you allowed to use? OPA can be used here to define various rights based on the access levels of the users.\n  If you have noticed, I have defined an access_level field in the proto definition of the Book. This field will tell us what is the minimum access level required for a user to access this book.\nAgain, in the proto definition of the User, I have defined a user_type field. This field will serve as an indicator of the access rights of the user. In the real world, these access rights will be decided after the user has authenticated herself to the system, but here, we will hardcode the access rights.\nSo, only users with access rights equal to Administration will be allowed to add books to the system. Here we do not care who the user is. If the user is supplying the correct access right, she will be allowed to operate. The authentication logic in real-world scenarios will determine the who part.\nThere are some books in the library, which have access rights equal to that of a Faculty. It means that only faculties will be allowed to access those books. The students will not be able to access these books, even while searching for books using ISBN. This kind of mechanism can be implemented using OPA very quickly. We will see the implementation of the OPA part in the next post.\nWhile querying the service, users are required to supply their identity (at least user_type) and the book ISBN if they are searching for some book. The administrators are supposed to provide the name, author, access level, number of copies, and ISBN while adding the books. I have not added the error checking functionality in the code, but it should be easy enough to implement such functionality.\nThe main.go file is the starting point of this service. It will spawn two servers in two Go Routines. Ideally, some synchronization mechanisms should be implemented in the code to avoid race conditions in some cases - for example, what will happen if two or more clients are trying to add the same book simultaneously. Here in our case, nothing serious will happen, as OPA will take only one book per ISBN, and discard all the other books with the same ISBN even if the other metadata is different (I designed the service in this way to keep the code easy enough to understand), but if there are other operations like DeleteBook and IssueBook, then the race conditions can cause issues.\nIn the AddBook() function, the user provided book details will be sent to the OPA server using a REST call. OPA will store this information in its in-memory store at a unique place determined by the ISBN of the book. In actual cases, the data should be stored in some persistent storage, such as a DB. OPA will take the information from the DB. Again, to keep the implementation easy enough to understand, we are not using any such persistent storage. If any other book with different metadata but the same ISBN comes, then OPA will overwrite the existing book with the new one.\nIn the SearchBook() function, the user will provide the ISBN of the desired book. The gRPC service will call the OPA using REST API and find if any such book exists or not.\nThe ListAllBooks() is different in the way that it does not need any ISBN.\nNow, here one problem arises, how to make sure that the search results will not return any book which the user is not authorized to access. We will solve this problem using OPA in the next and last post of this series.\nI hope that this post was helpful. If you have any doubts or want to say anything else, please comment. It will be a great motivation and appreciation for me.\nThanks for reading. Cheers 😄\n"},"name":"Go + gRPC + OPA - A Perfect Union - Part 2","published":"2019-02-17T14:44:56+05:30","summary":"In the last post, we discussed about the structure of our library application. In this post, we will define the data definitions using protobuf, and then we will use these definitions to create a Go service. We will also add a REST interface to the service.","type":"entry","url":"https://yashagarwal.in/posts/2019/02/go-grpc-opa-a-perfect-union-part-2/"}