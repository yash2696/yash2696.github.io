{"author":{"name":"Yash Agarwal","type":"card","url":"https://yashagarwal.in/"},"content":{"html":"\u003cp\u003eIn this post, I will write about the procedure to correctly setup SSH and GPG agents in the i3 window manager. To follow this post, you need to have ssh-keys and your private GPG keys ready. If you do not already have these keys with you, I will describe the process of creating the keys.\u003c/p\u003e\n\u003ch2 id=\"ssh\"\u003eSSH\u003c/h2\u003e\n\u003cp\u003eGenerating an SSH key pair provides you with a public key and a private key. The private key should never be given to anyone and public key, well the name itself is self-explanatory.\u003c/p\u003e\n\u003cp\u003eTo create a new key pair, open a terminal and paste the text below.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003essh-keygen -t rsa -b \u003cspan class=\"m\"\u003e4096\u003c/span\u003e -C \u003cspan class=\"s2\"\u003e\u0026#34;your_email_address\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eThis command will create a new ssh key pair with the given email address as the label. Press Enter for any question asked. When it asks for the passphrase, type a strong passphrase, otherwise leave it blank to have no password.\u003c/p\u003e\n\u003ch2 id=\"gpg\"\u003eGPG\u003c/h2\u003e\n\u003cp\u003eYou might need to download the GPG command line tools before following the below steps. Follow your distribution\u0026rsquo;s documentation for more help.\u003c/p\u003e\n\u003cp\u003eOnce you have downloaded the tools, open a terminal, and type the following command.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003egpg --gen-key\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\nYou will see something like this. Enter 1 to select the default key choice.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003egpg (GnuPG) 1.4.20; Copyright (C) 2015 Free Software Foundation, Inc.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\ngpg: directory `/home/yash/.gnupg\u0026#39; created\ngpg: new configuration file `/home/yash/.gnupg/gpg.conf\u0026#39; created\ngpg: WARNING: options in `/home/yash/.gnupg/gpg.conf\u0026#39; are not yet active during this run\ngpg: keyring `/home/yash/.gnupg/secring.gpg\u0026#39; created\ngpg: keyring `/home/yash/.gnupg/pubring.gpg\u0026#39; created\nPlease select what kind of key you want:\n   (1) RSA and RSA (default)\n   (2) DSA and Elgamal\n   (3) DSA (sign only)\n   (4) RSA (sign only)\nYour selection?\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eAt the next prompt, enter the key size. It is recommended to use the maximum key size of 4096 bits.\u003c/p\u003e\n\u003cp\u003eEnter the time duration for which the key should remain valid. Press Enter to specify the default selection, indicating that the key does not expire.\u003c/p\u003e\n\u003cp\u003eAfter verifying the information, enter your user information and a strong passphrase. Afterward, GPG will start generating your key. You will see:\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003eWe need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse,\nutilize the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy.\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eYou can now use the key (until it expires) to encrypt your data.\u003c/p\u003e\n\u003ch2 id=\"setting-up-ssh-agent\"\u003eSetting up SSH Agent\u003c/h2\u003e\n\u003ch3 id=\"configuring-i3\"\u003eConfiguring i3\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eUpdate (26/05/2018):\u003c/strong\u003e \u003cem\u003eAs pointed out by \u003ca href=\"https://sakshamsharma.com/\"\u003eSaksham\u003c/a\u003e in the comments below, this step is not required for the setup of SSH in i3. This step can be safely ignored.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eOpen i3 configuration file and add an \u003ccode\u003eexec_always\u003c/code\u003e statement -\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eexec_always ~/.config/i3/scripts/gnome-keyring.sh\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eObviously, you will need to change the path according to your OS. Now make a new file in \u003ccode\u003e~/.config/i3/scripts\u003c/code\u003e with name \u003ccode\u003egnome-keyring.sh\u003c/code\u003e and paste the below text in it.\u003c/p\u003e\n\u003cp\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"nb\"\u003eeval\u003c/span\u003e \u003cspan class=\"k\"\u003e$(\u003c/span\u003e/usr/bin/gnome-keyring-daemon --start --components\u003cspan class=\"o\"\u003e=\u003c/span\u003egpg,pkcs11,secrets,ssh\u003cspan class=\"k\"\u003e)\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eexport\u003c/span\u003e GNOME_KEYRING_CONTROL GNOME_KEYRING_PID GPG_AGENT_INFO SSH_AUTH_SOCK\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n(Assuming that you already have installed gnome-keyring)\u003c/p\u003e\n\u003cp\u003eNow, reload the i3.\u003c/p\u003e\n\u003ch3 id=\"configuring-ssh\"\u003eConfiguring SSH\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eUpdate (26/05/2018):\u003c/strong\u003e \u003cem\u003eThis step is also optional. Thanks to \u003ca href=\"https://sakshamsharma.com/\"\u003eSaksham\u003c/a\u003e for pointing it out.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eOpen \u003ccode\u003e~/.ssh/config\u003c/code\u003e file and add following content to it -\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eHost *\n  AddKeysToAgent yes\n  IdentityFile /home/\u0026lt;your username\u0026gt;/.ssh/id_rsa\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eReplace \u0026lt;your username\u0026gt; accordingly.\u003c/p\u003e\n\u003ch3 id=\"setting-up-bashrc\"\u003eSetting up .bashrc\u003c/h3\u003e\n\u003cp\u003eI am not using a login shell, and I could not find any suitable method to source \u003ccode\u003e~/.profile\u003c/code\u003e or \u003ccode\u003e~/.bash_profile\u003c/code\u003e on login in i3. So I added my configuration to \u003ccode\u003e~/.bashrc\u003c/code\u003e file. I know it is a hack, but it works well for me without much headache.\u003c/p\u003e\n\u003cp\u003eOpen \u003ccode\u003e~/.bashrc\u003c/code\u003e file and add following lines to the end of the file.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e -f ~/.ssh/agent.env \u003cspan class=\"o\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003ethen\u003c/span\u003e\n    . ~/.ssh/agent.env \u0026gt; /dev/null\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e ! \u003cspan class=\"nb\"\u003ekill\u003c/span\u003e -0 \u003cspan class=\"nv\"\u003e$SSH_AGENT_PID\u003c/span\u003e \u0026gt; /dev/null 2\u0026gt;\u003cspan class=\"p\"\u003e\u0026amp;\u003c/span\u003e1\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"k\"\u003ethen\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Stale agent file found. Spawning a new agent. \u0026#34;\u003c/span\u003e\n        \u003cspan class=\"nb\"\u003eeval\u003c/span\u003e \u003cspan class=\"sb\"\u003e`\u003c/span\u003essh-agent \u003cspan class=\"p\"\u003e|\u003c/span\u003e tee ~/.ssh/agent.env\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n        ssh-add\n    \u003cspan class=\"k\"\u003efi\u003c/span\u003e\n\u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Starting ssh-agent\u0026#34;\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eeval\u003c/span\u003e \u003cspan class=\"sb\"\u003e`\u003c/span\u003essh-agent \u003cspan class=\"p\"\u003e|\u003c/span\u003e tee ~/.ssh/agent.env\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\n    ssh-add\n\u003cspan class=\"k\"\u003efi\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eIt will automatically start an \u003ccode\u003essh-agent\u003c/code\u003e if it is not already running. Otherwise, it attaches to a previously running agent.\u003c/p\u003e\n\u003cp\u003eNow log out and log in again to see if ssh-agent works. Open a terminal and run the command \u003ccode\u003essh-add -l\u003c/code\u003e. It will show you the hash value of your ssh-key, which is loaded by the ssh-agent.\u003c/p\u003e\n\u003cp\u003eThat is all for today. Thank you for reading!\u003c/p\u003e\n","text":"In this post, I will write about the procedure to correctly setup SSH and GPG agents in the i3 window manager. To follow this post, you need to have ssh-keys and your private GPG keys ready. If you do not already have these keys with you, I will describe the process of creating the keys.\nSSH Generating an SSH key pair provides you with a public key and a private key. The private key should never be given to anyone and public key, well the name itself is self-explanatory.\nTo create a new key pair, open a terminal and paste the text below. ssh-keygen -t rsa -b 4096 -C \u0026#34;your_email_address\u0026#34;\nThis command will create a new ssh key pair with the given email address as the label. Press Enter for any question asked. When it asks for the passphrase, type a strong passphrase, otherwise leave it blank to have no password.\nGPG You might need to download the GPG command line tools before following the below steps. Follow your distribution\u0026rsquo;s documentation for more help.\nOnce you have downloaded the tools, open a terminal, and type the following command. gpg --gen-key You will see something like this. Enter 1 to select the default key choice.\ngpg (GnuPG) 1.4.20; Copyright (C) 2015 Free Software Foundation, Inc. This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. gpg: directory `/home/yash/.gnupg\u0026#39; created gpg: new configuration file `/home/yash/.gnupg/gpg.conf\u0026#39; created gpg: WARNING: options in `/home/yash/.gnupg/gpg.conf\u0026#39; are not yet active during this run gpg: keyring `/home/yash/.gnupg/secring.gpg\u0026#39; created gpg: keyring `/home/yash/.gnupg/pubring.gpg\u0026#39; created Please select what kind of key you want: (1) RSA and RSA (default) (2) DSA and Elgamal (3) DSA (sign only) (4) RSA (sign only) Your selection? At the next prompt, enter the key size. It is recommended to use the maximum key size of 4096 bits.\nEnter the time duration for which the key should remain valid. Press Enter to specify the default selection, indicating that the key does not expire.\nAfter verifying the information, enter your user information and a strong passphrase. Afterward, GPG will start generating your key. You will see: We need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse, utilize the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy.\nYou can now use the key (until it expires) to encrypt your data.\nSetting up SSH Agent Configuring i3 Update (26/05/2018): As pointed out by Saksham in the comments below, this step is not required for the setup of SSH in i3. This step can be safely ignored.\nOpen i3 configuration file and add an exec_always statement - exec_always ~/.config/i3/scripts/gnome-keyring.sh\nObviously, you will need to change the path according to your OS. Now make a new file in ~/.config/i3/scripts with name gnome-keyring.sh and paste the below text in it.\neval $(/usr/bin/gnome-keyring-daemon --start --components=gpg,pkcs11,secrets,ssh) export GNOME_KEYRING_CONTROL GNOME_KEYRING_PID GPG_AGENT_INFO SSH_AUTH_SOCK (Assuming that you already have installed gnome-keyring)\nNow, reload the i3.\nConfiguring SSH Update (26/05/2018): This step is also optional. Thanks to Saksham for pointing it out.\nOpen ~/.ssh/config file and add following content to it -\nHost * AddKeysToAgent yes IdentityFile /home/\u0026lt;your username\u0026gt;/.ssh/id_rsa Replace \u0026lt;your username\u0026gt; accordingly.\nSetting up .bashrc I am not using a login shell, and I could not find any suitable method to source ~/.profile or ~/.bash_profile on login in i3. So I added my configuration to ~/.bashrc file. I know it is a hack, but it works well for me without much headache.\nOpen ~/.bashrc file and add following lines to the end of the file. if [ -f ~/.ssh/agent.env ] ; then . ~/.ssh/agent.env \u0026gt; /dev/null if ! kill -0 $SSH_AGENT_PID \u0026gt; /dev/null 2\u0026gt;\u0026amp;1; then echo \u0026#34;Stale agent file found. Spawning a new agent. \u0026#34; eval `ssh-agent | tee ~/.ssh/agent.env` ssh-add fi else echo \u0026#34;Starting ssh-agent\u0026#34; eval `ssh-agent | tee ~/.ssh/agent.env` ssh-add fi\nIt will automatically start an ssh-agent if it is not already running. Otherwise, it attaches to a previously running agent.\nNow log out and log in again to see if ssh-agent works. Open a terminal and run the command ssh-add -l. It will show you the hash value of your ssh-key, which is loaded by the ssh-agent.\nThat is all for today. Thank you for reading!\n"},"name":"Setting Up SSH Agent in i3","published":"2017-12-27T20:21:09+05:30","summary":"In this post, I will write about the procedure to correctly setup SSH and GPG agents in the i3 window manager. To follow this post, you need to have ssh-keys and your private GPG keys ready. If you do not already have these keys with you, I will describe the process of creating the keys.\nSSH Generating an SSH key pair provides you with a public key and a private key.","type":"entry","url":"https://yashagarwal.in/posts/2017/12/setting-up-ssh-agent-in-i3/"}