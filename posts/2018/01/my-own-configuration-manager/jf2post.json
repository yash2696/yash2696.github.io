{"author":{"name":"Yash Agarwal","type":"card","url":"https://yashagarwal.in/"},"content":{"html":"\u003cp\u003eI have been using Linux since I was in my second year of undergraduate. My experiments with the dotfiles (configuration files) also started at the same time. For the uninformed, in Linux, it is common to configure a lot of settings and configurations within dotfiles. Dotfiles are files in a Linux user\u0026rsquo;s home directory that begin with a dot or a full-stop character. This dot indicates to the operating system that these files are used to store the settings of programs like \u003ccode\u003evim\u003c/code\u003e or shells like \u003ccode\u003ebash\u003c/code\u003e or \u003ccode\u003efish\u003c/code\u003e to name a few.\u003c/p\u003e\n\u003cp\u003eIn the beginning, I was keeping a manual backup of my dotfiles by copying them to a folder from time to time. But the list soon started getting huge, that it became complicated for me to keep track of the changes. Then I moved to symlinks. I started symlinking all the dotfiles from my folder to their usual locations. This setup worked perfectly fine, but as my collection of dotfiles grew, It became very cumbersome for me to symlink every dotfile manually.\u003c/p\u003e\n\u003cp\u003eI also tried a few tools built for this particular purpose. Some of them are \u003ccode\u003evcsh\u003c/code\u003e, \u003ccode\u003emr\u003c/code\u003e, and \u003ccode\u003estow\u003c/code\u003e. These tools work just fine, but I was not willing to learn new tools just for maintaining my dotfiles. At last, I decided to write my tool to solve this problem. This way, there will not be any external dependency, and this tool will also become part of my dotfiles.\u003c/p\u003e\n\u003ch2 id=\"design\"\u003eDesign\u003c/h2\u003e\n\u003cp\u003eThe tool, in itself, is inspired by the \u003ca href=\"https://en.wikipedia.org/wiki/Configuration_file#UNIX/Linux\"\u003eUNIX tradition\u003c/a\u003e of keeping configuration files for the settings of the programs. This configuration system uses a JSON formatted dotfile.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/yashhere/ConMan\"\u003eHere\u003c/a\u003e is the source code for the configuration system. Let\u0026rsquo;s have a look at the file structure of the repository.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e|-- .backups\n|   |-- 08-01-2018-15:47\n|   |-- 08-01-2018-19:30\n|   |-- ......\n|-- configure.py\n|-- current_status\n|-- dotfiles\n|   |-- dunst\n|   |-- gtk-3.0\n|   |-- i3\n|   |-- ......\n|-- dotfiles.json\n|-- LICENSE\n`-- README.md\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eDuring the initial setup, you need to edit the \u003ccode\u003edotfiles.json\u003c/code\u003e file to suit your setup. A relevant section of the JSON file is given below.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;pre\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;cloning repository\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;command\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;git\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;subcommand\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;clone\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;argument\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://github.com/yashhere/dotfiles.git\u0026#34;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;linking\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;bashrc\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;src\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;dotfiles/.bashrc\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;dest\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;.bashrc\u0026#34;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;bash_profile\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;src\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;dotfiles/.bash_profile\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;dest\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;.bash_profile\u0026#34;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;profile\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;src\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;dotfiles/.profile\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;dest\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;.profile\u0026#34;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;i3\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;src\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;dotfiles/i3\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;dest\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;.config/i3\u0026#34;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eAs can be seen, the JSON file has an array variable \u003ccode\u003elinking\u003c/code\u003e, which can be used to set the paths for each configuration file and folder. The \u003ccode\u003econfigure.py\u003c/code\u003e script also requires a \u003ccode\u003edotfiles\u003c/code\u003e folder to be present in the current directory. The folder can be created manually, or if it is already version controlled on GitHub, then the script can clone it. For that, you can edit the \u003ccode\u003epre\u003c/code\u003e section in the \u003ccode\u003edotfiles.json\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eYour dotfiles and config folders go inside the \u003ccode\u003edotfiles\u003c/code\u003e folder. You need to copy all your current configurations to this folder to get started.\u003c/p\u003e\n\u003cp\u003eSo, how does the script know where a file or folder will be linked? Simple, you need to edit the \u003ccode\u003edotfiles.json\u003c/code\u003e file and add source and destination locations. For example, if you want to set up configurations of \u003ccode\u003ei3\u003c/code\u003e to its original location (which is, \u003ccode\u003e$HOME/.config/i3\u003c/code\u003e), then you need to create a new JSON object in the \u003ccode\u003elinking\u003c/code\u003e array, like this.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;i3\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;src\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;dotfiles/i3\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;dest\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;.config/i3\u0026#34;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eHere the \u003ccode\u003ename\u003c/code\u003e is used to identify the configuration file, the \u003ccode\u003esrc\u003c/code\u003e parameter is the location of your config file/folder in the dotfiles directory, and the \u003ccode\u003edest\u003c/code\u003e parameter is the final destination of the file/folder. Keen observers would notice that I have not used \u003ccode\u003e$HOME\u003c/code\u003e anywhere. It is understood that the configuration will go to the current user\u0026rsquo;s home directory. So the \u003ccode\u003edest\u003c/code\u003e is relative to the user\u0026rsquo;s home directory, and \u003ccode\u003esrc\u003c/code\u003e is relative to the directory from which the \u003ccode\u003econfigure.py\u003c/code\u003e script is executed.\u003c/p\u003e\n\u003cp\u003eAnd you are done! Now, run \u003ccode\u003econfigure.py\u003c/code\u003e, and all your dotfiles and folders will be symlinked to their correct place.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003ecurrent_status\u003c/code\u003e file saves all the symlink locations that are being managed by the script, for your easy reference and to debug any error.\u003c/p\u003e\n\u003ch2 id=\"behind-the-scenes\"\u003eBehind the Scenes\u003c/h2\u003e\n\u003cp\u003eA lot to cool things happen behind the scenes. The script will check if any previous symlink exists at the given \u003ccode\u003edest\u003c/code\u003e location. It removes any symlinks to avoid redundancy. If the dest already has any dotfile or folder, then it backs it up in the \u003ccode\u003e.backups\u003c/code\u003e under today\u0026rsquo;s date and time before replacing it with a symlink to avoid any potential data loss.\u003c/p\u003e\n\u003cp\u003eI hope the article was useful. Cheers 😄\u003c/p\u003e\n","text":"I have been using Linux since I was in my second year of undergraduate. My experiments with the dotfiles (configuration files) also started at the same time. For the uninformed, in Linux, it is common to configure a lot of settings and configurations within dotfiles. Dotfiles are files in a Linux user\u0026rsquo;s home directory that begin with a dot or a full-stop character. This dot indicates to the operating system that these files are used to store the settings of programs like vim or shells like bash or fish to name a few.\nIn the beginning, I was keeping a manual backup of my dotfiles by copying them to a folder from time to time. But the list soon started getting huge, that it became complicated for me to keep track of the changes. Then I moved to symlinks. I started symlinking all the dotfiles from my folder to their usual locations. This setup worked perfectly fine, but as my collection of dotfiles grew, It became very cumbersome for me to symlink every dotfile manually.\nI also tried a few tools built for this particular purpose. Some of them are vcsh, mr, and stow. These tools work just fine, but I was not willing to learn new tools just for maintaining my dotfiles. At last, I decided to write my tool to solve this problem. This way, there will not be any external dependency, and this tool will also become part of my dotfiles.\nDesign The tool, in itself, is inspired by the UNIX tradition of keeping configuration files for the settings of the programs. This configuration system uses a JSON formatted dotfile.\nHere is the source code for the configuration system. Let\u0026rsquo;s have a look at the file structure of the repository. |-- .backups | |-- 08-01-2018-15:47 | |-- 08-01-2018-19:30 | |-- ...... |-- configure.py |-- current_status |-- dotfiles | |-- dunst | |-- gtk-3.0 | |-- i3 | |-- ...... |-- dotfiles.json |-- LICENSE `-- README.md\nDuring the initial setup, you need to edit the dotfiles.json file to suit your setup. A relevant section of the JSON file is given below. { \u0026#34;pre\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;cloning repository\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;git\u0026#34;, \u0026#34;subcommand\u0026#34;: \u0026#34;clone\u0026#34;, \u0026#34;argument\u0026#34;: \u0026#34;https://github.com/yashhere/dotfiles.git\u0026#34; } ], \u0026#34;linking\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;bashrc\u0026#34;, \u0026#34;src\u0026#34;: \u0026#34;dotfiles/.bashrc\u0026#34;, \u0026#34;dest\u0026#34;: \u0026#34;.bashrc\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;bash_profile\u0026#34;, \u0026#34;src\u0026#34;: \u0026#34;dotfiles/.bash_profile\u0026#34;, \u0026#34;dest\u0026#34;: \u0026#34;.bash_profile\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;profile\u0026#34;, \u0026#34;src\u0026#34;: \u0026#34;dotfiles/.profile\u0026#34;, \u0026#34;dest\u0026#34;: \u0026#34;.profile\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;i3\u0026#34;, \u0026#34;src\u0026#34;: \u0026#34;dotfiles/i3\u0026#34;, \u0026#34;dest\u0026#34;: \u0026#34;.config/i3\u0026#34; }, ] }\nAs can be seen, the JSON file has an array variable linking, which can be used to set the paths for each configuration file and folder. The configure.py script also requires a dotfiles folder to be present in the current directory. The folder can be created manually, or if it is already version controlled on GitHub, then the script can clone it. For that, you can edit the pre section in the dotfiles.json.\nYour dotfiles and config folders go inside the dotfiles folder. You need to copy all your current configurations to this folder to get started.\nSo, how does the script know where a file or folder will be linked? Simple, you need to edit the dotfiles.json file and add source and destination locations. For example, if you want to set up configurations of i3 to its original location (which is, $HOME/.config/i3), then you need to create a new JSON object in the linking array, like this. { \u0026#34;name\u0026#34;: \u0026#34;i3\u0026#34;, \u0026#34;src\u0026#34;: \u0026#34;dotfiles/i3\u0026#34;, \u0026#34;dest\u0026#34;: \u0026#34;.config/i3\u0026#34; }\nHere the name is used to identify the configuration file, the src parameter is the location of your config file/folder in the dotfiles directory, and the dest parameter is the final destination of the file/folder. Keen observers would notice that I have not used $HOME anywhere. It is understood that the configuration will go to the current user\u0026rsquo;s home directory. So the dest is relative to the user\u0026rsquo;s home directory, and src is relative to the directory from which the configure.py script is executed.\nAnd you are done! Now, run configure.py, and all your dotfiles and folders will be symlinked to their correct place.\nThe current_status file saves all the symlink locations that are being managed by the script, for your easy reference and to debug any error.\nBehind the Scenes A lot to cool things happen behind the scenes. The script will check if any previous symlink exists at the given dest location. It removes any symlinks to avoid redundancy. If the dest already has any dotfile or folder, then it backs it up in the .backups under today\u0026rsquo;s date and time before replacing it with a symlink to avoid any potential data loss.\nI hope the article was useful. Cheers 😄\n"},"name":"My Own Configuration Manager","published":"2018-01-21T11:23:23+05:30","summary":"I have been using Linux since I was in my second year of undergraduate. My experiments with the dotfiles (configuration files) also started at the same time. For the uninformed, in Linux, it is common to configure a lot of settings and configurations within dotfiles. Dotfiles are files in a Linux user\u0026rsquo;s home directory that begin with a dot or a full-stop character. This dot indicates to the operating system that these files are used to store the settings of programs like vim or shells like bash or fish to name a few.","type":"entry","url":"https://yashagarwal.in/posts/2018/01/my-own-configuration-manager/"}