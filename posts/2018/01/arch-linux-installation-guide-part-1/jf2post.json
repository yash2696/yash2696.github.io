{"author":{"name":"Yash Agarwal","type":"card","url":"https://yashagarwal.in/"},"content":{"html":"\u003cp\u003eArch Linux is a Linux distribution known for its not-so-beginner-friendly command line installer, no ready-to-use system after installation and requirement of above average knowledge of command line. However, Arch Linux allows me to set up a system in my desired state in shortest possible time with least effort. This is why I keep coming back to Arch Linux even after some of its annoyances.\u003c/p\u003e\n\u003cp\u003eThis guide is written primarily for my reference, as someone who has installed Arch Linux several times, I still can\u0026rsquo;t remember all the installation steps perfectly. Most of the steps have been taken from \u003ca href=\"https://wiki.archlinux.org/index.php/installation_guide\"\u003eArch wiki\u003c/a\u003e and should work on other setups also.\u003c/p\u003e\n\u003cdiv class=\"note\"\u003e\n    \u003cdiv\u003e\u003c/div\u003e\n    \nAll the commands are run in root shell unless otherwise specified.\n\n\u003c/div\u003e\n\u003ch2 id=\"0-check-your-network-connection\"\u003e0. Check your network connection\u003c/h2\u003e\n\u003cp\u003eIf you are behind a captive portal, use \u003ccode\u003elinks\u003c/code\u003e to open browser and login into your network. For WiFi connections, use \u003ccode\u003ewifi-menu\u003c/code\u003e. LAN connections should not require any setup. The boot environment should automatically detect any wired connections. After connecting, test your connection by pinging any website:\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eping -c \u003cspan class=\"m\"\u003e5\u003c/span\u003e google.com\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003ch2 id=\"1-setup-ssh\"\u003e1. Setup SSH\u003c/h2\u003e\n\u003cp\u003eThis step is not mandatory, though I prefer to use this method to install Arch Linux, as it provides me the convenience of copying and pasting the commands directly from Arch wiki.\u003c/p\u003e\n\u003cp\u003eBy default the Arch Linux \u003ccode\u003eroot\u003c/code\u003e account password is empty. We need to set up a password for \u003ccode\u003eroot\u003c/code\u003e account, which is needed for an SSH connection.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003epasswd\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eNow we need to change the setting to permit \u003ccode\u003eroot\u003c/code\u003e login via SSH in \u003ccode\u003e/etc/ssh/sshd_config\u003c/code\u003e. Check that \u003ccode\u003ePermitRootLogin yes\u003c/code\u003e is uncommented in this file. If this line is not present there, add this to the end. Now start the \u003ccode\u003esshd.service\u003c/code\u003e by issuing the command\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo systemctl start sshd.service\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eAlso, note the IP address of the target machine by inspecting the output of the following command.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eip addr\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003ePro tip:\u003c/em\u003e One liner to get only the IP address\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eip -o -4 addr show \u003cspan class=\"p\"\u003e|\u003c/span\u003e awk -F \u003cspan class=\"s1\"\u003e\u0026#39;[ /]+\u0026#39;\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;/global/ {print $4}\u0026#39;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eNow on your host machine, connect to the target machine via SSH using the following command\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003essh root@ip-address-of-target\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003ch2 id=\"2-partition-the-disks\"\u003e2. Partition the disks\u003c/h2\u003e\n\u003cp\u003eIf Windows 8 or above is already installed on your machine, then your hard disk is probably using \u003ccode\u003eGPT\u003c/code\u003e partitioning scheme. In that case, use \u003ccode\u003egdisk\u003c/code\u003e to partition your hard disk. \u003cdel\u003eIf you use \u003ccode\u003efdisk\u003c/code\u003e on a GPT partitioned HDD, there is a possibility of data loss.\u003c/del\u003e \u003ccode\u003efdisk\u003c/code\u003e understands \u003ccode\u003eGPT\u003c/code\u003e partitioning scheme also.[1]\u003c/p\u003e\n\u003cp\u003eMy preferred setup is to have one root partition and one home partition and use \u003ccode\u003eEFI\u003c/code\u003e partition created by Windows to install boot-loader. The root and home partition will be formatted using \u003ccode\u003eext4\u003c/code\u003e file-system and the \u003ccode\u003eEFI\u003c/code\u003e partition should be formatted using \u003ccode\u003eFAT32\u003c/code\u003e file-system.\u003c/p\u003e\n\u003cp\u003eFor this guide, I am assuming that the \u003ccode\u003eEFI\u003c/code\u003e partition is \u003ccode\u003esda1\u003c/code\u003e, root partition is \u003ccode\u003esda9\u003c/code\u003e and home partition is \u003ccode\u003esda10\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eNow to format the partitions with \u003ccode\u003eext4\u003c/code\u003e file-system:\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003emkfs.ext4 /dev/sda9\nmkfs.ext4 /dev/sda10\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003ch2 id=\"3-mount-the-partitions\"\u003e3. Mount the partitions\u003c/h2\u003e\n\u003cp\u003eNow mount the root partition (\u003ccode\u003esda9\u003c/code\u003e in this case) to \u003ccode\u003e/mnt\u003c/code\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003emount /dev/sda9 /mnt\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eIf you have created any other partitions in previous steps, mount them at appropriate locations.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003emkdir /mnt/home\nmount /dev/sda10 /mnt/home\n\nmkdir /mnt/boot\nmount /dev/sda1 /mnt/boot\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003ch2 id=\"4-install-the-base-file-system\"\u003e4. Install the base file-system\u003c/h2\u003e\n\u003cp\u003eTo install the base system and some development tools, issue the following command.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003epacstrap /mnt base base-devel\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eThis will take a while to download and install. After it finishes, it will give you a bare-bone Arch Linux system with just the tools required to run a Linux distribution, no other software is installed.\u003c/p\u003e\n\u003ch2 id=\"5-generate-etcfstab\"\u003e5. Generate /etc/fstab\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003e/etc/fstab\u003c/code\u003e file stores the information about file systems of partitions and how to mount the partitions on system boot up. To generate this file, issue the following command:\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003egenfstab -U /mnt \u0026gt;\u0026gt; /mnt/etc/fstab\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\nIf you prefer to use partition labels (sda1, sda9 etc.) instead of UUID, then use \u003ccode\u003e-L\u003c/code\u003e flag in place of \u003ccode\u003e-U\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"6-chroot-into-the-system\"\u003e6. chroot into the system\u003c/h2\u003e\n\u003cp\u003eFrom the \u003ca href=\"https://wiki.archlinux.org/index.php/Change_root\"\u003eArch wiki\u003c/a\u003e:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eChroot is an operation that changes the apparent root directory for the current running process and their children. A program that is run in such a modified environment cannot access files and commands outside that environmental directory tree. This modified environment is called a chroot jail.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eAt this step, we will go to the root of the newly installed system at \u003ccode\u003e/mnt\u003c/code\u003e and pretend as if we are logged into this system.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003earch-chroot /mnt\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003ch2 id=\"7-setup-the-time-zone-locale-and-hostname\"\u003e7. Setup the time zone, locale, and hostname\u003c/h2\u003e\n\u003cp\u003eBrowse the \u003ccode\u003e/use/share/zoneinfo\u003c/code\u003e directory to find your location entries. My location is India, so I will use this command.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eln -sf /usr/share/zoneinfo/Asia/Kolkata /etc/localtime\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eTo set the hardware clock:\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ehwclock --systohc\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eTo set the locale for your system, open the \u003ccode\u003e/etc/locale.gen\u003c/code\u003e file and uncomment your language. or run the following command for the default \u003ccode\u003een_US.UTF-8 UTF-8\u003c/code\u003e.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"nv\"\u003eLANG\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003eC perl -i -pe \u003cspan class=\"s1\"\u003e\u0026#39;s/#(en_US.UTF)/$1/\u0026#39;\u003c/span\u003e /etc/locale.gen\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\nNow generate the localization with\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003elocale-gen\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eThen set the \u003ccode\u003eLANG\u003c/code\u003e variable in \u003ccode\u003e/etc/locale.conf\u003c/code\u003e accordingly, or run the following command:\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003elocalectl set-locale \u003cspan class=\"nv\"\u003eLANG\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;en_US.UTF-8\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eTo set the hostname for your machine:\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ehostnamectl set-hostname your-host-name\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eTo allow other machines to address the host by name, it is necessary to edit the \u003ccode\u003e/etc/hosts\u003c/code\u003e file to look like this:\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e127.0.0.1    localhost.localdomain          localhost\n::1          localhost.localdomain          localhost\n127.0.1.1    your-host-name.localdomain     your-host-name\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003ch2 id=\"8-create-user-account\"\u003e8. Create user account\u003c/h2\u003e\n\u003cp\u003eBefore creating user account, set password for \u003ccode\u003eroot\u003c/code\u003e account\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003epasswd\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eNow create a local account for your user\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003euseradd -m -G wheel -s /bin/bash your-user-name\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eThis will set up your user account, create a home directory for your user, set the default shell to \u003ccode\u003ebash\u003c/code\u003e and add your user to \u003ccode\u003ewheel\u003c/code\u003e group, which is necessary to gain \u003ccode\u003esudo\u003c/code\u003e access in later steps.\u003c/p\u003e\n\u003cp\u003eSet password for your user.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003epasswd your-user-name\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003ch2 id=\"9-enable-sudo-access\"\u003e9. Enable sudo access\u003c/h2\u003e\n\u003cp\u003eThis allows you to use root privileges without using the root account. To enable this, first open \u003ccode\u003e/etc/sudoers\u003c/code\u003e file\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003enano /etc/sudoers\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eNow uncomment the following line to enable \u003ccode\u003eroot\u003c/code\u003e privilege for all the users inside \u003ccode\u003ewheel\u003c/code\u003e group:\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"c1\"\u003e# %wheel ALL=(ALL) ALL\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eNow you can safely disable root account\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003epasswd -l root\n\n\u003cspan class=\"c1\"\u003e# login into your user account\u003c/span\u003e\nsu your-user-name\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eFrom this point onwards, it is necessary to append \u003ccode\u003esudo\u003c/code\u003e to any command that requires \u003ccode\u003eroot\u003c/code\u003e privileges.\u003c/p\u003e\n\u003ch2 id=\"10-install-bootloader\"\u003e10. Install bootloader\u003c/h2\u003e\n\u003cp\u003eMy preferred bootloader of choice is \u003ccode\u003egrub\u003c/code\u003e. To install \u003ccode\u003egrub\u003c/code\u003e, we need to install following packages.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo pacman -S grub efibootmgr\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eNow install \u003ccode\u003egrub\u003c/code\u003e with the following command.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo grub-install --target\u003cspan class=\"o\"\u003e=\u003c/span\u003ex86_64-efi --efi-directory\u003cspan class=\"o\"\u003e=\u003c/span\u003e/boot --bootloader-id\u003cspan class=\"o\"\u003e=\u003c/span\u003earch\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eHere \u003ccode\u003e--efi-directory\u003c/code\u003e is the folder where the \u003ccode\u003eEFI\u003c/code\u003e partition is mounted \u003ca href=\"#step3\"\u003estep 3\u003c/a\u003e and \u003ccode\u003e--bootloader-id\u003c/code\u003e is the label that will appear in your UEFI boot menu entry.\u003c/p\u003e\n\u003cp\u003eThis particular step is specific to my machine\u0026rsquo;s hardware, you might not need to run this step. I need to add \u003ccode\u003epci=nommconf\u003c/code\u003e to my kernel boot parameters in \u003ccode\u003e/etc/default/grub\u003c/code\u003e, otherwise \u003ccode\u003etty\u003c/code\u003e prints error messages continuously.\u003c/p\u003e\n\u003cp\u003eNow run to generate grub configuration file.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo grub-mkconfig -o /boot/grub/grub.cfg\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eIf you encounter any errors related to \u003ccode\u003elvm\u003c/code\u003e during installation of grub, then follow these steps.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"c1\"\u003e# come out of chroot\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eexit\u003c/span\u003e\nmkdir /mnt/hostrun\nmount --bind /run /mnt/hostrun\n\n\u003cspan class=\"c1\"\u003e# back to chroot\u003c/span\u003e\narch-chroot /mnt\nmkdir /run/lvm\nmount --bind /hostrun/lvm /run/lvm\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eNow you can install \u003ccode\u003egrub\u003c/code\u003e without any errors.\u003c/p\u003e\n\u003ch2 id=\"11-configure-the-network\"\u003e11. Configure the network\u003c/h2\u003e\n\u003cp\u003eBy default, your current system cannot connect to the network in the current state. I prefer to use \u003ca href=\"https://wiki.archlinux.org/index.php/NetworkManager\"\u003eNetworkManager\u003c/a\u003e for my network management, even when I am not using GNOME. For wireless networking, install the following additional packages.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo pacman -S iw wpa_supplicant dialog networkmanager network-manager-applet dhclient\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eNetworkManager\u003c/code\u003e supports basic DHCP configuration. For full support, I have installed \u003ccode\u003edhclient\u003c/code\u003e. \u003ccode\u003eNetworkManager\u003c/code\u003e also supports automatic wired connection detection and comes with curses based tool \u003ccode\u003enmtui\u003c/code\u003e to setup wireless connection.\u003c/p\u003e\n\u003cp\u003eTo enable NetworkManager to start at system startup\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo systemctl \u003cspan class=\"nb\"\u003eenable\u003c/span\u003e NetworkManager.service\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003ch2 id=\"12-reboot-now\"\u003e12. Reboot now\u003c/h2\u003e\n\u003cp\u003eIf you had performed the \u003ccode\u003elvm\u003c/code\u003e troubleshooting steps during \u003ccode\u003egrub\u003c/code\u003e install, then\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eumount /run/lvm\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eNow exit from \u003ccode\u003echroot\u003c/code\u003e by typing \u003ccode\u003eexit\u003c/code\u003e in the shell. Unmount all the mounted partitions with:\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eumount -R /mnt\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eFinally, reboot your machine by typing \u003ccode\u003ereboot\u003c/code\u003e and remove the installation USB drive. If you are not able to boot into your system at this point, boot from the installation media again and attempt to fix the installation.\u003c/p\u003e\n\u003cp\u003eIf you can see a terminal with a prompt for your username, congratulations! You have completed the first step towards building your own system.\u003c/p\u003e\n\u003cp\u003eI will be writing about making your system usable and stable in the \u003ca href=\"/posts/2018/01/arch-linux-installation-guide-part-2/\"\u003esecond\u003c/a\u003e part of this guide.\u003c/p\u003e\n\u003cp\u003eHope you enjoyed the post. Stay tuned :)\u003c/p\u003e\n","text":"Arch Linux is a Linux distribution known for its not-so-beginner-friendly command line installer, no ready-to-use system after installation and requirement of above average knowledge of command line. However, Arch Linux allows me to set up a system in my desired state in shortest possible time with least effort. This is why I keep coming back to Arch Linux even after some of its annoyances.\nThis guide is written primarily for my reference, as someone who has installed Arch Linux several times, I still can\u0026rsquo;t remember all the installation steps perfectly. Most of the steps have been taken from Arch wiki and should work on other setups also.\n All the commands are run in root shell unless otherwise specified.  0. Check your network connection If you are behind a captive portal, use links to open browser and login into your network. For WiFi connections, use wifi-menu. LAN connections should not require any setup. The boot environment should automatically detect any wired connections. After connecting, test your connection by pinging any website: ping -c 5 google.com\n1. Setup SSH This step is not mandatory, though I prefer to use this method to install Arch Linux, as it provides me the convenience of copying and pasting the commands directly from Arch wiki.\nBy default the Arch Linux root account password is empty. We need to set up a password for root account, which is needed for an SSH connection. passwd\nNow we need to change the setting to permit root login via SSH in /etc/ssh/sshd_config. Check that PermitRootLogin yes is uncommented in this file. If this line is not present there, add this to the end. Now start the sshd.service by issuing the command sudo systemctl start sshd.service\nAlso, note the IP address of the target machine by inspecting the output of the following command. ip addr\nPro tip: One liner to get only the IP address ip -o -4 addr show | awk -F \u0026#39;[ /]+\u0026#39; \u0026#39;/global/ {print $4}\u0026#39;\nNow on your host machine, connect to the target machine via SSH using the following command ssh root@ip-address-of-target\n2. Partition the disks If Windows 8 or above is already installed on your machine, then your hard disk is probably using GPT partitioning scheme. In that case, use gdisk to partition your hard disk. If you use fdisk on a GPT partitioned HDD, there is a possibility of data loss. fdisk understands GPT partitioning scheme also.[1]\nMy preferred setup is to have one root partition and one home partition and use EFI partition created by Windows to install boot-loader. The root and home partition will be formatted using ext4 file-system and the EFI partition should be formatted using FAT32 file-system.\nFor this guide, I am assuming that the EFI partition is sda1, root partition is sda9 and home partition is sda10.\nNow to format the partitions with ext4 file-system: mkfs.ext4 /dev/sda9 mkfs.ext4 /dev/sda10\n3. Mount the partitions Now mount the root partition (sda9 in this case) to /mnt mount /dev/sda9 /mnt\nIf you have created any other partitions in previous steps, mount them at appropriate locations. mkdir /mnt/home mount /dev/sda10 /mnt/home mkdir /mnt/boot mount /dev/sda1 /mnt/boot\n4. Install the base file-system To install the base system and some development tools, issue the following command. pacstrap /mnt base base-devel\nThis will take a while to download and install. After it finishes, it will give you a bare-bone Arch Linux system with just the tools required to run a Linux distribution, no other software is installed.\n5. Generate /etc/fstab The /etc/fstab file stores the information about file systems of partitions and how to mount the partitions on system boot up. To generate this file, issue the following command: genfstab -U /mnt \u0026gt;\u0026gt; /mnt/etc/fstab If you prefer to use partition labels (sda1, sda9 etc.) instead of UUID, then use -L flag in place of -U.\n6. chroot into the system From the Arch wiki:\n Chroot is an operation that changes the apparent root directory for the current running process and their children. A program that is run in such a modified environment cannot access files and commands outside that environmental directory tree. This modified environment is called a chroot jail.\n At this step, we will go to the root of the newly installed system at /mnt and pretend as if we are logged into this system. arch-chroot /mnt\n7. Setup the time zone, locale, and hostname Browse the /use/share/zoneinfo directory to find your location entries. My location is India, so I will use this command. ln -sf /usr/share/zoneinfo/Asia/Kolkata /etc/localtime\nTo set the hardware clock: hwclock --systohc\nTo set the locale for your system, open the /etc/locale.gen file and uncomment your language. or run the following command for the default en_US.UTF-8 UTF-8. LANG=C perl -i -pe \u0026#39;s/#(en_US.UTF)/$1/\u0026#39; /etc/locale.gen Now generate the localization with locale-gen\nThen set the LANG variable in /etc/locale.conf accordingly, or run the following command: localectl set-locale LANG=\u0026#34;en_US.UTF-8\u0026#34;\nTo set the hostname for your machine: hostnamectl set-hostname your-host-name\nTo allow other machines to address the host by name, it is necessary to edit the /etc/hosts file to look like this: 127.0.0.1 localhost.localdomain localhost ::1 localhost.localdomain localhost 127.0.1.1 your-host-name.localdomain your-host-name\n8. Create user account Before creating user account, set password for root account passwd\nNow create a local account for your user useradd -m -G wheel -s /bin/bash your-user-name\nThis will set up your user account, create a home directory for your user, set the default shell to bash and add your user to wheel group, which is necessary to gain sudo access in later steps.\nSet password for your user. passwd your-user-name\n9. Enable sudo access This allows you to use root privileges without using the root account. To enable this, first open /etc/sudoers file nano /etc/sudoers\nNow uncomment the following line to enable root privilege for all the users inside wheel group: # %wheel ALL=(ALL) ALL\nNow you can safely disable root account passwd -l root # login into your user account su your-user-name\nFrom this point onwards, it is necessary to append sudo to any command that requires root privileges.\n10. Install bootloader My preferred bootloader of choice is grub. To install grub, we need to install following packages. sudo pacman -S grub efibootmgr\nNow install grub with the following command. sudo grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=arch\nHere --efi-directory is the folder where the EFI partition is mounted step 3 and --bootloader-id is the label that will appear in your UEFI boot menu entry.\nThis particular step is specific to my machine\u0026rsquo;s hardware, you might not need to run this step. I need to add pci=nommconf to my kernel boot parameters in /etc/default/grub, otherwise tty prints error messages continuously.\nNow run to generate grub configuration file. sudo grub-mkconfig -o /boot/grub/grub.cfg\nIf you encounter any errors related to lvm during installation of grub, then follow these steps. # come out of chroot exit mkdir /mnt/hostrun mount --bind /run /mnt/hostrun # back to chroot arch-chroot /mnt mkdir /run/lvm mount --bind /hostrun/lvm /run/lvm\nNow you can install grub without any errors.\n11. Configure the network By default, your current system cannot connect to the network in the current state. I prefer to use NetworkManager for my network management, even when I am not using GNOME. For wireless networking, install the following additional packages. sudo pacman -S iw wpa_supplicant dialog networkmanager network-manager-applet dhclient\nNetworkManager supports basic DHCP configuration. For full support, I have installed dhclient. NetworkManager also supports automatic wired connection detection and comes with curses based tool nmtui to setup wireless connection.\nTo enable NetworkManager to start at system startup sudo systemctl enable NetworkManager.service\n12. Reboot now If you had performed the lvm troubleshooting steps during grub install, then umount /run/lvm\nNow exit from chroot by typing exit in the shell. Unmount all the mounted partitions with: umount -R /mnt\nFinally, reboot your machine by typing reboot and remove the installation USB drive. If you are not able to boot into your system at this point, boot from the installation media again and attempt to fix the installation.\nIf you can see a terminal with a prompt for your username, congratulations! You have completed the first step towards building your own system.\nI will be writing about making your system usable and stable in the second part of this guide.\nHope you enjoyed the post. Stay tuned :)\n"},"name":"Arch Linux Installation Guide Part 1","published":"2018-01-24T21:49:05+05:30","summary":"Arch Linux is a Linux distribution known for its not-so-beginner-friendly command line installer, no ready-to-use system after installation and requirement of above average knowledge of command line. However, Arch Linux allows me to set up a system in my desired state in shortest possible time with least effort. This is why I keep coming back to Arch Linux even after some of its annoyances.\nThis guide is written primarily for my reference, as someone who has installed Arch Linux several times, I still can\u0026rsquo;t remember all the installation steps perfectly.","type":"entry","url":"https://yashagarwal.in/posts/2018/01/arch-linux-installation-guide-part-1/"}