{"author":{"name":"Yash Agarwal","type":"card","url":"https://yashagarwal.in/"},"content":{"html":"\u003cp\u003e\u003cem\u003eThis article was originally published on \u003ca href=\"https://www.zeolearn.com/magazine/develop-a-theme-for-hugo\"\u003ezeolearn\u003c/a\u003e.\u003c/em\u003e\u003c/p\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this tutorial, I will show you how to create a basic Hugo theme. I assume that you are familiar with basic HTML, and how to write content in markdown. I will be explaining the working of Hugo and how it uses Go templating language and how you can use these templates to organize your content. As this post will be focusing mainly on Hugo\u0026rsquo;s working, I will not be covering CSS here.\u003c/p\u003e\n\u003cp\u003eWe will be starting with some necessary information about the terminology used in Hugo. Then we will create a Hugo site with a very basic template. Then we will add new templates and posts to our site as we delve further into Hugo. With very slight variations to what you will learn here, you will be able to create different types of real-world websites.\u003c/p\u003e\n\u003cp\u003eNow, a short tutorial about the flow of this post. The commands that start with \u003ccode\u003e$\u003c/code\u003e are meant to be run in the terminal or command line. The output of the command will follow immediately. Comments will begin with \u003ccode\u003e#\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"some-terminology\"\u003eSome Terminology\u003c/h2\u003e\n\u003ch3 id=\"configuration-file\"\u003eConfiguration File\u003c/h3\u003e\n\u003cp\u003eHugo uses a configuration file to identify common settings for your site. It is located in the root of your site. This file can be written in TOML, YAML or JSON formats. Hugo identifies this file using the extension.\u003c/p\u003e\n\u003cp\u003eBy default, Hugo expects to find Markdown files in your \u003ccode\u003econtent/\u003c/code\u003e directory and template files in your \u003ccode\u003ethemes/\u003c/code\u003e directory. It will create HTML files in your \u003ccode\u003epublic/\u003c/code\u003e directory. You can change this by specifying alternate locations in the configuration file.\u003c/p\u003e\n\u003ch3 id=\"content\"\u003eContent\u003c/h3\u003e\n\u003cp\u003eThe content files will contain the metadata and text about your posts. A content file can be divided into two sections, the top section being frontmatter and the next section is the markdown that will be converted to HTML by Hugo. The content files reside in \u003ccode\u003e/content\u003c/code\u003e directory.\u003c/p\u003e\n\u003ch3 id=\"frontmatter\"\u003eFrontmatter\u003c/h3\u003e\n\u003cp\u003eThe frontmatter section contains information about your post. It can be written in JSON, TOML or YAML. Hugo identifies the type of frontmatter used with the help of identifying tokens(markers). TOML is surrounded by \u003ccode\u003e+++\u003c/code\u003e, YAML is by \u003ccode\u003e---\u003c/code\u003e and JSON is enclosed in curly braces \u003ccode\u003e{\u003c/code\u003e and \u003ccode\u003e}\u003c/code\u003e. The information in the front matter of a content type will be parsed to be used in the template for that specific content type while converting to HTML.\u003c/p\u003e\n\u003cp\u003eI prefer to use YAML, so you might need to translate your configurations if you are using JSON or TOML.\u003c/p\u003e\n\u003cp\u003eThis is an example of frontmatter written in YAML.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e---\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003edate\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;2018-02-11T11:45:05+05:30\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etitle\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Basic Hugo Theming Tutorial.\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003edescription\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;A primer about theme development for Hugo, a static site generator written in Golang.\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003ecategories\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e- Hugo\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e- Customization\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etags\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e- Theme\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e---\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eYou can read more about different configuration options available for frontmatter \u003ca href=\"https://gohugo.io/content-management/front-matter/#readout\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"markdown\"\u003eMarkdown\u003c/h3\u003e\n\u003cp\u003eThe markdown section is where you will write your actual post. The content written here will automatically be converted to HTML by Hugo with the help of a Markdown engine.\u003c/p\u003e\n\u003ch3 id=\"templates\"\u003eTemplates\u003c/h3\u003e\n\u003cp\u003eIn Hugo, templates govern the way; your content will be rendered to HTML. Each template provides a consistent layout when rendering the markdown content. The templates reside in the \u003ccode\u003e/layouts\u003c/code\u003e directory.\u003c/p\u003e\n\u003cp\u003eThere are three types of templates: \u003cem\u003esingle\u003c/em\u003e, \u003cem\u003elist\u003c/em\u003e and \u003cem\u003epartial\u003c/em\u003e. Each kind of template take some content as input and transform it according to the way defined in the template.\u003c/p\u003e\n\u003ch4 id=\"single-template\"\u003eSingle Template\u003c/h4\u003e\n\u003cp\u003eA single template is used to render a single page. The best example of this is \u003cem\u003eabout\u003c/em\u003e page.\u003c/p\u003e\n\u003ch4 id=\"list-template\"\u003eList Template\u003c/h4\u003e\n\u003cp\u003eA list template renders a group of related content. It can be all recent posts or all posts belonging to a particular category.\u003c/p\u003e\n\u003cp\u003eThe homepage template is a specific type of list template. Hugo assumes that the homepage will serve as a bridge to all the other content on your website.\u003c/p\u003e\n\u003ch3 id=\"partials\"\u003ePartials\u003c/h3\u003e\n\u003cp\u003ePartials are short code snippets that can be injected in any other template type. They are instrumental when you want to repeat some content on every page of your website. The header and footer content are good candidates to be included in separate partials. It is a good practice to use partials liberally in your Hugo site as it adheres to \u003ca href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\"\u003eDRY\u003c/a\u003e principle.\u003c/p\u003e\n\u003ch2 id=\"okay-lets-start\"\u003eOkay, Let\u0026rsquo;s Start\u003c/h2\u003e\n\u003cp\u003eSo now that you have a basic understanding of Hugo, we will create a new site using Hugo. Hugo provides a command to generate new sites. We will use that command to scaffold our site. It will create a basic skeleton of your site and will give you a basic configuration file.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ hugo new site ~/zeo\n$ \u003cspan class=\"nb\"\u003ecd\u003c/span\u003e ~/zeo\n$ ls -l\ntotal \u003cspan class=\"m\"\u003e28\u003c/span\u003e\ndrwxr-xr-x \u003cspan class=\"m\"\u003e2\u003c/span\u003e yash hogwarts \u003cspan class=\"m\"\u003e4096\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 11:13 archetypes\n-rw-r--r-- \u003cspan class=\"m\"\u003e1\u003c/span\u003e yash hogwarts   \u003cspan class=\"m\"\u003e82\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 11:13 config.toml\ndrwxr-xr-x \u003cspan class=\"m\"\u003e2\u003c/span\u003e yash hogwarts \u003cspan class=\"m\"\u003e4096\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 11:13 content\ndrwxr-xr-x \u003cspan class=\"m\"\u003e2\u003c/span\u003e yash hogwarts \u003cspan class=\"m\"\u003e4096\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 11:13 data\ndrwxr-xr-x \u003cspan class=\"m\"\u003e2\u003c/span\u003e yash hogwarts \u003cspan class=\"m\"\u003e4096\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 11:13 layouts\ndrwxr-xr-x \u003cspan class=\"m\"\u003e2\u003c/span\u003e yash hogwarts \u003cspan class=\"m\"\u003e4096\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 11:13 static\ndrwxr-xr-x \u003cspan class=\"m\"\u003e2\u003c/span\u003e yash hogwarts \u003cspan class=\"m\"\u003e4096\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 11:13 themes\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e I will use YAML format for the config file. Hugo, By default, uses TOML format.\u003c/p\u003e\n\u003cp\u003eA small description of this directory structure:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003earchetypes\u003c/strong\u003e: The archetypes contains predefined frontmatter format for your website\u0026rsquo;s content types. It facilitates consistent metadata format across all the content of your site.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003econtent\u003c/strong\u003e: The content directory contains the markdown files that will be converted to HTML and served to the user.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003edata\u003c/strong\u003e: From Hugo documentation\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThe data folder is where you can store additional data for Hugo to use when generating your site. Data files are not used to generate standalone pages; rather, they are meant to be supplemental to content files. This feature can extend the content in case your front matter fields grow out of control. Or perhaps you want to show a larger dataset in a template (see example below). In both cases, it is a good idea to outsource the data in their files.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003elayouts\u003c/strong\u003e: The layouts folder stores all the templates files which form the presentation of the content files.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003estatic\u003c/strong\u003e: The static folder will contain all the static assets such as \u003ccode\u003eCSS\u003c/code\u003e, \u003ccode\u003eJS\u003c/code\u003e and \u003ccode\u003eimage\u003c/code\u003e files.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003ethemes\u003c/strong\u003e: The themes folder is where we will be storing our theme.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWe will edit the \u003ccode\u003econfig.yaml\u003c/code\u003e file to edit some basic configuration of the site.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ vim config.yaml\nbaseURL: /\ntitle: \u003cspan class=\"s2\"\u003e\u0026#34;My First Blog\u0026#34;\u003c/span\u003e\ndefaultContentLanguage: en\nlanguages:\n  en:\n    lang: en\n    languageName: English\n    weight: \u003cspan class=\"m\"\u003e1\u003c/span\u003e\nMetaDataFormat: \u003cspan class=\"s2\"\u003e\u0026#34;yaml\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eNow when you run your site, Hugo will show some errors. It is normal because our layouts and themes directories are still empty.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ hugo --verbose\nINFO 2018/02/11 11:20:59 Using config file: /home/yash/zeo/config.yaml\nBuilding sites … INFO 2018/02/11 11:20:59 syncing static files to /home/yash/zeo/public/\nWARN 2018/02/11 11:20:59 No translation bundle found \u003cspan class=\"k\"\u003efor\u003c/span\u003e default language \u003cspan class=\"s2\"\u003e\u0026#34;en\u0026#34;\u003c/span\u003e\nWARN 2018/02/11 11:20:59 Translation func \u003cspan class=\"k\"\u003efor\u003c/span\u003e language en not found, use default.\nWARN 2018/02/11 11:20:59 i18n not initialized, check that you have language file \u003cspan class=\"o\"\u003e(\u003c/span\u003ein i18n\u003cspan class=\"o\"\u003e)\u003c/span\u003e that matches the site language or the default language.\nWARN 2018/02/11 11:20:59 \u003cspan class=\"o\"\u003e[\u003c/span\u003een\u003cspan class=\"o\"\u003e]\u003c/span\u003e Unable to locate layout \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;taxonomyTerm\u0026#34;\u003c/span\u003e:\n...\n...\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eThis command will also create a new directory called \u003ccode\u003epublic/\u003c/code\u003e. This is the directory where Hugo will save all the generated HTML files related to your site. It also stores all static data in this folder.\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s have a look at the \u003ccode\u003epublic\u003c/code\u003e folder.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ ls -l public/\ntotal \u003cspan class=\"m\"\u003e16\u003c/span\u003e\ndrwxr-xr-x \u003cspan class=\"m\"\u003e2\u003c/span\u003e yash hogwarts \u003cspan class=\"m\"\u003e4096\u003c/span\u003e Feb  \u003cspan class=\"m\"\u003e11\u003c/span\u003e 11:22 categories\n-rw-r--r-- \u003cspan class=\"m\"\u003e1\u003c/span\u003e yash hogwarts  \u003cspan class=\"m\"\u003e400\u003c/span\u003e Feb  \u003cspan class=\"m\"\u003e11\u003c/span\u003e 11:25 index.xml\n-rw-r--r-- \u003cspan class=\"m\"\u003e1\u003c/span\u003e yash hogwarts  \u003cspan class=\"m\"\u003e383\u003c/span\u003e Feb  \u003cspan class=\"m\"\u003e11\u003c/span\u003e 11:25 sitemap.xml\ndrwxr-xr-x \u003cspan class=\"m\"\u003e2\u003c/span\u003e yash hogwarts \u003cspan class=\"m\"\u003e4096\u003c/span\u003e Feb  \u003cspan class=\"m\"\u003e11\u003c/span\u003e 11:22 tags\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eHugo generated some XML files, but there are no HTML files. It is because we have not created any content in our content directory yet.\u003c/p\u003e\n\u003cp\u003eAt this point, you have a working site with you. All that is left is to add some content and a theme to your site.\u003c/p\u003e\n\u003ch3 id=\"create-a-new-theme\"\u003eCreate a new theme\u003c/h3\u003e\n\u003cp\u003eHugo doesn\u0026rsquo;t ship with a default theme. There are a lot of themes available on Hugo website. Hugo also ships with a command to create new themes.\u003c/p\u003e\n\u003cp\u003eIn this tutorial, we will be creating a theme called \u003ccode\u003ezeo\u003c/code\u003e. As mentioned earlier, my aim is to show you how to use Hugo\u0026rsquo;s features to fill out your HTML files from the markdown content, I will not be focusing on CSS. So the theme will be ugly but functional.\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s create a basic skeleton of the theme. It will create the directory structure of the theme and place empty files for you to fill in.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"c1\"\u003e# run it from the root of your site\u003c/span\u003e\n$ hugo new theme zeo\n$ ls -l themes/zeo/\ntotal \u003cspan class=\"m\"\u003e20\u003c/span\u003e\ndrwxr-xr-x \u003cspan class=\"m\"\u003e2\u003c/span\u003e yash hogwarts \u003cspan class=\"m\"\u003e4096\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 11:30 archetypes\ndrwxr-xr-x \u003cspan class=\"m\"\u003e4\u003c/span\u003e yash hogwarts \u003cspan class=\"m\"\u003e4096\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 11:30 layouts\n-rw-r--r-- \u003cspan class=\"m\"\u003e1\u003c/span\u003e yash hogwarts \u003cspan class=\"m\"\u003e1081\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 11:30 LICENSE.md\ndrwxr-xr-x \u003cspan class=\"m\"\u003e4\u003c/span\u003e yash hogwarts \u003cspan class=\"m\"\u003e4096\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 11:30 static\n-rw-r--r-- \u003cspan class=\"m\"\u003e1\u003c/span\u003e yash hogwarts  \u003cspan class=\"m\"\u003e432\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 11:30 theme.toml\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\nFill out \u003ccode\u003eLICENSE.md\u003c/code\u003e and \u003ccode\u003etheme.toml\u003c/code\u003e file if you plan to distribute your theme to outside world.\u003c/p\u003e\n\u003cp\u003eNow we will edit our \u003ccode\u003econfig.yaml\u003c/code\u003e file to use this theme.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ vim config.yaml\ntheme: \u003cspan class=\"s2\"\u003e\u0026#34;zeo\u0026#34;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eNow that we have an empty theme, let\u0026rsquo;s build the site.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ hugo --verbose\nINFO 2018/02/11 11:34:14 Using config file: /home/yash/zeo/config.yaml\nBuilding sites … INFO 2018/02/11 11:34:14 syncing static files to /home/yash/zeo/public/\nWARN 2018/02/11 11:34:14 No translation bundle found \u003cspan class=\"k\"\u003efor\u003c/span\u003e default language \u003cspan class=\"s2\"\u003e\u0026#34;en\u0026#34;\u003c/span\u003e\nWARN 2018/02/11 11:34:14 Translation func \u003cspan class=\"k\"\u003efor\u003c/span\u003e language en not found, use default.\nWARN 2018/02/11 11:34:14 i18n not initialized, check that you have language file \u003cspan class=\"o\"\u003e(\u003c/span\u003ein i18n\u003cspan class=\"o\"\u003e)\u003c/span\u003e that matches the site language or the default language.\n\n                   \u003cspan class=\"p\"\u003e|\u003c/span\u003e EN\n+------------------+----+\n  Pages            \u003cspan class=\"p\"\u003e|\u003c/span\u003e  \u003cspan class=\"m\"\u003e3\u003c/span\u003e\n  Paginator pages  \u003cspan class=\"p\"\u003e|\u003c/span\u003e  \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n  Non-page files   \u003cspan class=\"p\"\u003e|\u003c/span\u003e  \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n  Static files     \u003cspan class=\"p\"\u003e|\u003c/span\u003e  \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n  Processed images \u003cspan class=\"p\"\u003e|\u003c/span\u003e  \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n  Aliases          \u003cspan class=\"p\"\u003e|\u003c/span\u003e  \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n  Sitemaps         \u003cspan class=\"p\"\u003e|\u003c/span\u003e  \u003cspan class=\"m\"\u003e1\u003c/span\u003e\n  Cleaned          \u003cspan class=\"p\"\u003e|\u003c/span\u003e  \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n\nTotal in \u003cspan class=\"m\"\u003e12\u003c/span\u003e ms\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\nThese warnings are harmless in our case, as we are developing our site in English only.\u003c/p\u003e\n\u003cp\u003eHugo does two things while generating your website. It transforms all the content files to HTML using the defined templates, and its copies static files into the site. Static files are not transformed by Hugo. They are copied exactly as they are.\u003c/p\u003e\n\u003ch3 id=\"the-cycle\"\u003eThe Cycle\u003c/h3\u003e\n\u003cp\u003eThe usual development cycle when developing themes for Hugo is:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDelete the \u003ccode\u003e/public\u003c/code\u003e folder\u003c/li\u003e\n\u003cli\u003eRun the built-in web server and open your site in the browser\u003c/li\u003e\n\u003cli\u003eMake changes to your theme files\u003c/li\u003e\n\u003cli\u003eView your changes in browser\u003c/li\u003e\n\u003cli\u003eRepeat step 3\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIt is necessary to delete the \u003ccode\u003epublic\u003c/code\u003e directory because Hugo does not try to remove any outdated files from this folder. So the old data might interfere with your workflow.\u003c/p\u003e\n\u003cp\u003eIt is also a good idea to track changes in your theme with the help of a version control software. I prefer Git for this. You can use others according to your preference.\u003c/p\u003e\n\u003ch3 id=\"run-your-site-in-the-browser\"\u003eRun your site in the browser\u003c/h3\u003e\n\u003cp\u003eHugo has a built-in web server which helps considerably while developing themes for Hugo. It also has a \u003cem\u003elive reload\u003c/em\u003e and \u003cem\u003ewatch\u003c/em\u003e feature which watches for changes in your files and reloads the web page accordingly.\u003c/p\u003e\n\u003cp\u003eRun it with \u003ccode\u003ehugo server\u003c/code\u003e command.\u003c/p\u003e\n\u003cp\u003eNow open \u003ca href=\"http://localhost:1313\"\u003ehttp://localhost:1313\u003c/a\u003e in your browser. By default, Hugo will not show anything, because it cannot find any HTML file in the public directory.\u003c/p\u003e\n\u003cp\u003eThe command to load web server with \u003ccode\u003e--watch\u003c/code\u003e option is:\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ hugo server --watch --verbose\n...\n...\n                   \u003cspan class=\"p\"\u003e|\u003c/span\u003e EN\n+------------------+----+\n  Pages            \u003cspan class=\"p\"\u003e|\u003c/span\u003e  \u003cspan class=\"m\"\u003e4\u003c/span\u003e\n  Paginator pages  \u003cspan class=\"p\"\u003e|\u003c/span\u003e  \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n  Non-page files   \u003cspan class=\"p\"\u003e|\u003c/span\u003e  \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n  Static files     \u003cspan class=\"p\"\u003e|\u003c/span\u003e  \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n  Processed images \u003cspan class=\"p\"\u003e|\u003c/span\u003e  \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n  Aliases          \u003cspan class=\"p\"\u003e|\u003c/span\u003e  \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n  Sitemaps         \u003cspan class=\"p\"\u003e|\u003c/span\u003e  \u003cspan class=\"m\"\u003e1\u003c/span\u003e\n  Cleaned          \u003cspan class=\"p\"\u003e|\u003c/span\u003e  \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n\nTotal in \u003cspan class=\"m\"\u003e11\u003c/span\u003e ms\n...\n...\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003ch3 id=\"update-the-home-page-template\"\u003eUpdate the Home page template\u003c/h3\u003e\n\u003cp\u003eHugo looks for following directories in theme\u0026rsquo;s \u003ccode\u003e/layout\u003c/code\u003e folder to search for \u003ccode\u003eindex.html\u003c/code\u003e page.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eindex.html\u003c/li\u003e\n\u003cli\u003e_default/list.html\u003c/li\u003e\n\u003cli\u003e_default/single.html\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIt is always desirable to update the most specific template related to the content type. It is not a hard and fast rule, but a good generalization to follow.\u003c/p\u003e\n\u003cp\u003eWe will first make a static page to see if our \u003ccode\u003eindex.html\u003c/code\u003e page is rendered correctly.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e$ vim themes/zeo/layouts/index.html\n\u003cspan class=\"cp\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003eHello World!\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBuild the site and verify the results. You should see \u003cem\u003eHello World!\u003c/em\u003e when you open \u003ca href=\"http://localhost:1313\"\u003ehttp://localhost:1313\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"building-a-functional-home-page\"\u003eBuilding a functional Home Page\u003c/h3\u003e\n\u003cp\u003eNow we will create a home page which will reflect the content of our site every time we build it.\u003c/p\u003e\n\u003cp\u003eFor that, we will first create some new posts. We will display these posts as a list on the home page and on their pages, too.\u003c/p\u003e\n\u003cp\u003eHugo has a command for generating skeleton of posts, just like it did for sites and themes.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ hugo --verbose new post/first.md\nINFO 2018/02/11 11:40:58 Using config file: /home/yash/zeo/config.yaml\nINFO 2018/02/11 11:40:58 attempting to create \u003cspan class=\"s2\"\u003e\u0026#34;post/first.md\u0026#34;\u003c/span\u003e of \u003cspan class=\"s2\"\u003e\u0026#34;post\u0026#34;\u003c/span\u003e of ext \u003cspan class=\"s2\"\u003e\u0026#34;.md\u0026#34;\u003c/span\u003e\nINFO 2018/02/11 11:40:58 curpath: /home/yash/zeo/archetypes/default.md\n...\n...\n/home/yash/zeo/content/post/first.md created\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003enew\u003c/code\u003e command uses an archetype to generate the frontmatter for new posts. When we created our site, hugo created a default archetype in the \u003ccode\u003e/archetype\u003c/code\u003e folder.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ cat archetypes/default.md\n---\ntitle: \u003cspan class=\"s2\"\u003e\u0026#34;{{ replace .Name \u0026#34;\u003c/span\u003e-\u003cspan class=\"s2\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34; | title }}\u0026#34;\u003c/span\u003e\ndate: \u003cspan class=\"o\"\u003e{{\u003c/span\u003e .Date \u003cspan class=\"o\"\u003e}}\u003c/span\u003e\n\n---\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eIt is a good idea to create a default archetype in the themes folder also so that users can override the theme\u0026rsquo;s archetype with their archetype whenever they want.\u003c/p\u003e\n\u003cp\u003eWe will create a new archetype for our posts\u0026rsquo; frontmatter and delete the default \u003ccode\u003earchetype/default.md\u003c/code\u003e.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ rm -rf archetype/default.md\n$ vim themes/zeo/archetypes/post.md\n---\ntitle: \u003cspan class=\"s2\"\u003e\u0026#34;{{ replace .Name \u0026#34;\u003c/span\u003e-\u003cspan class=\"s2\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34; | title }}\u0026#34;\u003c/span\u003e\ndate: \u003cspan class=\"o\"\u003e{{\u003c/span\u003e .Date \u003cspan class=\"o\"\u003e}}\u003c/span\u003e\nDescription: \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\nTags: \u003cspan class=\"o\"\u003e[]\u003c/span\u003e\nCategories: \u003cspan class=\"o\"\u003e[]\u003c/span\u003e\n\n---\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eCreate one more post in \u003ccode\u003econtent/post\u003c/code\u003e directory.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ hugo --verbose new post/second.md\nINFO 2018/02/11 12:13:56 Using config file: /home/yash/zeo/config.yaml\nINFO 2018/02/11 12:13:56 attempting to create \u003cspan class=\"s2\"\u003e\u0026#34;post/second.md\u0026#34;\u003c/span\u003e of \u003cspan class=\"s2\"\u003e\u0026#34;post\u0026#34;\u003c/span\u003e of ext \u003cspan class=\"s2\"\u003e\u0026#34;.md\u0026#34;\u003c/span\u003e\nINFO 2018/02/11 12:13:56 curpath: /home/yash/zeo/themes/zeo/archetypes/post.md\n...\n...\n/home/yash/zeo/content/post/second.md created\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eSee the difference. Hugo used the theme\u0026rsquo;s archetype for generating the frontmatter this time.\u003c/p\u003e\n\u003cp\u003eBy default, Hugo does not generate posts with an empty content section. So you will need to add some content before you try to build the site.\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s look at the \u003ccode\u003econtent/post/first.md\u003c/code\u003e file, after adding content to it.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-markdown\" data-lang=\"markdown\"\u003e$ cat content/post/first.md\n---\ntitle: \u0026#34;First\u0026#34;\ndate: 2018-02-11T11:35:58+05:30\ndraft: true\nTags: [\u0026#34;first\u0026#34;]\nCategories: [\u0026#34;Hugo\u0026#34;]\n\n---\n\nHi there. My first Hugo post\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eNow that our posts are ready, we need to create templates to show them in a list on the home page and to show their content on separate pages for each post.\u003c/p\u003e\n\u003cp\u003eWe will first edit the template for the home page that we created previously. We will then modify \u0026ldquo;single\u0026rdquo; templates which are used to generate output for a single content file. We also have \u0026ldquo;list\u0026rdquo; templates which are used to group similar type of content and render them as a list.\nThe home page will show a list of last ten posts that we have created. Let\u0026rsquo;s update its template to add this logic.\u003c/p\u003e\n\u003ch3 id=\"update-your-home-page-to-show-your-content\"\u003eUpdate your home page to show your content\u003c/h3\u003e\n\u003cp\u003eNow add your template code to \u003ccode\u003ethemes/zeo/layouts/index.html\u003c/code\u003e.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e$ vim themes/zeo/layouts/index.html\n$ cat !$\ncat themes/zeo/layouts/index.html\n\u003cspan class=\"cp\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  {{ range first 10 .Data.Pages }}\n    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e{{ .Title }}\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  {{ end }}\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eHugo uses Go Template Engine. This engine scans the templates for commands that are enclosed between \u003ccode\u003e{{\u003c/code\u003e and \u003ccode\u003e}}\u003c/code\u003e. In this template, the commands are \u003ccode\u003erange\u003c/code\u003e, \u003ccode\u003efirst\u003c/code\u003e, \u003ccode\u003e.Data.Pages\u003c/code\u003e, \u003ccode\u003e.Title\u003c/code\u003e and \u003ccode\u003eend\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe template implies that we are going to get first 10 latest pages from our content folder and render their title as \u003ccode\u003eh1\u003c/code\u003e heading.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003erange\u003c/code\u003e is an iterator function. Hugo treats every HTML file created as a page, so \u003ccode\u003erange\u003c/code\u003e will loop through all the pages created. Here we are instructing \u003ccode\u003erange\u003c/code\u003e to stop after first ten pages.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eend\u003c/code\u003e command signals the end of the \u003cem\u003erange\u003c/em\u003e iterator. The engine loops back to the next iteration as soon as it encounters the \u003cem\u003eend\u003c/em\u003e command. Everything between \u003cem\u003erange\u003c/em\u003e and \u003cem\u003eend\u003c/em\u003e will be evaluated for each iteration of the loop.\u003c/p\u003e\n\u003cp\u003eBuild the website and see the changes. The homepage now shows our two posts. However, you cannot click on the posts and read their content. Let\u0026rsquo;s change that too.\u003c/p\u003e\n\u003ch3 id=\"linking-your-posts-on-home-page\"\u003eLinking your posts on Home Page\u003c/h3\u003e\n\u003cp\u003eLet\u0026rsquo;s add a link to the post\u0026rsquo;s page from home page.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e$ vim themes/zeo/layouts/index.html\n\u003cspan class=\"cp\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  {{ range first 10 .Data.Pages }}\n    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ea\u003c/span\u003e \u003cspan class=\"na\"\u003ehref\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;{{ .Permalink }}\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e{{ .Title }}\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  {{ end }}\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eBuild your site and see the result. The titles are now links, but when you click on them, it takes you to a page which says \u003ccode\u003e404 page not found\u003c/code\u003e. That is expected because we have not created any template for the single pages where the content can be rendered. So Hugo could not find any template, and it did not output any HTML file. We will change that in a minute.\u003c/p\u003e\n\u003cp\u003eWe want to render the posts, which are in \u003ccode\u003econtent/post\u003c/code\u003e directory. That means that their section is post and their type is also post.\u003c/p\u003e\n\u003cp\u003eHugo uses section and type information to identify the template file for each piece of content. It will first look for a template file which matches the section or type of the content. If it could not find it, then it will use \u003ccode\u003e_default/single.html\u003c/code\u003e file.\u003c/p\u003e\n\u003cp\u003eSince we do not have any other content type yet, we will just start by updating the \u003ccode\u003e_default/single.html\u003c/code\u003e file.\u003c/p\u003e\n\u003cp\u003eRemember that Hugo will use this file for every content type for which we have not created a template. However, for now, we will accept that cost as we do not have any other content type with us. We will refactor our templates to accommodate more content types, as we add more content.\u003c/p\u003e\n\u003cp\u003eUpdate the template file.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e$ vim themes/zeo/layouts/_default/single.html\n\u003cspan class=\"cp\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003etitle\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e{{ .Title }}\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003etitle\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e{{ .Title }}\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  {{ .Content }}\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eBuild the site and verify the results. You will see that on clicking on \u003ccode\u003efirst\u003c/code\u003e, you get the usual result, but clicking on \u003ccode\u003esecond\u003c/code\u003e still produces the \u003ccode\u003e404 page not found\u003c/code\u003e error. It is because Hugo does not generate pages with empty content. Remember I mentioned it earlier.\u003c/p\u003e\n\u003cp\u003eNow that we have our home page and posts page ready, we will build a page to list all the posts, not just the recent ten posts. This page will be accessible at \u003ca href=\"http://localhost:1313/post\"\u003ehttp://localhost:1313/post\u003c/a\u003e. Currently, this page is blank because there is no template defined for it.\u003c/p\u003e\n\u003cp\u003eThis page will show the listings of all the posts, so the type of this page will be a list. We will again use the default \u003ccode\u003e_default/list.html\u003c/code\u003e as we do not have any other content type with us.\u003c/p\u003e\n\u003cp\u003eUpdate the list file.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e$ vim themes/zeo/layouts/_default/list.html\n\u003cspan class=\"cp\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  {{ range .Data.Pages }}\n    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ea\u003c/span\u003e \u003cspan class=\"na\"\u003ehref\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;{{ .Permalink }}\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e{{ .Title }}\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  {{ end }}\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3 id=\"add-date-published-to-the-posts\"\u003eAdd \u0026ldquo;Date Published\u0026rdquo; to the posts\u003c/h3\u003e\n\u003cp\u003eIt is a standard practice to add the date on which the post was published on the blog. The front matter of our posts has a variable named \u003ccode\u003edate\u003c/code\u003e. We will use that variable to fetch the date. Our posts are using the default \u003cem\u003esingle\u003c/em\u003e template, so we will edit that file.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e$ vim themes/zeo/layouts/_default/single.html\n\u003cspan class=\"cp\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003etitle\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e{{ .Title }}\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003etitle\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e{{ .Title }}\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eh2\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e{{ .Date.Format \u0026#34;Sun, Feb 11, 2018\u0026#34; }}\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eh2\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  {{ .Content }}\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003chr\u003e\n\u003ch2 id=\"adding-top-level-pages\"\u003eAdding top-level Pages\u003c/h2\u003e\n\u003cp\u003eOkay, so now that we have our homepage, post-list page and post content pages in place, we will add a new \u003cem\u003eabout\u003c/em\u003e page at the top level of our blog, not at a sublevel like we did for posts.\u003c/p\u003e\n\u003cp\u003eHugo uses the directory structure of the content directory to identify the structure of the blog. Let\u0026rsquo;s verify that and create a new \u003ccode\u003eabout\u003c/code\u003e page in the content directory.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e$ vim content/about.md\n---\ntitle: \u0026#34;about\u0026#34;\ndescription: \u0026#34;about this blog\u0026#34;\ndate: \u0026#34;2018-02-11\u0026#34;\n---\n\n### about me\n\nHi there, you just reached my blog.\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eLet\u0026rsquo;s generate the site and view the results.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ hugo --verbose\n$ ls -l public/\ntotal \u003cspan class=\"m\"\u003e36\u003c/span\u003e\ndrwxr-xr-x \u003cspan class=\"m\"\u003e2\u003c/span\u003e yash hogwarts \u003cspan class=\"m\"\u003e4096\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 12:43 about\ndrwxr-xr-x \u003cspan class=\"m\"\u003e3\u003c/span\u003e yash hogwarts \u003cspan class=\"m\"\u003e4096\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 12:43 categories\ndrwxr-xr-x \u003cspan class=\"m\"\u003e2\u003c/span\u003e yash hogwarts \u003cspan class=\"m\"\u003e4096\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 11:20 css\n-rw-r--r-- \u003cspan class=\"m\"\u003e1\u003c/span\u003e yash hogwarts  \u003cspan class=\"m\"\u003e187\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 12:43 index.html\n-rw-r--r-- \u003cspan class=\"m\"\u003e1\u003c/span\u003e yash hogwarts \u003cspan class=\"m\"\u003e1183\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 12:43 index.xml\ndrwxr-xr-x \u003cspan class=\"m\"\u003e2\u003c/span\u003e yash hogwarts \u003cspan class=\"m\"\u003e4096\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 11:20 js\ndrwxr-xr-x \u003cspan class=\"m\"\u003e4\u003c/span\u003e yash hogwarts \u003cspan class=\"m\"\u003e4096\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 12:43 post\n-rw-r--r-- \u003cspan class=\"m\"\u003e1\u003c/span\u003e yash hogwarts \u003cspan class=\"m\"\u003e1139\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 12:43 sitemap.xml\ndrwxr-xr-x \u003cspan class=\"m\"\u003e3\u003c/span\u003e yash hogwarts \u003cspan class=\"m\"\u003e4096\u003c/span\u003e Feb \u003cspan class=\"m\"\u003e11\u003c/span\u003e 12:43 tags\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNotice that Hugo created a new directory \u003ccode\u003eabout\u003c/code\u003e. This directory contains only one file \u003ccode\u003eindex.html\u003c/code\u003e. The about page will be rendered from \u003ccode\u003eabout/index.html\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIf you look carefully, the \u003ccode\u003eabout\u003c/code\u003e page is listed with the posts on the homepage. It is not desirable, so let\u0026rsquo;s change that first.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e$ vim themes/zeo/layouts/index.html\n\u003cspan class=\"cp\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003eposts\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  {{ range first 10 .Data.Pages }}\n    {{ if eq .Type \u0026#34;post\u0026#34;}}\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eh2\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ea\u003c/span\u003e \u003cspan class=\"na\"\u003ehref\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;{{ .Permalink }}\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e{{ .Title }}\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eh2\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n    {{ end }}\n  {{ end }}\n\n  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003epages\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  {{ range .Data.Pages }}\n    {{ if eq .Type \u0026#34;page\u0026#34; }}\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eh2\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ea\u003c/span\u003e \u003cspan class=\"na\"\u003ehref\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;{{ .Permalink }}\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e{{ .Title }}\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eh2\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n    {{ end }}\n  {{ end }}\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow build the site and verify the results. The homepage now has two sections, one for posts and other for the pages. Click on the \u003cem\u003eabout\u003c/em\u003e page. You will see the page for \u003cem\u003eabout\u003c/em\u003e. Remember, I mentioned that Hugo would use the \u003cem\u003esingle\u003c/em\u003e template for each page, for which it cannot find a template file. There is still one issue. The \u003cem\u003eabout\u003c/em\u003e page shows the date also. We do not want to show the date on the \u003cem\u003eabout\u003c/em\u003e page.\u003c/p\u003e\n\u003cp\u003eThere are a couple of ways to fix this. We can add an if-else statement to detect the type of the content and display date only if it is a post. However, let\u0026rsquo;s use the feature provided by Hugo and create a new template type for the posts. Before we do that, let\u0026rsquo;s learn to use one more template type which is \u003cem\u003epartials\u003c/em\u003e.\u003c/p\u003e\n\u003ch2 id=\"partials-1\"\u003ePartials\u003c/h2\u003e\n\u003cp\u003eIn Hugo, partials are used to store the shared piece of code which repeats in more than one templates. Partials are kept in \u003ccode\u003ethemes/zeo/layouts/partials\u003c/code\u003e directory. Partials can be used to override the themes presentation. End users can use them to change the default behavior of a theme. It is always a good idea to use partials as much as possible.\u003c/p\u003e\n\u003ch3 id=\"header-and-footer-partials\"\u003eHeader and Footer partials\u003c/h3\u003e\n\u003cp\u003eHeader and footer of most of the posts and pages will follow a similar pattern. So they form an excellent example to be defined as a partial.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e$ vim themes/zeo/layouts/partials/header.html\n\u003cspan class=\"cp\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003etitle\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e{{ .Title }}\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003etitle\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\n$ vim themes/zeo/layouts/partials/footer.html\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003cp\u003eWe can call a partial by including this path in the template\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"p\"\u003e{{\u003c/span\u003e \u003cspan class=\"nx\"\u003epartial\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;header.html\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e.\u003c/span\u003e \u003cspan class=\"p\"\u003e}}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003ch2 id=\"update-the-homepage-template\"\u003eUpdate the Homepage template\u003c/h2\u003e\n\u003cp\u003eLet\u0026rsquo;s update our homepage template to use these partials.\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e$ vim themes/zeo/layouts/index.html\n{{ partial \u0026#34;header.html\u0026#34; . }}\n\n  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003eposts\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  {{ range first 10 .Data.Pages }}\n    {{ if eq .Type \u0026#34;post\u0026#34;}}\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eh2\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ea\u003c/span\u003e \u003cspan class=\"na\"\u003ehref\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;{{ .Permalink }}\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e{{ .Title }}\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eh2\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n    {{ end }}\n  {{ end }}\n\n  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003epages\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  {{ range .Data.Pages }}\n    {{ if or (eq .Type \u0026#34;page\u0026#34;) (eq .Type \u0026#34;about\u0026#34;) }}\n      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eh2\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ea\u003c/span\u003e \u003cspan class=\"na\"\u003ehref\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;{{ .Permalink }}\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eh2\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n    {{ end }}\n  {{ end }}\n\n{{ partial \u0026#34;footer.html\u0026#34; . }}\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/p\u003e\n\u003ch2 id=\"update-the-single-template\"\u003eUpdate the single template\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e$ vim themes/zeo/layouts/_default/single.html\n{{ partial \u0026#34;header.html\u0026#34; . }}\n\n  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e{{ .Title }}\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eh2\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e{{ .Date.Format \u0026#34;Sun, Feb 11, 2018\u0026#34; }}\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eh2\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  {{ .Content }}\n\n{{ partial \u0026#34;footer.html\u0026#34; . }}\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eBuild the website and verify the results. The title on the posts and the about page should both reflect the value from the markdown file.\u003c/p\u003e\n\u003ch2 id=\"fixing-the-date-shown-on-about-page\"\u003eFixing the date shown on About page\u003c/h2\u003e\n\u003cp\u003eRemember, we had the issue that the date was showing on the \u003cem\u003eabout\u003c/em\u003e page also. We discussed one method to solve this issue. Now I will discuss a more \u003cem\u003ehugoic\u003c/em\u003e way of solving this issue.\u003c/p\u003e\n\u003cp\u003eWe will create a new section template to fix this issue.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e$ mkdir themes/zeo/layouts/post\n$ vim themes/zeo/layouts/post/single.html\n{{ partial \u0026#34;header.html\u0026#34; . }}\n\n  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e{{ .Title }}\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eh2\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eh2\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  {{ .Content }}\n\n{{ partial \u0026#34;footer.html\u0026#34; . }}\n\n\n$ vim themes/zeo/layouts/_default/single.html\n\u003cspan class=\"cp\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003etitle\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e{{ .Title }}\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003etitle\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e{{ .Title }}\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n  {{ .Content }}\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNote that we have changed the default \u003cem\u003esingle\u003c/em\u003e template and added that logic in post\u0026rsquo;s \u003cem\u003esingle\u003c/em\u003e template.\u003c/p\u003e\n\u003cp\u003eBuild the website and verify the results. The \u003cem\u003eabout\u003c/em\u003e page does not show the date now, but the posts page still show the date. We can also move the list template\u0026rsquo;s logic to the \u003ccode\u003eindex.html\u003c/code\u003e file of post section template.\u003c/p\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eWe have learnt, how Hugo harnesses the powerful yet simple Go template engine to create the static site generator. We also learnt about partials and their excellent utilization by Hugo in the spirit of \u003cem\u003eDon\u0026rsquo;t Repeat Yourself\u003c/em\u003e principle. Now that you know how to make themes in Hugo, go ahead and start creating new beautiful themes. Best of luck for your endaevour.\u003c/p\u003e\n","text":"This article was originally published on zeolearn.\nIntroduction In this tutorial, I will show you how to create a basic Hugo theme. I assume that you are familiar with basic HTML, and how to write content in markdown. I will be explaining the working of Hugo and how it uses Go templating language and how you can use these templates to organize your content. As this post will be focusing mainly on Hugo\u0026rsquo;s working, I will not be covering CSS here.\nWe will be starting with some necessary information about the terminology used in Hugo. Then we will create a Hugo site with a very basic template. Then we will add new templates and posts to our site as we delve further into Hugo. With very slight variations to what you will learn here, you will be able to create different types of real-world websites.\nNow, a short tutorial about the flow of this post. The commands that start with $ are meant to be run in the terminal or command line. The output of the command will follow immediately. Comments will begin with #.\nSome Terminology Configuration File Hugo uses a configuration file to identify common settings for your site. It is located in the root of your site. This file can be written in TOML, YAML or JSON formats. Hugo identifies this file using the extension.\nBy default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file.\nContent The content files will contain the metadata and text about your posts. A content file can be divided into two sections, the top section being frontmatter and the next section is the markdown that will be converted to HTML by Hugo. The content files reside in /content directory.\nFrontmatter The frontmatter section contains information about your post. It can be written in JSON, TOML or YAML. Hugo identifies the type of frontmatter used with the help of identifying tokens(markers). TOML is surrounded by +++, YAML is by --- and JSON is enclosed in curly braces { and }. The information in the front matter of a content type will be parsed to be used in the template for that specific content type while converting to HTML.\nI prefer to use YAML, so you might need to translate your configurations if you are using JSON or TOML.\nThis is an example of frontmatter written in YAML. ---date:\u0026#34;2018-02-11T11:45:05+05:30\u0026#34;title:\u0026#34;Basic Hugo Theming Tutorial.\u0026#34;description:\u0026#34;A primer about theme development for Hugo, a static site generator written in Golang.\u0026#34;categories:- Hugo- Customizationtags:- Theme---\nYou can read more about different configuration options available for frontmatter here.\nMarkdown The markdown section is where you will write your actual post. The content written here will automatically be converted to HTML by Hugo with the help of a Markdown engine.\nTemplates In Hugo, templates govern the way; your content will be rendered to HTML. Each template provides a consistent layout when rendering the markdown content. The templates reside in the /layouts directory.\nThere are three types of templates: single, list and partial. Each kind of template take some content as input and transform it according to the way defined in the template.\nSingle Template A single template is used to render a single page. The best example of this is about page.\nList Template A list template renders a group of related content. It can be all recent posts or all posts belonging to a particular category.\nThe homepage template is a specific type of list template. Hugo assumes that the homepage will serve as a bridge to all the other content on your website.\nPartials Partials are short code snippets that can be injected in any other template type. They are instrumental when you want to repeat some content on every page of your website. The header and footer content are good candidates to be included in separate partials. It is a good practice to use partials liberally in your Hugo site as it adheres to DRY principle.\nOkay, Let\u0026rsquo;s Start So now that you have a basic understanding of Hugo, we will create a new site using Hugo. Hugo provides a command to generate new sites. We will use that command to scaffold our site. It will create a basic skeleton of your site and will give you a basic configuration file. $ hugo new site ~/zeo $ cd ~/zeo $ ls -l total 28 drwxr-xr-x 2 yash hogwarts 4096 Feb 11 11:13 archetypes -rw-r--r-- 1 yash hogwarts 82 Feb 11 11:13 config.toml drwxr-xr-x 2 yash hogwarts 4096 Feb 11 11:13 content drwxr-xr-x 2 yash hogwarts 4096 Feb 11 11:13 data drwxr-xr-x 2 yash hogwarts 4096 Feb 11 11:13 layouts drwxr-xr-x 2 yash hogwarts 4096 Feb 11 11:13 static drwxr-xr-x 2 yash hogwarts 4096 Feb 11 11:13 themes\nNote: I will use YAML format for the config file. Hugo, By default, uses TOML format.\nA small description of this directory structure:\n  archetypes: The archetypes contains predefined frontmatter format for your website\u0026rsquo;s content types. It facilitates consistent metadata format across all the content of your site.\n  content: The content directory contains the markdown files that will be converted to HTML and served to the user.\n  data: From Hugo documentation\n The data folder is where you can store additional data for Hugo to use when generating your site. Data files are not used to generate standalone pages; rather, they are meant to be supplemental to content files. This feature can extend the content in case your front matter fields grow out of control. Or perhaps you want to show a larger dataset in a template (see example below). In both cases, it is a good idea to outsource the data in their files.\n   layouts: The layouts folder stores all the templates files which form the presentation of the content files.\n  static: The static folder will contain all the static assets such as CSS, JS and image files.\n  themes: The themes folder is where we will be storing our theme.\n  We will edit the config.yaml file to edit some basic configuration of the site. $ vim config.yaml baseURL: / title: \u0026#34;My First Blog\u0026#34; defaultContentLanguage: en languages: en: lang: en languageName: English weight: 1 MetaDataFormat: \u0026#34;yaml\u0026#34;\nNow when you run your site, Hugo will show some errors. It is normal because our layouts and themes directories are still empty. $ hugo --verbose INFO 2018/02/11 11:20:59 Using config file: /home/yash/zeo/config.yaml Building sites … INFO 2018/02/11 11:20:59 syncing static files to /home/yash/zeo/public/ WARN 2018/02/11 11:20:59 No translation bundle found for default language \u0026#34;en\u0026#34; WARN 2018/02/11 11:20:59 Translation func for language en not found, use default. WARN 2018/02/11 11:20:59 i18n not initialized, check that you have language file (in i18n) that matches the site language or the default language. WARN 2018/02/11 11:20:59 [en] Unable to locate layout for \u0026#34;taxonomyTerm\u0026#34;: ... ...\nThis command will also create a new directory called public/. This is the directory where Hugo will save all the generated HTML files related to your site. It also stores all static data in this folder.\nLet\u0026rsquo;s have a look at the public folder. $ ls -l public/ total 16 drwxr-xr-x 2 yash hogwarts 4096 Feb 11 11:22 categories -rw-r--r-- 1 yash hogwarts 400 Feb 11 11:25 index.xml -rw-r--r-- 1 yash hogwarts 383 Feb 11 11:25 sitemap.xml drwxr-xr-x 2 yash hogwarts 4096 Feb 11 11:22 tags\nHugo generated some XML files, but there are no HTML files. It is because we have not created any content in our content directory yet.\nAt this point, you have a working site with you. All that is left is to add some content and a theme to your site.\nCreate a new theme Hugo doesn\u0026rsquo;t ship with a default theme. There are a lot of themes available on Hugo website. Hugo also ships with a command to create new themes.\nIn this tutorial, we will be creating a theme called zeo. As mentioned earlier, my aim is to show you how to use Hugo\u0026rsquo;s features to fill out your HTML files from the markdown content, I will not be focusing on CSS. So the theme will be ugly but functional.\nLet\u0026rsquo;s create a basic skeleton of the theme. It will create the directory structure of the theme and place empty files for you to fill in. # run it from the root of your site $ hugo new theme zeo $ ls -l themes/zeo/ total 20 drwxr-xr-x 2 yash hogwarts 4096 Feb 11 11:30 archetypes drwxr-xr-x 4 yash hogwarts 4096 Feb 11 11:30 layouts -rw-r--r-- 1 yash hogwarts 1081 Feb 11 11:30 LICENSE.md drwxr-xr-x 4 yash hogwarts 4096 Feb 11 11:30 static -rw-r--r-- 1 yash hogwarts 432 Feb 11 11:30 theme.toml Fill out LICENSE.md and theme.toml file if you plan to distribute your theme to outside world.\nNow we will edit our config.yaml file to use this theme. $ vim config.yaml theme: \u0026#34;zeo\u0026#34;\nNow that we have an empty theme, let\u0026rsquo;s build the site. $ hugo --verbose INFO 2018/02/11 11:34:14 Using config file: /home/yash/zeo/config.yaml Building sites … INFO 2018/02/11 11:34:14 syncing static files to /home/yash/zeo/public/ WARN 2018/02/11 11:34:14 No translation bundle found for default language \u0026#34;en\u0026#34; WARN 2018/02/11 11:34:14 Translation func for language en not found, use default. WARN 2018/02/11 11:34:14 i18n not initialized, check that you have language file (in i18n) that matches the site language or the default language. | EN +------------------+----+ Pages | 3 Paginator pages | 0 Non-page files | 0 Static files | 0 Processed images | 0 Aliases | 0 Sitemaps | 1 Cleaned | 0 Total in 12 ms These warnings are harmless in our case, as we are developing our site in English only.\nHugo does two things while generating your website. It transforms all the content files to HTML using the defined templates, and its copies static files into the site. Static files are not transformed by Hugo. They are copied exactly as they are.\nThe Cycle The usual development cycle when developing themes for Hugo is:\n Delete the /public folder Run the built-in web server and open your site in the browser Make changes to your theme files View your changes in browser Repeat step 3  It is necessary to delete the public directory because Hugo does not try to remove any outdated files from this folder. So the old data might interfere with your workflow.\nIt is also a good idea to track changes in your theme with the help of a version control software. I prefer Git for this. You can use others according to your preference.\nRun your site in the browser Hugo has a built-in web server which helps considerably while developing themes for Hugo. It also has a live reload and watch feature which watches for changes in your files and reloads the web page accordingly.\nRun it with hugo server command.\nNow open http://localhost:1313 in your browser. By default, Hugo will not show anything, because it cannot find any HTML file in the public directory.\nThe command to load web server with --watch option is: $ hugo server --watch --verbose ... ... | EN +------------------+----+ Pages | 4 Paginator pages | 0 Non-page files | 0 Static files | 0 Processed images | 0 Aliases | 0 Sitemaps | 1 Cleaned | 0 Total in 11 ms ... ...\nUpdate the Home page template Hugo looks for following directories in theme\u0026rsquo;s /layout folder to search for index.html page.\n index.html _default/list.html _default/single.html  It is always desirable to update the most specific template related to the content type. It is not a hard and fast rule, but a good generalization to follow.\nWe will first make a static page to see if our index.html page is rendered correctly.\n$ vim themes/zeo/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Hello World!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Build the site and verify the results. You should see Hello World! when you open http://localhost:1313.\nBuilding a functional Home Page Now we will create a home page which will reflect the content of our site every time we build it.\nFor that, we will first create some new posts. We will display these posts as a list on the home page and on their pages, too.\nHugo has a command for generating skeleton of posts, just like it did for sites and themes. $ hugo --verbose new post/first.md INFO 2018/02/11 11:40:58 Using config file: /home/yash/zeo/config.yaml INFO 2018/02/11 11:40:58 attempting to create \u0026#34;post/first.md\u0026#34; of \u0026#34;post\u0026#34; of ext \u0026#34;.md\u0026#34; INFO 2018/02/11 11:40:58 curpath: /home/yash/zeo/archetypes/default.md ... ... /home/yash/zeo/content/post/first.md created\nThe new command uses an archetype to generate the frontmatter for new posts. When we created our site, hugo created a default archetype in the /archetype folder. $ cat archetypes/default.md --- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date: {{ .Date }} ---\nIt is a good idea to create a default archetype in the themes folder also so that users can override the theme\u0026rsquo;s archetype with their archetype whenever they want.\nWe will create a new archetype for our posts\u0026rsquo; frontmatter and delete the default archetype/default.md. $ rm -rf archetype/default.md $ vim themes/zeo/archetypes/post.md --- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date: {{ .Date }} Description: \u0026#34;\u0026#34; Tags: [] Categories: [] ---\nCreate one more post in content/post directory. $ hugo --verbose new post/second.md INFO 2018/02/11 12:13:56 Using config file: /home/yash/zeo/config.yaml INFO 2018/02/11 12:13:56 attempting to create \u0026#34;post/second.md\u0026#34; of \u0026#34;post\u0026#34; of ext \u0026#34;.md\u0026#34; INFO 2018/02/11 12:13:56 curpath: /home/yash/zeo/themes/zeo/archetypes/post.md ... ... /home/yash/zeo/content/post/second.md created\nSee the difference. Hugo used the theme\u0026rsquo;s archetype for generating the frontmatter this time.\nBy default, Hugo does not generate posts with an empty content section. So you will need to add some content before you try to build the site.\nLet\u0026rsquo;s look at the content/post/first.md file, after adding content to it. $ cat content/post/first.md --- title: \u0026#34;First\u0026#34; date: 2018-02-11T11:35:58+05:30 draft: true Tags: [\u0026#34;first\u0026#34;] Categories: [\u0026#34;Hugo\u0026#34;] --- Hi there. My first Hugo post\nNow that our posts are ready, we need to create templates to show them in a list on the home page and to show their content on separate pages for each post.\nWe will first edit the template for the home page that we created previously. We will then modify \u0026ldquo;single\u0026rdquo; templates which are used to generate output for a single content file. We also have \u0026ldquo;list\u0026rdquo; templates which are used to group similar type of content and render them as a list. The home page will show a list of last ten posts that we have created. Let\u0026rsquo;s update its template to add this logic.\nUpdate your home page to show your content Now add your template code to themes/zeo/layouts/index.html. $ vim themes/zeo/layouts/index.html $ cat !$ cat themes/zeo/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;\nHugo uses Go Template Engine. This engine scans the templates for commands that are enclosed between {{ and }}. In this template, the commands are range, first, .Data.Pages, .Title and end.\nThe template implies that we are going to get first 10 latest pages from our content folder and render their title as h1 heading.\nrange is an iterator function. Hugo treats every HTML file created as a page, so range will loop through all the pages created. Here we are instructing range to stop after first ten pages.\nThe end command signals the end of the range iterator. The engine loops back to the next iteration as soon as it encounters the end command. Everything between range and end will be evaluated for each iteration of the loop.\nBuild the website and see the changes. The homepage now shows our two posts. However, you cannot click on the posts and read their content. Let\u0026rsquo;s change that too.\nLinking your posts on Home Page Let\u0026rsquo;s add a link to the post\u0026rsquo;s page from home page. $ vim themes/zeo/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt; \u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt; \u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;\nBuild your site and see the result. The titles are now links, but when you click on them, it takes you to a page which says 404 page not found. That is expected because we have not created any template for the single pages where the content can be rendered. So Hugo could not find any template, and it did not output any HTML file. We will change that in a minute.\nWe want to render the posts, which are in content/post directory. That means that their section is post and their type is also post.\nHugo uses section and type information to identify the template file for each piece of content. It will first look for a template file which matches the section or type of the content. If it could not find it, then it will use _default/single.html file.\nSince we do not have any other content type yet, we will just start by updating the _default/single.html file.\nRemember that Hugo will use this file for every content type for which we have not created a template. However, for now, we will accept that cost as we do not have any other content type with us. We will refactor our templates to accommodate more content types, as we add more content.\nUpdate the template file. $ vim themes/zeo/layouts/_default/single.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;\nBuild the site and verify the results. You will see that on clicking on first, you get the usual result, but clicking on second still produces the 404 page not found error. It is because Hugo does not generate pages with empty content. Remember I mentioned it earlier.\nNow that we have our home page and posts page ready, we will build a page to list all the posts, not just the recent ten posts. This page will be accessible at http://localhost:1313/post. Currently, this page is blank because there is no template defined for it.\nThis page will show the listings of all the posts, so the type of this page will be a list. We will again use the default _default/list.html as we do not have any other content type with us.\nUpdate the list file.\n$ vim themes/zeo/layouts/_default/list.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range .Data.Pages }} \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Add \u0026ldquo;Date Published\u0026rdquo; to the posts It is a standard practice to add the date on which the post was published on the blog. The front matter of our posts has a variable named date. We will use that variable to fetch the date. Our posts are using the default single template, so we will edit that file.\n$ vim themes/zeo/layouts/_default/single.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Sun, Feb 11, 2018\u0026#34; }}\u0026lt;/h2\u0026gt; {{ .Content }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Adding top-level Pages Okay, so now that we have our homepage, post-list page and post content pages in place, we will add a new about page at the top level of our blog, not at a sublevel like we did for posts.\nHugo uses the directory structure of the content directory to identify the structure of the blog. Let\u0026rsquo;s verify that and create a new about page in the content directory.\n$ vim content/about.md --- title: \u0026#34;about\u0026#34; description: \u0026#34;about this blog\u0026#34; date: \u0026#34;2018-02-11\u0026#34; --- ### about me Hi there, you just reached my blog. Let\u0026rsquo;s generate the site and view the results.\n$ hugo --verbose $ ls -l public/ total 36 drwxr-xr-x 2 yash hogwarts 4096 Feb 11 12:43 about drwxr-xr-x 3 yash hogwarts 4096 Feb 11 12:43 categories drwxr-xr-x 2 yash hogwarts 4096 Feb 11 11:20 css -rw-r--r-- 1 yash hogwarts 187 Feb 11 12:43 index.html -rw-r--r-- 1 yash hogwarts 1183 Feb 11 12:43 index.xml drwxr-xr-x 2 yash hogwarts 4096 Feb 11 11:20 js drwxr-xr-x 4 yash hogwarts 4096 Feb 11 12:43 post -rw-r--r-- 1 yash hogwarts 1139 Feb 11 12:43 sitemap.xml drwxr-xr-x 3 yash hogwarts 4096 Feb 11 12:43 tags Notice that Hugo created a new directory about. This directory contains only one file index.html. The about page will be rendered from about/index.html.\nIf you look carefully, the about page is listed with the posts on the homepage. It is not desirable, so let\u0026rsquo;s change that first.\n$ vim themes/zeo/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026#34;post\u0026#34;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if eq .Type \u0026#34;page\u0026#34; }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Now build the site and verify the results. The homepage now has two sections, one for posts and other for the pages. Click on the about page. You will see the page for about. Remember, I mentioned that Hugo would use the single template for each page, for which it cannot find a template file. There is still one issue. The about page shows the date also. We do not want to show the date on the about page.\nThere are a couple of ways to fix this. We can add an if-else statement to detect the type of the content and display date only if it is a post. However, let\u0026rsquo;s use the feature provided by Hugo and create a new template type for the posts. Before we do that, let\u0026rsquo;s learn to use one more template type which is partials.\nPartials In Hugo, partials are used to store the shared piece of code which repeats in more than one templates. Partials are kept in themes/zeo/layouts/partials directory. Partials can be used to override the themes presentation. End users can use them to change the default behavior of a theme. It is always a good idea to use partials as much as possible.\nHeader and Footer partials Header and footer of most of the posts and pages will follow a similar pattern. So they form an excellent example to be defined as a partial. $ vim themes/zeo/layouts/partials/header.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; $ vim themes/zeo/layouts/partials/footer.html \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;\nWe can call a partial by including this path in the template {{ partial \u0026#34;header.html\u0026#34; . }}\nUpdate the Homepage template Let\u0026rsquo;s update our homepage template to use these partials. $ vim themes/zeo/layouts/index.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026#34;post\u0026#34;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if or (eq .Type \u0026#34;page\u0026#34;) (eq .Type \u0026#34;about\u0026#34;) }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} {{ partial \u0026#34;footer.html\u0026#34; . }}\nUpdate the single template $ vim themes/zeo/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Sun, Feb 11, 2018\u0026#34; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} Build the website and verify the results. The title on the posts and the about page should both reflect the value from the markdown file.\nFixing the date shown on About page Remember, we had the issue that the date was showing on the about page also. We discussed one method to solve this issue. Now I will discuss a more hugoic way of solving this issue.\nWe will create a new section template to fix this issue.\n$ mkdir themes/zeo/layouts/post $ vim themes/zeo/layouts/post/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} $ vim themes/zeo/layouts/_default/single.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Note that we have changed the default single template and added that logic in post\u0026rsquo;s single template.\nBuild the website and verify the results. The about page does not show the date now, but the posts page still show the date. We can also move the list template\u0026rsquo;s logic to the index.html file of post section template.\nConclusion We have learnt, how Hugo harnesses the powerful yet simple Go template engine to create the static site generator. We also learnt about partials and their excellent utilization by Hugo in the spirit of Don\u0026rsquo;t Repeat Yourself principle. Now that you know how to make themes in Hugo, go ahead and start creating new beautiful themes. Best of luck for your endaevour.\n"},"name":"Develop a Theme for Hugo","published":"2018-03-02T11:27:05+05:30","summary":"This article was originally published on zeolearn.\nIntroduction In this tutorial, I will show you how to create a basic Hugo theme. I assume that you are familiar with basic HTML, and how to write content in markdown. I will be explaining the working of Hugo and how it uses Go templating language and how you can use these templates to organize your content. As this post will be focusing mainly on Hugo\u0026rsquo;s working, I will not be covering CSS here.","type":"entry","url":"https://yashagarwal.in/posts/2018/03/develop-a-theme-for-hugo/"}