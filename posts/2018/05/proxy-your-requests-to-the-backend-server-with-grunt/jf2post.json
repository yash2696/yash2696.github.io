{"author":{"name":"Yash Agarwal","type":"card","url":"https://yashagarwal.in/"},"content":{"html":"\u003cp\u003e\u003cem\u003eThis article was originally published on \u003ca href=\"https://www.zeolearn.com/magazine/proxy-your-requests-to-the-backend-server-with-grunt\"\u003ezeolearn\u003c/a\u003e.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eIf you are working on large projects, it is undoubtedly a good idea to have a build script or some task scripts to help to automate some of the repetitive parts of the development process.\nFor JavaScript projects, \u003ccode\u003eGrunt\u003c/code\u003e serves a similar purpose. It is a JavaScript task/build runner that is written on top of NodeJS. Grunt can help you with automatically minifying your JavaScript or CSS files, or reload your browser on every file change. It can show you a comprehensive list of JavaScript errors, compile your \u003ccode\u003eSASS/LESS\u003c/code\u003e files into CSS files automatically, and many other things.\u003c/p\u003e\n\u003cp\u003eHowever, the most significant advantage of Grunt that I am going to discuss today is its ability to proxy your requests. For example, when you are developing your backend with anything other than JavaScript, you will face difficulty in accessing the backend data in your frontend without having to compile and deploy the code every time you make any changes. It is not possible with a typical web server setup because \u003ca href=\"https://en.wikipedia.org/wiki/XMLHttpRequest\"\u003eXHR\u003c/a\u003e requests are not allowed to be cross-domain by browsers due to \u003ca href=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\"\u003eCross-origin resource sharing\u003c/a\u003e (CORS) limitations.\u003c/p\u003e\n\u003cp\u003eSo, the problem here is as follows,\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eyou are developing the UI of your applications using some frontend JavaScript framework (say Angular) with Grunt as the build runner, and the backend of your application is being designed in some backend framework other than JavaScript/NodeJS (say Laravel), you might face problems accessing the backend while running Grunt server.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eIt happens because the backend Laravel service runs on port 8000, and the front end development server runs on port 8080. The requests from the frontend server to the backend-server will result in \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\"\u003esame-origin policy\u003c/a\u003e errors due to the port difference. To fix this issue, we can set up CORS through a proxy on Grunt. This proxy will stand in front of your frontend server and the backend server and get the required data from the backend and pass it to your frontend while letting your browser think that you are all in the same domain.\u003c/p\u003e\n\u003cp\u003eGrunt has a module \u003ca href=\"https://github.com/drewzboto/grunt-connect-proxy\"\u003egrunt-connect-proxy\u003c/a\u003e that exists to help to solve this issue. It delegates requests that match a given URL to the backend of your choice. So for example, you want to access your backend using the URL \u003ca href=\"http://localhost:8080/api\"\u003ehttp://localhost:8080/api\u003c/a\u003e, you can write a proxy rule so that whenever your user tries to access this URL in a browser, the proxy will get the data from your backend and server it at this particular URL.\u003c/p\u003e\n\u003cp\u003eThe procedure to set up the proxy is simple. First, you will have to add the proxy configuration to your \u003ccode\u003eGruntfile.js\u003c/code\u003e. In this example, I am assuming that the backend server is running on the port 8000, and the Grunt server is running on the port 8080. This configuration will delegate all requests to \u003ca href=\"http://localhost:8080/api\"\u003ehttp://localhost:8080/api\u003c/a\u003e to \u003ca href=\"http://localhost:8000/backend\"\u003ehttp://localhost:8000/backend\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"nx\"\u003econnect\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003eserver\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eoptions\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003eport\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e8080\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003ebase\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;public\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003ehostname\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;localhost\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003elivereload\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nx\"\u003emiddleware\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003econnect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eoptions\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003emiddlewares\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003emiddlewares\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eunshift\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003erequire\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;grunt-connect-proxy/lib/utils\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003eproxyRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003emiddlewares\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eproxies\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003econtext\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;/api\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003ehost\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;localhost\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003eport\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e8000\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003ehttps\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003erewrite\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"s1\"\u003e\u0026#39;^/api\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;/backend\u0026#39;\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eNow register your Grunt server task to run the proxy on Grunt execution.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"nx\"\u003egrunt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eregisterTask\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;server\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"nx\"\u003egrunt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etask\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003erun\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\n       \u003cspan class=\"s1\"\u003e\u0026#39;configureProxies:server\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n       \u003cspan class=\"s1\"\u003e\u0026#39;connect:server\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n   \u003cspan class=\"p\"\u003e]);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eLet me explain the above two scripts line by line. In the connect section of your \u003ccode\u003eGruntfile\u003c/code\u003e, we add a new section called \u003ccode\u003eproxies\u003c/code\u003e. The options defined in the proxies section are explained below.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003econtext\u003c/strong\u003e: This is the context against which the incoming requests will be matched. Matching requests will be proxied to the backend server.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ehost\u003c/strong\u003e: The host address where the backend server is running. The incoming requests will be proxied to this host.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eport\u003c/strong\u003e: The port where the backend server is running.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ehttps\u003c/strong\u003e: If your backend server is an https endpoint, then set this value to \u003ccode\u003etrue\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003erewrite\u003c/strong\u003e: This option allows rewriting of URL when proxying. What this means is that when trying to proxy \u003ca href=\"http://localhost:8080/api\"\u003ehttp://localhost:8080/api\u003c/a\u003e to the backend server, the URL will be rewritten as \u003ca href=\"http://localhost:8000/backend\"\u003ehttp://localhost:8000/backend\u003c/a\u003e. The object\u0026rsquo;s key serves as the regex used in the replacement operation, and the object\u0026rsquo;s value is the context of your backend server\u0026rsquo;s service.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eMore options can be found in the \u003ca href=\"https://github.com/drewzboto/grunt-connect-proxy#grunt-connect-proxy\"\u003edocumentation\u003c/a\u003e of \u003ccode\u003egrunt-connect-proxy\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eYou will also need to set up the proxy\u0026rsquo;s middleware in the \u003ccode\u003eoptions\u003c/code\u003e section of the \u003ccode\u003econnect\u003c/code\u003e. The relevant code is as follows.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003cspan class=\"nx\"\u003emiddleware\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003econnect\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eoptions\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003emiddlewares\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nx\"\u003emiddlewares\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eunshift\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003erequire\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;grunt-connect-proxy/lib/utils\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003eproxyRequest\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003emiddlewares\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eFinally, include your proxy task in the server task. It is necessary to append the proxy task before the connect task. Also, make sure to specify the connection target in the \u003ccode\u003econfigureProxies\u003c/code\u003e section. In our case, the connect target is \u003ccode\u003eserver\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eNow you can start your Grunt server via this configured proxy by typing \u003ccode\u003eGrunt server\u003c/code\u003e in the command line. You should see something like this in the console.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e$ grunt server\n...\nRunning \u003cspan class=\"s2\"\u003e\u0026#34;configureProxies:server\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003econfigureProxies\u003cspan class=\"o\"\u003e)\u003c/span\u003e task\nRewrite rule created \u003cspan class=\"k\"\u003efor\u003c/span\u003e: \u003cspan class=\"o\"\u003e[\u003c/span\u003e/^\u003cspan class=\"se\"\u003e\\/\u003c/span\u003eapi/ -\u0026gt; /backend\u003cspan class=\"o\"\u003e]\u003c/span\u003e.\nProxy created \u003cspan class=\"k\"\u003efor\u003c/span\u003e: /api to localhost:8000\n\nRunning \u003cspan class=\"s2\"\u003e\u0026#34;connect:server\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003econnect\u003cspan class=\"o\"\u003e)\u003c/span\u003e task\nStarted connect web server on http://localhost:8080\n...\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003eThe above output confirms that the proxy is working fine.\nSome of the example URLs are:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eGrunt Server\u003c/th\u003e\n\u003cth\u003eBackend Server\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003ehttp://127.0.0.1:8080/api\u003c/td\u003e\n\u003ctd\u003ehttp://127.0.0.1:8000/backend\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ehttp://127.0.0.1:8080/api/x/y\u003c/td\u003e\n\u003ctd\u003ehttp://127.0.0.1:8000/backend/x/y\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThat\u0026rsquo;s all. Now you will not face any problems getting data from any backend of your choice.\u003c/p\u003e\n","text":"This article was originally published on zeolearn.\nIf you are working on large projects, it is undoubtedly a good idea to have a build script or some task scripts to help to automate some of the repetitive parts of the development process. For JavaScript projects, Grunt serves a similar purpose. It is a JavaScript task/build runner that is written on top of NodeJS. Grunt can help you with automatically minifying your JavaScript or CSS files, or reload your browser on every file change. It can show you a comprehensive list of JavaScript errors, compile your SASS/LESS files into CSS files automatically, and many other things.\nHowever, the most significant advantage of Grunt that I am going to discuss today is its ability to proxy your requests. For example, when you are developing your backend with anything other than JavaScript, you will face difficulty in accessing the backend data in your frontend without having to compile and deploy the code every time you make any changes. It is not possible with a typical web server setup because XHR requests are not allowed to be cross-domain by browsers due to Cross-origin resource sharing (CORS) limitations.\nSo, the problem here is as follows,\n you are developing the UI of your applications using some frontend JavaScript framework (say Angular) with Grunt as the build runner, and the backend of your application is being designed in some backend framework other than JavaScript/NodeJS (say Laravel), you might face problems accessing the backend while running Grunt server.\n It happens because the backend Laravel service runs on port 8000, and the front end development server runs on port 8080. The requests from the frontend server to the backend-server will result in same-origin policy errors due to the port difference. To fix this issue, we can set up CORS through a proxy on Grunt. This proxy will stand in front of your frontend server and the backend server and get the required data from the backend and pass it to your frontend while letting your browser think that you are all in the same domain.\nGrunt has a module grunt-connect-proxy that exists to help to solve this issue. It delegates requests that match a given URL to the backend of your choice. So for example, you want to access your backend using the URL http://localhost:8080/api, you can write a proxy rule so that whenever your user tries to access this URL in a browser, the proxy will get the data from your backend and server it at this particular URL.\nThe procedure to set up the proxy is simple. First, you will have to add the proxy configuration to your Gruntfile.js. In this example, I am assuming that the backend server is running on the port 8000, and the Grunt server is running on the port 8080. This configuration will delegate all requests to http://localhost:8080/api to http://localhost:8000/backend.\nconnect: { server: { options: { port: 8080, base: \u0026#39;public\u0026#39;, hostname: \u0026#39;localhost\u0026#39;, livereload: true, middleware: function (connect, options, middlewares) { middlewares.unshift(require(\u0026#39;grunt-connect-proxy/lib/utils\u0026#39;).proxyRequest); return middlewares; } }, proxies: [ { context: \u0026#39;/api\u0026#39;, host: \u0026#39;localhost\u0026#39;, port: 8000, https: false, rewrite: { \u0026#39;^/api\u0026#39;: \u0026#39;/backend\u0026#39; } } ] } }  Now register your Grunt server task to run the proxy on Grunt execution.\ngrunt.registerTask(\u0026#39;server\u0026#39;, function (target) { grunt.task.run([ \u0026#39;configureProxies:server\u0026#39;, \u0026#39;connect:server\u0026#39;, ]); });  Let me explain the above two scripts line by line. In the connect section of your Gruntfile, we add a new section called proxies. The options defined in the proxies section are explained below.\n context: This is the context against which the incoming requests will be matched. Matching requests will be proxied to the backend server. host: The host address where the backend server is running. The incoming requests will be proxied to this host. port: The port where the backend server is running. https: If your backend server is an https endpoint, then set this value to true. rewrite: This option allows rewriting of URL when proxying. What this means is that when trying to proxy http://localhost:8080/api to the backend server, the URL will be rewritten as http://localhost:8000/backend. The object\u0026rsquo;s key serves as the regex used in the replacement operation, and the object\u0026rsquo;s value is the context of your backend server\u0026rsquo;s service.  More options can be found in the documentation of grunt-connect-proxy.\nYou will also need to set up the proxy\u0026rsquo;s middleware in the options section of the connect. The relevant code is as follows.\n... middleware: function (connect, options, middlewares) { middlewares.unshift(require(\u0026#39;grunt-connect-proxy/lib/utils\u0026#39;).proxyRequest); return middlewares; } ...  Finally, include your proxy task in the server task. It is necessary to append the proxy task before the connect task. Also, make sure to specify the connection target in the configureProxies section. In our case, the connect target is server.\nNow you can start your Grunt server via this configured proxy by typing Grunt server in the command line. You should see something like this in the console.\n$ grunt server ... Running \u0026#34;configureProxies:server\u0026#34; (configureProxies) task Rewrite rule created for: [/^\\/api/ -\u0026gt; /backend]. Proxy created for: /api to localhost:8000 Running \u0026#34;connect:server\u0026#34; (connect) task Started connect web server on http://localhost:8080 ... The above output confirms that the proxy is working fine. Some of the example URLs are:\n   Grunt Server Backend Server     http://127.0.0.1:8080/api http://127.0.0.1:8000/backend   http://127.0.0.1:8080/api/x/y http://127.0.0.1:8000/backend/x/y    That\u0026rsquo;s all. Now you will not face any problems getting data from any backend of your choice.\n"},"name":"Proxy Your Requests to the Backend Server With Grunt","published":"2018-05-15T17:14:13+05:30","summary":"This article was originally published on zeolearn.\nIf you are working on large projects, it is undoubtedly a good idea to have a build script or some task scripts to help to automate some of the repetitive parts of the development process. For JavaScript projects, Grunt serves a similar purpose. It is a JavaScript task/build runner that is written on top of NodeJS. Grunt can help you with automatically minifying your JavaScript or CSS files, or reload your browser on every file change.","type":"entry","url":"https://yashagarwal.in/posts/2018/05/proxy-your-requests-to-the-backend-server-with-grunt/"}